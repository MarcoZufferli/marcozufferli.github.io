<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Marco Zufferli</title><link>https://marcozufferli.com/posts/</link><description>Recent content in Posts on Marco Zufferli</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener"&gt;CC BY-NC 4.0&lt;/a&gt;</copyright><lastBuildDate>Fri, 26 Sep 2025 14:56:19 +0200</lastBuildDate><atom:link href="https://marcozufferli.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Demystify Kerberos Delegation Attacks</title><link>https://marcozufferli.com/posts/demystify_kerberos_delegation_attacks/</link><pubDate>Fri, 26 Sep 2025 14:56:19 +0200</pubDate><guid>https://marcozufferli.com/posts/demystify_kerberos_delegation_attacks/</guid><description>Hands-on explanation of Kerberos delegation exploitation techniques and pragmatic detection and hardening advice for defenders.</description><content type="html"><![CDATA[<hr>
<h4 id="table-of-contents">Table of Contents:</h4>
<ul>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer">Abuse Unconstrained Delegation</a>
<ul>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer-1-method---windows">Abuse Unconstrained Delegation (Computer) (1 method) - Windows</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer-2-method---windows">Abuse Unconstrained Delegation (Computer) (2 method) - Windows</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation---detect--mitigation">Abuse Unconstrained Delegation - Detect &amp; Mitigation</a></li>
</ul>
</li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition">Abuse Protocol Transition</a>
<ul>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-computer---windows">Abuse Protocol Transition (Computer) - Windows</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-user---windows">Abuse Protocol Transition (User) - Windows</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-computer---linux">Abuse Protocol Transition (Computer)- Linux</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-user---linux">Abuse Protocol Transition (User) - Linux</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition---detect--mitigation">Abuse Protocol Transition - Detect &amp; Mitigation</a></li>
</ul>
</li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl">Abuse RBCD via DACL</a>
<ul>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl-computer---windows">Abuse RBCD via DACL (Computer) - Windows</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl-computer---linux">Abuse RBCD via DACL (Computer) - Linux</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl---detect--mitigation">Abuse RBCD via DACL - Detect &amp; Mitigation</a></li>
</ul>
</li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only">Abuse Kerberos Only</a>
<ul>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only-computer---windows">Abuse Kerberos Only (Computer) - Windows</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only-user---windows">Abuse Kerberos Only (User) - Windows</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only---detect--mitigation">Abuse Kerberos Only - Detect &amp; Mitigation</a></li>
</ul>
</li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#outro">Outro</a></li>
<li><a href="/posts/demystify_kerberos_delegation_attacks/#references">References</a></li>
</ul>
<hr>
<h1 id="kerberos-delegation-attacks"><strong>Kerberos Delegation Attacks</strong></h1>

    <img src="/demystify_kerberos_delegation_attacks/immagine.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="reading-guide"><strong>Reading Guide</strong></h2>
<p>The first article &ldquo;<a href="/posts/demystify_kerberos_delegation/">Demystify Kerberos Delegation</a>&rdquo; was written in synergy with this article &ldquo;Demystify Kerberos Delegation Attacks&rdquo;, the first details the theory of Kerberos Delegation while the second the most common attacks that can be carried out on it.</p>
<p>Being both articles particularly long, you could either read them individually in their entirety or follow a legend that i will provide shortly to directly move from theory (<strong>T</strong>) to practice (<strong>P</strong>) in the fastest possible way, which is the way i personally suggest to you:</p>
<blockquote>
<p>If it’s your first time opening the other article, the browser may need a moment to load all images, so if the link doesn’t jump to the right section, just wait a bit and try again. 😊</p></blockquote>
<p><strong>Introduction:</strong></p>
<ol>
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#1000">What&rsquo;s Kerberos Delegation</a></li>
</ol>
<p><strong>Unconstrained Delegation &amp; Abuse:</strong></p>
<ol start="2">
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#unconstrained-delegation">Unconstrained Delegation</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer">Abuse Unconstrained Delegation</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer-1-method---windows">Abuse Unconstrained Delegation (Computer) (1 method) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer-2-method---windows">Abuse Unconstrained Delegation (Computer) (2 method) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation---detect--mitigation">Abuse Unconstrained Delegation - Detect &amp; Mitigation</a></li>
</ol>
<p><strong>Constrained Delegation (Protocol Transition) &amp; Abuse:</strong></p>
<ol start="7">
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#behaviour-change-about-kerberos-delegation-on-modern-windows-system">Behaviour Change about Kerberos Delegation on Modern Windows System</a></li>
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#constrained-delegation">Constrained Delegation</a></li>
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation (Kerberos only)</a></li>
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Constrained Delegation (Use any authentication Protocol) / Protocol Transition</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition">Abuse Protocol Transition</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-computer---windows">Abuse Protocol Transition (Computer) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-user---windows">Abuse Protocol Transition (User) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-computer---linux">Abuse Protocol Transition (Computer) - Linux</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-computer---linux">Abuse Protocol Transition (User) - Linux</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition---detect--mitigation">Abuse Protocol Transition - Detect &amp; Mitigation</a></li>
</ol>
<p><strong>Resource Based Constrained Delegation (RBCD) &amp; Abuse:</strong></p>
<ol start="17">
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#resource-based-constrained-delegation-rbcd">Resource Based Constrained Delegation (RBCD)</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl">Abuse RBCD via DACL</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl-computer---windows">Abuse RBCD via DACL (Computer) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl-computer---linux">Abuse RBCD via DACL (Computer) - Linux</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl---detect--mitigation">Abuse RBCD via DACL - Detect &amp; Mitigation</a></li>
</ol>
<p><strong>Constrained Delegation (Kerberos Only) &amp; Abuse:</strong></p>
<ol start="22">
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only">Abuse Kerberos Only</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only-computer---windows">Abuse Kerberos Only (Computer) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only-user---windows">Abuse Kerberos Only (User) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only---detect--mitigation">Abuse Kerberos Only - Detect &amp; Mitigation</a></li>
</ol>
<h2 id="let"><strong>Let&rsquo;s start with the Kerberos Delegation Attacks!</strong></h2>
<p>Before you begin, if you are not confident with Kerberos Delegation, i highly suggest you to start reading my other article called &ldquo;<a href="/posts/demystify_kerberos_delegation/">Demystify Kerberos Delegation</a>&rdquo;.</p>
<p>In this article i&rsquo;ll describe the most common abuse about Kerberos Delegation, specificaly, my home lab (<a href="/posts/demystify_kerberos_delegation/#behaviour-change-about-kerberos-delegation-on-modern-windows-system">&gt;= 2021</a>) is build with:</p>
<ul>
<li>1 Domain Controller: Windows Server 2022 (<a href="https://www.microsoft.com/it-it/evalcenter/download-windows-server-2022">fresh installation</a>)</li>
<li>2 Windows Client: Windows 10 (<a href="https://www.microsoft.com/it-it/evalcenter/download-windows-10-enterprise">fresh installation</a>)</li>
</ul>
<p>So, let&rsquo;s start!</p>
<h2 id="abuse-unconstrained-delegation-computer"><strong>Abuse Unconstrained Delegation (Computer)</strong></h2>
<p><strong>If a domain user performs a Kerberos authentication to a service with <a href="/posts/demystify_kerberos_delegation/#unconstrained-delegation">Kerberos Unconstrained Delegation</a> enabled</strong> (so when a Client access to a AP Front End), <strong>in addition to sending the TGS Ticket to access the service itself they will also share their own TGT Ticket, consequently, if an attacker is able to compromise that machine with the Unconstrained Delegation enabled, they will be able to extract ALL the TGT Tickets of ANY domain user who connected to that service, consequently the attacker will be able to impersonate them with a Pass The Ticket (PtT) attack.</strong></p>
<blockquote>
<p><a href="/posts/demystify_kerberos_delegation/#244">As already mentioned</a>, Kerberos Unconstrained Delegation can be enabled also on a regular domain user account and for this reason exists several scenario that can abuse also this configuration, for simplicity reason i choose to not describe them but if you want a deep dive please check others articles (<a href="https://medium.com/@offsecdeer/user-based-unconstrained-delegation-and-spn-jacking-29b916d1ff25">1</a>, <a href="https://exploit.ph/user-constrained-delegation.html">2</a>)</p></blockquote>
<p>Below it can be observed how the THEPUNISHER machine that has the CIFS service with Kerberos Unconstrained Delegation enabled, after a user like MARVEL\pparker logged into that service, has effectively cached in memory the TGT Ticket (Forwarded) of the user in question.</p>

    <img src="/demystify_kerberos_delegation_attacks/41.png"  class="center"  style="border-radius: 8px;"  />


<blockquote>
<p>In my tests after the user &ldquo;MARVEL\pparker&rdquo; closed the PsExec session established with the THEPUNISHER machine, that machine, considering that action as a &ldquo;logout&rdquo;, will delete the &ldquo;Logon Session&rdquo; of the user &ldquo;MARVEL\pparker&rdquo; and consequently also the related TGT Ticket (previously cached) contained within it.</p></blockquote>
<p><strong>So, if an attacker compromises a machine that has a service with Kerberos Unconstrained Delegation enabled they are able to:</strong></p>
<ul>
<li>
<p><strong>Dump ALL the TGT Tickets of all users who independently authenticated normally to the service.</strong></p>
</li>
<li>
<p><strong>Force the (Kerberos) authentication of a user to the service with Kerberos Unconstrained Delegation enabled (a.k.a &ldquo;<a href="https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/">Coerced Auth</a>&rdquo;), in this way the related TGT Ticket will be cached on the machine and can be dumped by the attacker</strong>, for example it can be achieved by:</p>
<ul>
<li><strong>Internal Phishing</strong>: Send phishing emails to users asking them (e.g., via a click link forcing an SMB Authentication via UNC - by default Kerberos is used) to perform an authentication (Kerberos) to the service with Unconstrained Delegation enabled hosted on the machine compromised by the attacker.</li>
</ul>
  <span id=1004>
<ul>
<li><strong>Coerced Authentication</strong>: Force authentication by a service (the related Service Account will log on) to the service with Unconstrained Delegation enabled; to do this, one can for example exploit the &ldquo;Printer Bug&rdquo; feature (<a href="https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained">or similar</a>).</li>
</ul>
</li>
</ul>
<blockquote>
<p>Let&rsquo;s assume a WORKSTATION1 machine that runs an HTTP service with the Service Account WORKSTATION1$, since this account has the &ldquo;TRUSTED_FOR_DELEGATION&rdquo; flag set to &ldquo;TRUE&rdquo; / &ldquo;1&rdquo; the HTTP service will have Kerberos Unconstrained Delegation enabled, <a href="/posts/not_so_brief_overview_about_kerberos/#17">given that ALSO ALL services started on that machine under the Local System account in the Kerberos context will use the Service Account WORKSTATION01$ (for example by default the CIFS or LDAP service)</a>, those services will also have Kerberos Unconstrained Delegation enabled; consequently, if an attacker, after compromising a machine, discovers that the related Computer Account has the &ldquo;TRUSTED_FOR_DELEGATION&rdquo; flag set to &ldquo;TRUE&rdquo; / &ldquo;1&rdquo;, they could force authentication to ANY service started with that machine&rsquo;s Local System account such as CIFS or LDAP, and then dump the obtained TGT.</p></blockquote>
<p>To identify whether Unconstrained Delegation is enabled within the domain, it is necessary to verify which AD objects have the &ldquo;<a href="/posts/demystify_kerberos_delegation/#25">TRUSTED_FOR_DELEGATION</a>&rdquo; flag set to &ldquo;TRUE&rdquo; / &ldquo;1&rdquo; within their &ldquo;UserAccountControl&rdquo; property, to do this in Windows we can for example use &ldquo;<a href="https://learn.microsoft.com/en-us/powershell/module/activedirectory/get-adcomputer?view=windowsserver2022-ps">Get-ADComputer</a>&rdquo;.</p>
<p>The attacker could use the built-in PowerShell utility &ldquo;&quot;<a href="https://learn.microsoft.com/en-us/powershell/module/activedirectory/get-adcomputer?view=windowsserver2022-ps">Get-ADComputer</a>&rdquo;, which is available only if the &ldquo;<a href="https://learn.microsoft.com/en-us/powershell/module/activedirectory/?view=windowsserver2025-ps">Active Directory Module</a>&rdquo; exists on the machine (present by default on Windows Server, while on Windows Client it must be installed).</p>
<pre tabindex="0"><code>PS C:\&gt; Get-ADComputer -Filter {TrustedForDelegation -eq $true -and primarygroupid -eq 515} -Properties trustedfordelegation,serviceprincipalname,description
</code></pre>
    <img src="/demystify_kerberos_delegation_attacks/44.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="abuse-unconstrained-delegation-computer-1-method---windows"><strong>Abuse Unconstrained Delegation (Computer) (1 method) - Windows</strong></h2>
<p><strong>Dump ALL the TGT Tickets of all users who independently authenticated normally to the service.</strong></p>
<p>The user MARVEL\pparker (Domain Admin) logged into a service with Kerberos Unconstrained Delegation enabled hosted on the THEPUNISHER machine, consequently, since the attacker has compromised the THEPUNISHER machine they are able to:</p>
<ol>
<li>
<p><strong>Dump the TGT Ticket of the user &ldquo;MARVEL\pparker&rdquo;</strong></p>
<p>After compromising a machine that hosts a service with Kerberos Unconstrained Delegation enabled, an attacker can dump all cached Tickets (on Windows) with the following commands: <a href="https://tools.thehacker.recipes/mimikatz/modules/sekurlsa/tickets">sekurlsa::tickets /export</a> (Mimikatz), <a href="https://github.com/GhostPack/Rubeus?tab=readme-ov-file#dump">dump</a> (Rubeus), etc, in this example we will use &ldquo;Rubeus&rdquo;.</p>
<p>With the &ldquo;<a href="https://github.com/GhostPack/Rubeus?tab=readme-ov-file#triagesek">triage</a>&rdquo; command, if Rubeus was started with an administrative user it will print to the screen a table containing ALL the Kerberos Tickets present on the system:</p>
<pre tabindex="0"><code>C:&gt; Rubeus.exe triage
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/45.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see, there is a TGT Ticket (you can tell from the &ldquo;krbtgt&rdquo; service) related to the user MARVEL\pparker (ID:0x270352)</p>
<p>Specifically, the &ldquo;dump&rdquo; command will by default print ALL (if executed with administrative privilege) the Kerberos Tickets present on the system in base64 &ldquo;blob&rdquo; form which can be easily used in combo with the <a href="/posts/demystify_kerberos_delegation_attacks/#23">&ldquo;ppt&rdquo; command that we&rsquo;ll see later to perform the &ldquo;Pass The Ticket&rdquo; Attack</a>; in this example the parameters &ldquo;/luid&rdquo; (ID of the LogonSession involved) &amp; &ldquo;/service&rdquo; (indicating the &ldquo;krbtgt&rdquo; service will be equivalent to indicating the TGT Ticket) were used to dump the TGT Ticket of the user &ldquo;MARVEL\pparker&rdquo; (ID:0x270352)</p>
<pre tabindex="0"><code>C:&gt; Rubeus.exe dump /luid:&lt;logonsession_uid&gt; /service:&lt;service&gt;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/46.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>Perform a Pass The Ticket (PtT) attack</strong></p>
<p>Before to proceed i want to demonstrate that with the current user, so &ldquo;MARVEL\fcastle&rdquo;, which is the account the attacker used to compromise this machine, does NOT have administrative permissions because it CANNOT access the Domain Controller.</p>

        <img src="/demystify_kerberos_delegation_attacks/47.png"  class="center"  style="border-radius: 8px;"  />
    

<blockquote>
<p>With Wireshark it is possible to actually verify that the Kerberos protocol was used for the authentication attempt (<a href="/posts/not_so_brief_overview_about_kerberos/#23">AP-REQ</a> contained in the SMB protocol packet).</p></blockquote>
<p>In this example in order to perform a Pass The Ticket (PtT) without creating any kind of DoS we will use the so-called Sacrificial Process.</p>
<pre tabindex="0"><code>C:&gt; Rubeus.exe createnetonly /program:&#34;C:\Windows\System32\cmd.exe&#34; /show
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/48.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see a new &ldquo;cmd.exe&rdquo; process has now been created; that&rsquo;s a new shell associated with a new LogonSession with fake credentials and WITHOUT Kerberos Tickets associated, consequently the attacker can now import Kerberos Tickets into this shell to carry out the Pass The Ticket (PtT) attack.</p>
<p>We therefore perform the Pass The Ticket (PtT):</p>
 <span id=23>
<pre tabindex="0"><code>C:&gt; Rubeus.exe ptt /ticket:&lt;blob_encode64_ticket&gt;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/49.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see below, the attacker is now able to correctly impersonate the Domain Admin user &ldquo;MARVEL\pparker&rdquo; and thus access the Domain Controller.</p>

        <img src="/demystify_kerberos_delegation_attacks/50.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
</ol>
<h2 id="abuse-unconstrained-delegation-computer-2-method---windows"><strong>Abuse Unconstrained Delegation (Computer) (2 method) - Windows</strong></h2>
<p><strong>Force the authentication (Kerberos) of a user to the service with Kerberos Unconstrained Delegation enabled (a.k.a &ldquo;<a href="https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/">Coerced Auth</a>&rdquo;), in this way the relative TGT Ticket will be cached on the machine and can be dumped by the attacker; in this section we will see how to force the authentication using the so-called &ldquo;Printer Bug&rdquo;.</strong></p>
<p>&ldquo;Printer Bug&rdquo; is a flaw never fully patched by Microsoft that affects the <a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rprn/d42db7d5-f141-4466-8f47-0a4be14e2fc1">MS-RPRN protocol (Print System Remote Protocol)</a>, this protocol briefly defines print jobs between a Client and a Print Server (any machine with the &ldquo;spooler&rdquo; service enabled)</p>
<p><a href="https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1#a2e6">In short</a>, this &ldquo;Printer Bug&rdquo; allows any domain user (every user included in the &ldquo;<a href="https://zer1t0.gitlab.io/posts/attacking_ad/#kerberos-unconstrained-delegation">Authenticated Users</a>&rdquo; group) to connect to the so-called &ldquo;Spools Named Pipe&rdquo; of a Printer Server using the &ldquo;<a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rprn/989357e2-446e-4872-bb38-1dce21e1313f">RpcOpenPrinter</a>&rdquo; method and use the &ldquo;<a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rprn/b8b414d9-f1cd-4191-bb6b-87d09ab2fd83">RpcRemoteFirstPrinterChangeNotificationEx</a>&rdquo; method which it forces a SMB authentication (Kerberos or NTLM) by the PrinterServer towards any machine specified by the Client.</p>
<p>An attacker, after compromising a machine with Kerberos Unconstrained Delegation enabled, could use the &ldquo;PrinterBug&rdquo; to force a Kerberos SMB authentication of any PrinterServer (in reality the Service Account of the print service will be used - <a href="/posts/not_so_brief_overview_about_kerberos/#17">which being usually LocalSystem will be the &ldquo;Computer Account&rdquo; of the machine in the Kerberos context</a>) towards the service with Unconstrained Delegation enabled; in this way the attacker can retrieve the TGT Ticket of the victim Computer Account.</p>
<p>Since by default the &ldquo;spool&rdquo; (print) service is enabled on almost ALL machines, an attacker could perform this attack against a Domain Controller thus managing to retrieve the TGT Ticket of the DC&rsquo;s &ldquo;Computer Account&rdquo;, in this way the attacker could use it to perform a DC Sync and therefore compromise the domain.</p>
<span id=25>
<blockquote>
<p>A &ldquo;TGT Ticket Forwarded&rdquo; works slightly differently compared to a &ldquo;traditional&rdquo; TGT Ticket; specifically, if the attacker obtains a &ldquo;TGT Ticket Forwarded&rdquo; of a Computer Account such as THEPUNISHER$ unfortunately it will NOT be possible with it to log on to the SMB share &ldquo;C$&rdquo; of the THEPUNISHER machine, consequently it will NOT be possible to log on via PsExec to the target machine.</p></blockquote>
<p>Let&rsquo;s see in practice how to execute this attack:</p>
<ol>
<li>
<p><strong>The attacker has compromised the THEPUNISHER machine which has a service with Unrestricted Kerberos Delegation enabled</strong></p>

        <img src="/demystify_kerberos_delegation_attacks/51.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>The attacker identifies which machines that have connectivity with THEPUNISHER have the &ldquo;spooler&rdquo; service enabled and are therefore affected by the &ldquo;PrinterBug&rdquo;, in our example we will test the Domain Controller HYDRA-DC.</strong></p>
<p>To identify which machines have the &ldquo;spooler&rdquo; service enabled, among other methods, it is possible to:</p>
<ul>
<li>
<p><em>PS C:&gt; ls \\&lt;machine_target&gt;\pipe\spoolss</em>*</p>
<p>If we do NOT get an error it means that the target machine HAS the spooler service enabled</p>
</li>
</ul>

        <img src="/demystify_kerberos_delegation_attacks/52.png"  class="center"  style="border-radius: 8px;"  />
    

<ul>
<li>
<p><em>PS C:&gt; <a href="https://github.com/vletoux/SpoolerScanner">SpoolerScan.ps1</a></em></p>
<p>The source must be modified by inserting the IP of the machine you want to check, as you can see in our example the Domain Controller HAS the spooler service enabled.</p>
<p>
            <img src="/demystify_kerberos_delegation_attacks/53.png"  class="center"  style="border-radius: 8px;"  />
        

<br></p>

            <img src="/demystify_kerberos_delegation_attacks/54.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ul>
<p>As you can see in our example the Domain Controller HAS the spooler service enabled</p>
</li>
<li>
<p><strong>The attacker, via the &ldquo;Printer Bug&rdquo;, forces the Service Account (Computer Account) of the &ldquo;spooler&rdquo; service present on the Domain Controller &ldquo;HYDRA-DC&rdquo; to authenticate via Kerberos to the SMB service of the machine the attacker compromised named THEPUNISHER, i.e. the one with Kerberos Unconstrained Delegation enabled.</strong></p>
<p>Before exploiting the &ldquo;Printer Bug&rdquo; the attacker could execute the &ldquo;<a href="https://github.com/GhostPack/Rubeus?tab=readme-ov-file#monitor">monitor</a>&rdquo; command of &ldquo;Rubeus&rdquo; (almost analogous to &ldquo;Rubeus <a href="https://github.com/GhostPack/Rubeus?tab=readme-ov-file#dump">dump</a>&rdquo; repeated) on the machine THEPUNISHER (to be executed with administrative permissions to display the Kerberos TTs of ALL users), so the machine with the service with the Unconstrained Delegation enabled, in this way the attacker will monitor and print on screen ALL the Kerberos Tickets that he will receive.</p>
<p>Specifically the &ldquo;interval&rdquo; parameter specifies how often every certain amount of time it must print on screen the new TGTs captured, while &ldquo;nowrap&rdquo; will print the Base64Encoded TTs without newlines.</p>
<blockquote>
<p>The command requires to be executed with administrative</p></blockquote>
<pre tabindex="0"><code>C:&gt; Rubeus.exe monitor /interval:5 /nowrap 
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/55.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Having done this, the attacker can exploit the PrinterBug using several tools, for example: <a href="https://github.com/leechristensen/SpoolSample">SpoolSample</a> (to be compiled) or <a href="https://github.com/dirkjanm/krbrelayx/blob/master/printerbug.py">printerbug.py</a>, in our example we&rsquo;ll use the <a href="https://github.com/jtmpu/PrecompiledBinaries/blob/master/SpoolSample.exe">first already compiled</a>; all of this can be executed ALSO directly on the machine with Unconstrained Delegation enabled, as in our case &ldquo;THEPUNISHER&rdquo;.</p>
<blockquote>
<p>We used the PrinterBug just as an example, an attacker could use other tools to perform an &ldquo;<a href="https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/">Coerced Auth</a> technique&rdquo;, for example using <a href="https://github.com/Wh04m1001/DFSCoerce?tab=readme-ov-file">DFSCoerce</a> (it uses <a href="https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/ms-dfsnm">MS-DFSNM protocol</a>) and <a href="https://github.com/topotam/PetitPotam">PetitPotam</a> (it uses <a href="https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/ms-efsr">MS-EFSRPC protocol</a>);</p></blockquote>
<pre tabindex="0"><code>C:\&gt; SpoolSample.exe &lt;DC_Hostname&gt; &lt;Hostname_with_unconstrained_enabled&gt;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/56.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see the attacker has now recovered the TGT Ticket of the Computer Account HYDRA-DC$.</p>
<blockquote>
<p>It is necessary to specify the hostname and not the IP because otherwise NTLM authentication will be used and no delegation will be applied.</p></blockquote>
</li>
<li>
<p><strong>By performing Pass The Ticket (PtT) the attacker impersonates the Computer Account of the Domain Controller and consequently will be able to perform a DC Sync Attack.</strong></p>
<p>Now that the attacker possesses the TGT Ticket (forwarded) of the Computer Account of the Domain Controller, in this case the account HYDRA-DC$, <a href="/posts/demystify_kerberos_delegation_attacks/#25">given that this Ticket does NOT allow authentication to the DC</a> BUT allows a DCSync Attack, we will retrieve via DCSync the password of the &ldquo;krbtgt&rdquo; account with which the attacker will be able to forge a Golden Ticket to access the DC and thus compromise the domain.</p>
<p>In this example, to perform a Pass The Ticket (PtT) without creating any kind of service disruption we will use the so-called Sacrifical Process.</p>
<pre tabindex="0"><code>C:&gt; Rubeus.exe createnetonly /program:&#34;C:\Windows\System32\cmd.exe&#34; /show
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/56.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see a new &ldquo;cmd.exe&rdquo; process has now been created; that&rsquo;s a new shell associated with a new LogonSession with fake credentials and WITHOUT Kerberos Tickets associated, consequently the attacker can now import Kerberos Tickets into this shell to carry out the Pass The Ticket (PtT) attack.</p>
<p>We then perform the Pass The Ticket (PtT):</p>
<pre tabindex="0"><code>C:&gt; Rubeus.exe ptt /ticket:&lt;blob_encode64_ticket&gt;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/57.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see below now the attacker is able to perform a DCSync using for example the &ldquo;<a href="https://adsecurity.org/?page_id=1821">lsadump::dcsync</a>&rdquo; command of Mimikatz, with it he dumped for example the password of the krbtgt account to create a Golden Ticket and so compromise the domain.</p>

        <img src="/demystify_kerberos_delegation_attacks/58.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
</ol>
<h2 id="abuse-unconstrained-delegation---detect--mitigation"><strong>Abuse Unconstrained Delegation - Detect &amp; Mitigation</strong></h2>
<p><strong>Detect</strong></p>
<p>Ask your SIEM / Detection Engineer to create a <a href="https://learn.microsoft.com/en-us/defender-xdr/custom-detection-rules">detection rule</a> ad hoc 😝</p>
<p>Jokes aside, for an high overview i suggest you to start using an Identity Monitoring Solution (e.g. <a href="https://learn.microsoft.com/en-us/defender-for-identity/what-is">Defender for Identity</a>) and only after that to perform a <a href="https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1">deep dive into a custom rule</a>.</p>
<p><strong>Mitigation</strong></p>
<p>The only real solution is to disable the Unconstrained Delegation on every host within your infrastructure (Domain Controller excluded, <a href="https://en.hackndo.com/constrained-unconstrained-delegation">disable it will perform issues</a>) and use another type of Kerberos Delegation.</p>
<p>If it&rsquo;s not possible to disable the Unconstrained Delegation, there are mitigations that can mitigate the impact:</p>
<ul>
<li>
<p><a href="/posts/demystify_kerberos_delegation_attacks/#1004">Disable the PrintSpooler service on ALL Domain Controllers &amp; all related Coerced Auth</a> (it blocks the <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer-2-method---windows">Abuse Unconstrained Delegation (Computer) (2 method) attack</a>)</p>
</li>
<li>
<p>Configure the property &ldquo;Account is sensitive and cannot be delegated&rdquo; on privileged accounts (<a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition---detect--mitigation">detailed explaination here</a>) (it mitigates the <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer-1-method---windows">Abuse Unconstrained Delegation (Computer) (1 method) attack</a>)</p>
</li>
<li>
<p>Add privileged accounts to the &ldquo;Protected Users Group&rdquo; (<a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition---detect--mitigation">detailed explaination here</a>) (it mitigates the <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer-1-method---windows">Abuse Unconstrained Delegation (Computer) (1 method) attack</a>).</p>
</li>
</ul>
<h2 id="abuse-protocol-transition"><strong>Abuse Protocol Transition</strong></h2>
<p>If an attacker compromises a Service Account with &ldquo;<a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Constrained Delegation (Use any authentication Protocol)</a>&rdquo; enabled (a.k.a Protocol Transition), so, in most scenarios a Computer Account (usually by compromising the corresponding machine), the attacker, by impersonating the machine, could invoke the <a href="/posts/demystify_kerberos_delegation/#100">&ldquo;S4U2Self&rdquo; &amp; &ldquo;S4U2Proxy&rdquo;</a> extensions and thus obtain a TGS Ticket belonging to a certain user valid to access the Back-End service that the compromised machine is authorized to access on behalf of the Client (so the services indicated in the &ldquo;<a href="/posts/demystify_kerberos_delegation/#101">msds-allowedtodelegateto</a>&rdquo; flag).</p>
<p>That said, there are two other extremely useful pieces of information to consider:</p>
<ol>
<li>
<p><a href="/posts/demystify_kerberos_delegation/#31">As already mentioned</a>, when the <a href="/posts/demystify_kerberos_delegation/#2-krb_tgs_req-s4u2self--s4uself-request">S4U2Self</a> extension is invoked, it is necessary to specify which domain user will be the owner of the TGS Ticket that will be issued, in this step i want to highlight that the KDC will performs NO checks about that so it will issue the TGS Ticket for ANY specified domain user.</p>
<p>Knowing this the attacker can invoke the <a href="/posts/demystify_kerberos_delegation/#2-krb_tgs_req-s4u2self--s4uself-request">S4U2Self</a> extension for ANY domain user and thus obtain a TGS Ticket belonging to an arbitrary domain user, so the attacker will be able to authenticate to the Back-End service impersonating ANY domain user.
<span id=4></p>
</li>
<li>
<p>The TGS Ticket always consists of two parts: a NON encrypted part containing the SPN of the requested service (e.g: CIFS/WORKSTATION01) and an &ldquo;encrypted&rdquo; part containing other information.</p>
<p>Since the SPN contained in the TGS Ticket is NOT encrypted, an attacker could modify it (it would still be a valid TGS Ticket) by replacing the service of the target machine with another service also exposed on the target machine, thus, an attacker could for example obtain a valid TGS Ticket for the CIFS service on the SQL01 machine (CIFS\SQL01) and modify it to make it valid for the HTTP service on the same SQL01 machine (HTTP/SQL01) before sending it in a KRB_AP_REQ.</p>
</li>
</ol>
<span id=1>
<blockquote>
<p>The service that is inserted must have the same Service Account as the replaced service (since the Service Account is often the Computer Account this requirement will be usually satisfied - <a href="/posts/not_so_brief_overview_about_kerberos/#17">because the Computer Account is the Service Account in the Kerberos context of ANY service running under the LocalSystem account, including usually CIFS, HTTP, etc; so a lot of services</a>), only in this way will the TGS Ticket with the modified SPN be valid.</p></blockquote>
<p>With this information in mind we figure out the following conclusion:</p>
<p><strong>If an attacker compromises a Service Account with &ldquo;<a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Constrained Delegation (Use any authentication Protocol)</a>&rdquo; enabled (a.k.a Protocol Transition), so, in most scenarios a Computer Account (usually by compromising the related machine), the attacker impersonating the machine could invoke the <a href="/posts/demystify_kerberos_delegation/#100">&ldquo;S4U2Self&rdquo; &amp; &ldquo;S4U2Proxy&rdquo;</a> extension and thus obtain a TGS Ticket belonging to ANY domain user and valid to access ANY (<a href="/posts/demystify_kerberos_delegation_attacks/#1">usually</a>) Back-End service that the compromised machine is authorized to access on behalf of the Client (indicated in the &ldquo;<a href="/posts/demystify_kerberos_delegation/#101">msds-allowedtodelegateto</a>&rdquo; flag).</strong></p>
<p>By exploiting this attack, the attacker will therefore be able to authenticate with administrative privileges (since they can impersonate ANY domain user) to certain services; depending on the type of service accessed, the attacker could perform <a href="https://zer1t0.gitlab.io/posts/attacking_ad/#s4u-attacks">various malicious activities</a>, for example:</p>
<ul>
<li><strong>LDAP on a Domain Controller</strong>: As described by Microsoft (<a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-drsr/06205d97-30da-4fdc-a276-3fd831b272e0">1</a>, <a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-drsr/0597aff6-0177-4d52-99f2-14a5441bc3c1">2</a>), some functionalities provided by the MDRS protocol (the protocol used to perform a DC Sync Attack) are also accessible via the LDAP protocol; this overlap of functionalities, broadly speaking, allows an attacker who obtains a valid TGS Ticket for the LDAP service (impersonating an administrative user, e.g., Domain Admin) to perform a <a href="https://adsecurity.org/?p=1729">DC Sync Attack</a> against the DC.</li>
</ul>
<blockquote>
<p>I don’t fully understand how this happens under-the-hood; sniffing with Wireshark shows that the LDAP service is not actually queried, instead, packet exchanges occur exclusively with the services used by the MDRS protocol.</p></blockquote>
<ul>
<li>
<p><strong>SMB</strong>: If the attacker impersonates an administrative user (e.g., Domain Admin) to the SMB service (CIFS in SPN context) of a computer, the attacker could authenticate using tools like &ldquo;psexec&rdquo; (depending on the PsExec tool used, it will impersonate the LocalSystem / Local Administrator user).</p>
</li>
<li>
<p><strong>MSSQL</strong>: If the attacker impersonates an administrative user (e.g., Domain Admin) to the MSSQL service, the attacker, in addition to potentially obtaining sensitive data contained within, can exploit the MSSQL service to execute local commands on the machine via &ldquo;xp_cmdshell&rdquo;, use &ldquo;<a href="https://www.netspi.com/blog/technical-blog/network-pentesting/sql-server-link-crawling-powerupsql/">SQL Server Link</a>&rdquo; and etc.</p>
</li>
</ul>
<span id=48>
<ul>
<li><strong>HTTP</strong>: Since the <a href="https://blog.scalefusion.com/it/windows-remote-management-guide/">WinRM</a> service uses the HTTP service, if the attacker impersonates an administrative user (e.g., Domain Admin) to the HTTP service of a computer, and the machine has WinRM enabled, the attacker could authenticate to it.</li>
</ul>
<blockquote>
<p>Often an error related to <a href="https://sensepost.com/blog/2022/constrained-delegation-considerations-for-lateral-movement/">a missing &ldquo;Logon Session&rdquo; occurs</a>; in that case, retry the attack ensuring that the command exploiting Kerberos Delegation is executed from a shell with a High Integrity Level Token and that no additional Tickets have been previously injected into that Logon Session; after that, try logging in both via PowerShell Remoting (Enter-PSSession, New-PSSession, and Invoke-Command) and WinRS; using this method, logging in usually succeeds.</p></blockquote>
<p><strong>In conclusion, broadly speaking, if an attacker compromises a machine (or a domain user acting as a Service Account) with &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo; enabled, they can also compromise the machine (usually via CIFS) that the compromised system is authorized (via the &ldquo;msds-allowedtodelegateto&rdquo; flag) to access on behalf of the Client.</strong></p>
<h2 id="abuse-protocol-transition-computer---windows"><strong>Abuse Protocol Transition (Computer) - Windows</strong></h2>
<p>In this scenario, we will see how to exploit a <strong>Constrained Delegation (Use any authentication Protocol) (also called Protocol Transition)</strong> from a Windows machine.</p>
<ol>
<li>
<p><strong>Identify which Service Accounts have &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo; enabled (in this scenario, we are looking for Computer Accounts acting as Service Accounts).</strong></p>
<p>There are different methods to identify which Service Accounts have &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo;; on Windows, one of the most common is using &ldquo;PowerView&rdquo;:</p>
<pre tabindex="0"><code>PS C:&gt; Get-DomainComputer --TrustedToAuth
</code></pre> <span id=2>

        <img src="/demystify_kerberos_delegation_attacks/1.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see, the Computer Account THEPUNISHER$ has the &ldquo;<a href="/posts/demystify_kerberos_delegation/#102">TRUSTED_TO_AUTH_FOR_DELEGATION</a>&rdquo; flag and therefore has <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Constrained Delegation (Use any authentication Protocol)</a> enabled; specifically, this account (so THEPUNISHER$) and therefore ALL services running under it will be able to authenticate on behalf of the Client exclusively to the SPN &ldquo;HTTP/SPIDERMAN,&rdquo; so to the HTTP service of the SPIDERMAN machine.</p>
<p>Indeed, inspecting the &ldquo;Delegation&rdquo; tab of the THEPUNISHER computer via ADUC, we will find this     configuration.</p>

        <img src="/demystify_kerberos_delegation_attacks/2.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>The attacker compromises the Service Account with Constrained Delegation (Use any authentication Protocol) enabled.</strong></p>
<p>In this scenario, the attacker managed to authenticate with administrative privileges to the THEPUNISHER machine and, by dumping LSASS, obtained the credentials of the Computer Account THEPUNISHER$, so the Service Account with the Constrained Delegation (Use any authentication Protocol) enabled.</p>

        <img src="/demystify_kerberos_delegation_attacks/3.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>The attacker obtains a valid TGS Ticket (for Domain Admin) to authenticate to the CIFS service hosted on the SPIDERMAN machine (that is, the machine authorized in the &ldquo;msds-allowedtodelegateto&rdquo; flag).</strong></p>
<p>The attacker, now possessing the credentials of the Service Account THEPUNISHER$, since this account has &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo;, can abuse it to invoke the S4U2Self &amp; S4U2Proxy extensions and thus obtain a TGS Ticket belonging to a Domain Admin user valid to access the HTTP service of the SPIDERMAN machine (<a href="/posts/demystify_kerberos_delegation_attacks/#2">so, the service specified in the &ldquo;msds-allowedtodelegateto&rdquo; flag</a>); furthermore, in this scenario the attacker decides to replace the SPN &ldquo;HTTP/SPIDERMAN&rdquo; with the SPN &ldquo;CIFS/SPIDERMAN&rdquo;, managing in this way to authenticate via PsExec to the SPIDERMAN machine.</p>
<p>Since we will inject the desired TGS Ticket into memory, first of all we use the so-called Sacrificial Process.</p>
<pre tabindex="0"><code>C:&gt; Rubeus.exe createnetonly /program:&#34;C:\Windows\System32\cmd.exe&#34; /show
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/4.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Then execute the following Rubeus command within the Sacrificial Process.
<span id=5></p>
<pre tabindex="0"><code>C:\&gt; Rubeus.exe s4u /impersonateuser:&lt;User_To_Impersonate&gt; /msdsspn:&lt;SPN_inside_in_msds-allowedtodelegateto&gt; /altservice:&lt;Desired_SPN&gt; /user:&lt;Service_Account&gt; /rc4:&lt;NTLM_Service_Account&gt; /nowrap /ptt
</code></pre> <span id=401>
<p>Let&rsquo;s analyze ALL the operations performed by Rubeus.</p>
<ol>
<li>
<p><strong>Rubeus sent a &ldquo;<a href="/posts/not_so_brief_overview_about_kerberos/#39">KRB_AS_REQ</a>&rdquo; to obtain the TGT Ticket of the Computer Account THEPUNISHER$, <a href="/posts/demystify_kerberos_delegation/#109">information necessary</a> to invoke the &ldquo;KRB_TGS_REQ (S4USelf)&rdquo;.</strong></p>
<!-- only for spacing -->
<p>
            <img src="/demystify_kerberos_delegation_attacks/5.png"  class="center"  style="border-radius: 8px;"  />
        

<br>

            <img src="/demystify_kerberos_delegation_attacks/6.png"  class="center"  style="border-radius: 8px;"  />
        
</p>
</li>
<li>
<p><strong>Rubeus now, having the TGT Ticket of the Computer Account &ldquo;THEPUNISHER$&rdquo;, sends a &ldquo;KRB_TGS_REQ <a href="/posts/demystify_kerberos_delegation/#2-krb_tgs_req-s4u2self--s4uself-request">(S4U2Self)</a>&rdquo; to obtain a TGS Ticket on behalf of the user &ldquo;MARVEL\Administrator&rdquo; (Domain Admin) valid for the service itself.</strong></p>
<!-- only for spacing -->

            <img src="/demystify_kerberos_delegation_attacks/7.png"  class="center"  style="border-radius: 8px;"  />
        

<p>As we can note Rubeus sends a &ldquo;KRB_TGS_REQ <a href="/posts/demystify_kerberos_delegation/#2-krb_tgs_req-s4u2self--s4uself-request">(S4U2Self)</a>&rdquo;, analyzing the packet content one can observe that: 1) <a href="/posts/demystify_kerberos_delegation/#111">Inside the &ldquo;PA-FOR-USER&rdquo;</a> data structure the request for the TGS Ticket on behalf of the user &ldquo;MARVEL\Administrator&rdquo; (it&rsquo;s a Domain Admin) is effectively present 2) <a href="/posts/demystify_kerberos_delegation/#31">The Computer Account THEPUNISHER$ is expressly indicated</a>, in this way the issued TGS Ticket will be valid for ALL services started by that Service Account.</p>
<p>
            <img src="/demystify_kerberos_delegation_attacks/8.png"  class="center"  style="border-radius: 8px;"  />
        

<span id=3></p>
<p>The KDC <a href="/posts/demystify_kerberos_delegation/#112">verifies</a> that the Service Account THEPUNISHER$ has the &ldquo;<a href="/posts/demystify_kerberos_delegation/#102">TRUSTED_TO_AUTH_FOR_DELEGATION</a>&rdquo; flag, and since the result is <a href="/posts/demystify_kerberos_delegation_attacks/#2">positive</a>, the KDC issues the requested TGS Ticket (which belong to the user MARVEL\Administrator&quot; &amp; is valid for ALL services started by that Service Account), furthermore, i remind you that such a TGS Ticket issued in this positive case will have the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo;.</p>

            <img src="/demystify_kerberos_delegation_attacks/9.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ol>
 <span id=32>
<ol start="3">
<li>
<p><strong>Rubeus now that it has the TGS Ticket (belonging to the user MARVEL\Administrator&quot;) valid for the service itself, will be able to use it as &ldquo;evidence&rdquo; to invoke the &ldquo;KRB_TGS_REQ (<a href="/posts/demystify_kerberos_delegation/#118">S4UProxy</a>)&rdquo;, in this way the attacker will obtain a TGS Ticket (still belonging to the user MARVEL\Administrator) valid for the HTTP service exposed on the SPIDERMAN machine (HTTP/SPIDERMAN), finally, Rubeus will replace the HTTP service with the CIFS service, obtaining a TGS Ticket (still belonging to the user MARVEL\Administrator&quot;) valid for the CIFS service exposed on the SPIDERMAN machine.</strong></p>

            <img src="/demystify_kerberos_delegation_attacks/10.png"  class="center"  style="border-radius: 8px;"  />
        

<p>As we can see Rubeus sends a &ldquo;KRB_TGS_REQ (<a href="/posts/demystify_kerberos_delegation/#118">S4UProxy</a>&rdquo;, analyzing the content of the packet it can be ascertained that: 1) Inside the &ldquo;Additional Ticket&rdquo; field the <a href="/posts/demystify_kerberos_delegation_attacks/#37">TGS Ticket previously received in the &ldquo;S4USelf Response&rdquo; is indeed sent</a> 2) The SPN that points to the service which the compromised machine (Computer Account THEPUNISHER$) is authorized to access on behalf of the Client (indicated in the <a href="/posts/demystify_kerberos_delegation_attacks/#2">&ldquo;msds-allowedtodelegateto&rdquo; flag</a>) is indicated, in fact the SPN &ldquo;HTTP/SPIDERMAN.MARVEL.local&rdquo; is present</p>

            <img src="/demystify_kerberos_delegation_attacks/11.png"  class="center"  style="border-radius: 8px;"  />
        

<p>The KDC <a href="/posts/demystify_kerberos_delegation/#51">verifies</a> if the TGS Ticket received inside the &ldquo;additional-tickets&rdquo; field (in addition to being valid) has the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo; &amp; that inside the &ldquo;<a href="/posts/demystify_kerberos_delegation_attacks/#2">msds-allowedtodelegateto flag</a>&rdquo; parameter of the Service Account THEPUNISHER$ the requested service is present, (so is in this case &ldquo;HTTP/SPIDERMAN.MARVEL.local&rdquo;), since the outcome is positive for both checks (<a href="/posts/demystify_kerberos_delegation_attacks/#3">1</a>, <a href="/posts/demystify_kerberos_delegation_attacks/#2">2</a>), the KDC issues a TGS Ticket (belonging to the user MARVEL\Administrator&quot;) valid for the HTTP service exposed on the SPIDERMAN machine (furthermore, as for any other valid TGS Ticket this one will also have the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo;).</p>

             <img src="/demystify_kerberos_delegation_attacks/12.png"  class="center"  style="border-radius: 8px;"  />
         

<p>Finally, Rubeus will <a href="/posts/demystify_kerberos_delegation_attacks/#4">modify</a> the SPN field of the received TGS Ticket, replacing the HTTP service with the desired CIFS service, in this way the output TGS Ticket (belonging to the user MARVEL\Administrator&quot;) will have as SPN &ldquo;CIFS/SPIDERMAN&rdquo; and will therefore be valid for the CIFS service exposed on the SPIDERMAN machine, having done this Rubeus imports that Kerberos Ticket into memory.</p>
<blockquote>
<p>If the attacker does NOT wish to replace the service of the TGS Ticket obtained via S4UProxy they will simply NOT include the <a href="/posts/demystify_kerberos_delegation_attacks/#5">&ldquo;altservice&rdquo; parameter</a> on Rubeus command, consequently, in this context we will obtain a TGS Ticket (belonging to the user MARVEL\Administrator&quot;) valid for the HTTP service present on the SPIDERMAN machine.</p></blockquote>
</li>
</ol>
</li>
</ol>
<p>As you can see, following the Rubeus command we will have cached in memory a TGS Ticket belonging to the &ldquo;Administrator&rdquo; user valid for the CIFS service of the SPIDERMAN machine; in fact, performing a Network Logon with &ldquo;PsExec&rdquo; the OS will retrieve the cached TGS Ticket and use it to perform the authentication; in this way the attacker has succeeded in authenticating with administrative permissions to the SPIDERMAN computer.</p>

    <img src="/demystify_kerberos_delegation_attacks/13.png"  class="center"  style="border-radius: 8px;"  />


<blockquote>
<p>The LogonID in this screenshot is different from that of the Sacrificial Process previously indicated simply because i have repeated this lab infinite times.</p></blockquote>
<blockquote>
<p>If you encounter an authentication error, try re-running the command by adding the <a href="/posts/demystify_kerberos_delegation_attacks/#5">&ldquo;msdsspn&rdquo; parameter</a> with a value that does not include the domain suffix, changing from &ldquo;SPIDERMAN.MARVEL.local&rdquo; to &ldquo;SPIDERMAN&rdquo;; in both cases it should still work because <a href="/posts/demystify_kerberos_delegation_attacks/#2">both values are present within the &ldquo;msds-allowedtodelegateto&rdquo; property</a>, additionally, ensure that the same domain naming used in &ldquo;msdsspn&rdquo; is applied in the PsExec command (in this case), so if, for example, you request a TGS Ticket to access the SPIDERMAN.MARVEL.local machine, use the same naming to connect via PsExec.</p></blockquote>
<h2 id="abuse-protocol-transition-user---windows"><strong>Abuse Protocol Transition (User) - Windows</strong></h2>
<p>Although Kerberos Delegation is typically applied to a &ldquo;Computer Account&rdquo; type Service Account, it can, (although it&rsquo;s a rare configuration) also be applied to a &ldquo;<a href="https://learn.microsoft.com/en-us/windows/win32/ad/user-object-attributes">User</a>&rdquo; type Service Account (a traditional domain user).</p>
<p>If we identify a &ldquo;<a href="https://learn.microsoft.com/en-us/windows/win32/ad/user-object-attributes">User</a>&rdquo; type Service Account (a traditional domain user) with <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">&ldquo;Constrained Delegation (Use any authentication Protocol)</a>&rdquo; enabled, it is possible to execute the <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-computer---windows">same steps previously seen</a> to abuse this configuration.</p>
<p>In other words, if an attacker compromises a domain user acting as a Service Account and has &ldquo;<a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Constrained Delegation (Use any authentication Protocol)</a>&rdquo; enabled, the attacker, impersonating this Service Account (domain user), could invoke the <a href="/posts/demystify_kerberos_delegation/#100">&ldquo;S4U2Self&rdquo; &amp; &ldquo;S4U2Proxy&rdquo;</a> extensions and thereby obtain a TGS Ticket belonging to ANY domain user and valid to access ANY (<a href="/posts/demystify_kerberos_delegation_attacks/#1">usually</a>) Back-End service for which the Service Account (domain user) has authorization to access on behalf of the Client (as indicated in the &ldquo;<a href="/posts/demystify_kerberos_delegation/#101">msds-allowedtodelegateto</a>&rdquo; flag).</p>
<p><strong>To save both my and your lifetime, instead of re-executing ALL the following steps as previously done, i will report only the essential steps:</strong></p>
<ol>
<li>
<p><strong>Identify which Service Accounts have &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo; enabled (in this scenario, we are looking for a &ldquo;User&rdquo; type object, so a traditional domain user acting as a Service Account).</strong>
<span id=6></p>
<pre tabindex="0"><code>PS C:\&gt; Get-DomainUser --TrustedToAuth
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/14.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see, the &ldquo;User&rdquo; (traditional domain user) delegationuser has the &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo; flag and therefore has Constrained Delegation (Use any authentication Protocol) enabled; specifically, this user (so &ldquo;delegationuser&rdquo;) and therefore ALL services started with it (in this case the &ldquo;delegationuser&rdquo; Service Account has the SPN LDAP/WORKSTATION01 so it will run only the LDAP service on that machine) will be able to authenticate on behalf of the Client exclusively to the SPN &ldquo;HTTP/SPIDERMAN&rdquo;, so, to the HTTP service of the SPIDERMAN machine.</p>
<p>Indeed, inspecting the &ldquo;Delegation&rdquo; tab of the &ldquo;User&rdquo; delegationuser via ADUC, you will find this configuration.</p>
<p>
        <img src="/demystify_kerberos_delegation_attacks/15.png"  class="center"  style="border-radius: 8px;"  />
    

<br>

        <img src="/demystify_kerberos_delegation_attacks/16.png"  class="center"  style="border-radius: 8px;"  />
    
</p>
</li>
<li>
<p><strong>The attacker compromises the Service Account with Constrained Delegation (Use any authentication Protocol) enabled.</strong></p>
<p>In this scenario, the attacker has managed to obtain, for example via Password Spray, the credentials of the &ldquo;delegationuser&rdquo; account, so the Service Account with Constrained Delegation (Use any authentication Protocol) enabled.</p>
</li>
<li>
<p><strong>The attacker obtains a TGS Ticket (of a Domain Admin) valid to authenticate to the CIFS service hosted on the SPIDERMAN machine (that is, the machine authorized in the &ldquo;<a href="/posts/demystify_kerberos_delegation_attacks/#6">msds-allowedtodelegateto&rdquo; flag</a>).</strong></p>
<p>The attacker, now possessing the credentials of the &ldquo;delegateduser&rdquo; Service Account, since it has &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo;, can abuse it to invoke the S4U2Self &amp; S4U2Proxy extensions and thus obtain a TGS Ticket belonging to a Domain Admin user valid to access the HTTP service of the SPIDERMAN machine (<a href="/posts/demystify_kerberos_delegation_attacks/#6">so, the service specified by &ldquo;msds-allowedtodelegateto&rdquo; flag</a>); furthermore, in this scenario, the attacker decides to replace the SPN &ldquo;HTTP/SPIDERMAN&rdquo; with the SPN &ldquo;CIFS/SPIDERMAN&rdquo;, managing in this way to authenticate via PsExec to the SPIDERMAN machine.</p>
<p>Since we will inject the desired TGS Ticket into memory, we first use the socalled Sacrificial Process, then execute the following Rubeus command within the Sacrificial Process.</p>
<pre tabindex="0"><code>C:\&gt; Rubeus.exe s4u /impersonateuser:&lt;User_To_Impersonate&gt; /msdsspn:&lt;SPN_inside_in_msds-allowedtodelegateto&gt; /altservice:&lt;Desidered_SPN&gt; /user:&lt;Service_Account&gt; /rc4:&lt;NTHash_Service_Account&gt; /nowrap /ptt
</code></pre></li>
</ol>
<p>Let’s analyze in summary all the operations performed by Rubeus.</p>
<ol>
<li>
<p><strong>Rubeus sent a &ldquo;KRB_AS_REQ&rdquo; to obtain the TGT of the Service Account (domain user) delegateduser, information necessary to invoke the &ldquo;KRB_TGS_REQ (S4USelf)&rdquo; (it happens regardless of whether the Service Account is a Computer Account or a traditional domain user).</strong></p>

        <img src="/demystify_kerberos_delegation_attacks/17.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>Rubeus now, having the TGT Ticket of the &ldquo;User&rdquo; delegationuser, sends a &ldquo;KRB_TGS_REQ (S4USelf)&rdquo; to obtain a TGS Ticket on behalf of the &ldquo;MARVEL\Administrator&rdquo; user (Domain Admin) valid for the service itself.</strong></p>

        <img src="/demystify_kerberos_delegation_attacks/18.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>Rubeus now that it has the TGS Ticket (belonging to the &ldquo;MARVEL\Administrator&rdquo; user) valid for the service itself, will be able to use it as &ldquo;evidence&rdquo; to invoke the &ldquo;KRB_TGS_REQ (S4UProxy)&rdquo;; in this way the attacker obtains a TGS Ticket (still belonging to the &ldquo;MARVEL\Administrator&rdquo; user) valid for the HTTP service exposed on the SPIDERMAN machine (HTTP/SPIDERMAN), finally, Rubeus will replace the HTTP service with the CIFS service, obtaining a TGS Ticket (still belonging to the &ldquo;MARVEL\Administrator&rdquo; user) valid for the CIFS service exposed on the SPIDERMAN machine.</strong></p>

        <img src="/demystify_kerberos_delegation_attacks/19.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
</ol>
<p>As you can see, following the Rubeus command we will have cached in memory a TGS Ticket belonging to the &ldquo;Administrator&rdquo; user valid for the CIFS service of the SPIDERMAN machine; in fact, when performing a Network Logon with &ldquo;PsExec&rdquo; the OS will retrieve the cached TGS Ticket and use it for authentication; in this way, the attacker has successfully authenticated with administrative privileges to the SPIDERMAN machine.</p>

    <img src="/demystify_kerberos_delegation_attacks/20.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="abuse-protocol-transition-computer---linux"><strong>Abuse Protocol Transition (Computer) - Linux</strong></h2>
<p>In this scenario we will see how to exploit a Constrained Delegation (Use any authentication Protocol) (also called Protocol Transition) from a Linux machine.</p>
<ol>
<li>
<p><strong>Identify which Service Accounts have &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo; enabled (in this scenario we are looking for Computer Accounts acting as Service Accounts)</strong></p>
<p>There are different methods to identify which Service Accounts have &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo;, on Linux one of the most common is using &ldquo;<a href="https://github.com/fortra/impacket/blob/master/examples/findDelegation.py">findDelegation</a>&rdquo;:</p>
<pre tabindex="0"><code>PS C:\&gt; impacket-findDelegation -dc-ip &lt;DC_IP&gt; &lt;domain&gt;&lt;user&gt;:&lt;password&gt;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/88.png"  class="center"  style="border-radius: 8px;"  />
    

<p>This tool will perform an LDAP query to the DC and return as a result ALL the Service Accounts that have been configured with Kerberos Delegation, specifically:</p>
 <span id=101>
<ul>
<li>
<p>AccounType: Indicates if the Service Account in question is a Computer Account or a traditional domain user account</p>
</li>
<li>
<p>DelegationType: Indicates which type of Kerberos Delegation has been configured for that specific Service Account</p>
<ul>
<li>Unconstrained: <a href="/posts/demystify_kerberos_delegation/#unconstrained-delegation">Unconstrained Delegation</a></li>
<li>Constrained: <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation (Kerberos Only)</a></li>
<li>Constrained w/ Protocol Transition: <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Constrained Delegation (Use any authentication Protocol) (also called Protocol Transition)</a></li>
<li>Resource-Based Constrained: <a href="/posts/demystify_kerberos_delegation/#resource-based-constrained-delegation-rbcd">Resource Based Constrained Delegation (RBCD)</a></li>
</ul>
</li>
<li>
<p>DelegationRightsTo: Indicates that the Service Account present in AccountName has permissions to authenticate on behalf of the Client to that system.</p>
<blockquote>
<p>In Unconstrained &amp; Constrained Delegation it reports the value contained in the property &ldquo;msds-allowedtodelegateto&rdquo; of the Service Account contained in the &ldquo;AccountName&rdquo; column.
In RBCD instead it reports the Service Account that has within its ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity property the Service Account contained in the &ldquo;AccountName&rdquo; column.</p></blockquote>
</li>
</ul>
</li>
<li>
<p><strong>The attacker compromises the Service Account with <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Constrained Delegation (Use any authentication Protocol)</a> enabled.</strong></p>
<p>In this scenario the attacker succeeded in authenticating with administrative privileges to the machine THEPUNISHER and, by dumping the LSA Secrets, obtained the credentials of the Computer Account THEPUNISHER$, that is, the Service Account with Constrained Delegation (Use any authentication Protocol) enabled.</p>

        <img src="/demystify_kerberos_delegation_attacks/89.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>The attacker obtains a TGS Ticket (of a Domain Admin) valid to authenticate to the CIFS service hosted on the machine SPIDERMAN (so, to the machine authorized in the &ldquo;msds-allowedtodelegateto&rdquo; flag)</strong></p>
<p>The attacker now that he possesses the credentials of the Service Account THEPUNISHER$, given that this one has &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo;, can impersonate it to invoke the S4U2Self &amp; S4U2Proxy extensions and thus obtain a TGS Ticket belonging to a Domain Admin user valid to access the HTTP service of the machine SPIDERMAN (so, what is specified in the &ldquo;msds-allowedtodelegateto&rdquo; flag), furthermore, in this scenario the attacker decides to replace the SPN &ldquo;HTTP/SPIDERMAN&rdquo; with the SPN &ldquo;CIFS/SPIDERMAN&rdquo; thereby managing to authenticate via PsExec to the machine SPIDERMAN.</p>
<p>To perform this it is possible to use the impacket <a href="https://github.com/fortra/impacket/blob/master/examples/getST.py">getST</a> tool, specifically with the following command:</p>
<pre tabindex="0"><code># impacket-getST -spn &lt;SPN_within_in_msds-allowedtodelegateto&gt; &#39;&lt;domain&gt;/&lt;Service_Account&gt;&#39; -impersonate &lt;User_To_Impersonate&gt; -dc-ip &lt;DC_IP&gt; -hashes &lt;LMHash&gt;:&lt;NTHash&gt; -altservice &lt;SPN_desired&gt;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/90.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Let&rsquo;s <a href="/posts/demystify_kerberos_delegation_attacks/#401">SUMMARILY</a> analyze all the operations performed by getST.</p>
<ol>
<li>
<p>Impacket getST, since it does NOT find a &ldquo;.cache&rdquo; file related to the Service Account&rsquo;s TGT Ticket, sends a &ldquo;KRB_AS_REQ&rdquo; to obtain precisely the TGT Ticket of the Computer Account THEPUNISHER$, information necessary to invoke the &ldquo;KRB_TGS_REQ (S4USelf)&rdquo;</p>

            <img src="/demystify_kerberos_delegation_attacks/91.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
<li>
<p>Impacket getST, now that it has the TGT Ticket of the Computer Account &ldquo;THEPUNISHER$&rdquo;, sends a &ldquo;KRB_TGS_REQ (S4USelf)&rdquo; to obtain a TGS Ticket on behalf of the user &ldquo;MARVEL\Administrator&rdquo; (Domain Admin) valid for the service itself.</p>

            <img src="/demystify_kerberos_delegation_attacks/92.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
<li>
<p>Impacket getST now that it has the TGS Ticket (belonging to the user MARVEL\Administrator&quot;) valid for the service itself, it can use it as &ldquo;evidence&rdquo; to invoke the &ldquo;KRB_TGS_REQ (S4UProxy)&rdquo;, in this way the attacker will obtain a TGS Ticket (still belonging to the user MARVEL\Administrator&quot;) valid for the HTTP service exposed on the machine SPIDERMAN (HTTP/SPIDERMAN).</p>

            <img src="/demystify_kerberos_delegation_attacks/93.png"  class="center"  style="border-radius: 8px;"  />
        

<p>Finally, Impacket getST will modify the SPN field of the received TGS Ticket, replacing the HTTP service with the desired CIFS service, in this way the output TGS Ticket (belonging to the user MARVEL\Administrator&quot;) will have as SPN &ldquo;CIFS/SPIDERMAN&rdquo; and will therefore be valid for the CIFS service exposed on the machine SPIDERMAN, after that getST will export that Kerberos Ticket in the form of a file &ldquo;&lt;user&gt;@&lt;service&gt;_&lt;hostname&gt;@&lt;domain&gt;.ccache&rdquo;; indeed we will have a file called &ldquo;Administrator@<a href="mailto:CIFS_SPIDERMAN@MARVEL.LOCAL.ccache">CIFS_SPIDERMAN@MARVEL.LOCAL.ccache</a>&rdquo;</p>

            <img src="/demystify_kerberos_delegation_attacks/94.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ol>
<blockquote>
<p>If the attacker does NOT wish to replace the service of the TGS Ticket obtained via S4UProxy they will simply NOT insert the &ldquo;altservice&rdquo; parameter, consequently, in this context we will obtain a TGS Ticket (belonging to the user MARVEL\Administrator&quot;) valid for the HTTP service present on the machine SPIDERMAN (<a href="/posts/demystify_kerberos_delegation_attacks/#48">usefull for a potential WinRM Service</a> running and present on the SPIDERMAN machine).</p></blockquote>
</li>
</ol>
<p>Now we could, for example, use the Impacket suite to access the machine SPIDERMAN via <a href="https://github.com/fortra/impacket/blob/master/examples/psexec.py">PsExec</a>; in this example we will use Impacket&rsquo;s &ldquo;psexec&rdquo; (you can also use &ldquo;smbexec.py&rdquo;), therefore you need to set an environment variable named &ldquo;KRB5CCNAME&rdquo; and make it contain the file just created, so the TGS Ticket.</p>
<pre tabindex="0"><code># export KRB5CCNAME=./&lt;user&gt;@&lt;service&gt;_&lt;hostname&gt;@&lt;domain&gt;.ccache
</code></pre>
    <img src="/demystify_kerberos_delegation_attacks/95.png"  class="center"  style="border-radius: 8px;"  />


<p>Then use, for example, Impacket&rsquo;s &ldquo;<a href="https://github.com/fortra/impacket/blob/master/examples/psexec.py">PsExec</a>&rdquo; to perform the authentication, in this way the attacker will manage to authenticate with administrative privileges to the machine SPIDERMAN.</p>
<pre tabindex="0"><code># impacket-psexec -k -no-pass &lt;hostname&gt;
</code></pre>
    <img src="/demystify_kerberos_delegation_attacks/96.png"  class="center"  style="border-radius: 8px;"  />


<blockquote>
<p>In the lab, the LINUX machine is NOT domain-joined, as it simulates an attacker who managed to connect to the network with their own Linux attacking machine, and therefore, even if NOT domain-joined, it still has connectivity to the DC; to bypass this issue, the target hostname resolution must be set in the &ldquo;/etc/hosts&rdquo; file.</p></blockquote>
<h2 id="abuse-protocol-transition---detect--mitigation"><strong>Abuse Protocol Transition - Detect &amp; Mitigation</strong></h2>
<p><strong>Detect</strong></p>
<p>Ask your SIEM / Detection Engineer to create a <a href="https://learn.microsoft.com/en-us/defender-xdr/custom-detection-rules">detection rule</a> ad hoc 😝</p>
<p>Jokes aside, for an high overview i suggest you to start using an Identity Monitoring Solution (e.g. <a href="https://learn.microsoft.com/en-us/defender-for-identity/what-is">Defender for Identity</a>) and only after that to perform a <a href="https://labs.lares.com/fear-kerberos-pt4/#abusingkerberosonly/">deep dive into a custom rule</a>.</p>
<p><strong>Mitigation</strong></p>
<p>Although this type of attack cannot be completely prevented since it exploits how Kerberos Delegation works, there are some mitigations that can help avoid serious impacts following an Abuse Protocol Transition attack; these generally work by applying protection to domain accounts, ensuring that they CANNOT be delegated.</p>
<p>This can be achieved using the following measures:</p>
<ul>
<li>
<p><strong>Configure the property &ldquo;Account is sensitive and cannot be delegated&rdquo; on privileged accounts.</strong></p>

        <img src="/demystify_kerberos_delegation_attacks/117.png"  class="center"  style="border-radius: 8px;"  />
    

<p>This configuration will set the NOT_DELEGATED flag (contained in the &ldquo;<a href="/posts/demystify_kerberos_delegation/#11">UserAccountControl</a>&rdquo; property) of the account to &ldquo;1&rdquo;, and therefore this account CANNOT be delegated.</p>
<p>With the following command, which analyzes this flag, we can verify if it&rsquo;s NOT set to 0 and therefore that this account can no longer be delegated:</p>
<pre tabindex="0"><code>PS C:\&gt; Get-ADUser -Identity &lt;account&gt; -Properties UserAccountControl | Select-Object @{Name=&#39;NOT_DELEGATED&#39;;Expression={($_.UserAccountControl -band 0x100000)}}
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/119.png"  class="center"  style="border-radius: 8px;"  />
    

<blockquote>
<p>This configuration will also work on the account with RID 500, with that i mean the local &ldquo;Administrator&rdquo; account of the DC which has also become a privileged domain account (since among the various groups it is also part of the Domain Admins group).</p></blockquote>
</li>
<li>
<p><strong>Add privileged accounts to the &ldquo;<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn466518%28v=ws.11%29">Protected Users Group</a>&rdquo;</strong></p>

        <img src="/demystify_kerberos_delegation_attacks/118.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Accounts contained within the &ldquo;Protected Users Group&rdquo; will NOT be able to:</p>
<ol>
<li>
<p>Perform NTLM authentication (preventing them from becoming victims of NTLM Hash theft / NTLM Relay)
 </p>
</li>
<li>
<p>Use DES or RC4 encryption types in Kerberos Pre-Authentication (by enforcing only strong encryption types, the AS-REP Roasting attack will be mitigated, since the attacker often performs an encryption downgrade in such a scenario). </p>
</li>
<li>
<p>Be delegated in an Unconstrained Delegation, Constrained Delegation (Kerberos Only), Constrained Delegation (Use any authentication protocol) / Protocol Transition, or Resource-Based Constrained Delegation (RBCD)</p>
</li>
</ol>
<p>If a domain administrator configures all privileged accounts within this group, the attacker will therefore NOT be able to impersonate them in an Abuse Protocol Transition attack.</p>
<blockquote>
<p>If an account is part of the &ldquo;<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn466518%28v=ws.11%29">Protected Users Group</a>,&rdquo; the DC will NOT indirectly assign the NOT_DELEGATED flag on the account property; simply being part of this group will make it impossible to delegate that account. The only <a href="https://sensepost.com/blog/2023/protected-users-you-thought-you-were-safe-uh/">exception</a> is the account with RID 500, which, in order to be protected, must necessarily have the property &ldquo;Account is sensitive and cannot be delegated&rdquo; enabled (which sets the NOT_DELEGATED flag to 1).</p></blockquote>
</li>
</ul>
<h2 id="abuse-protocol-transition-user---linux"><strong>Abuse Protocol Transition (User) - Linux</strong></h2>
<p>Although Kerberos Delegation is generally applied to a Service Account of type &ldquo;Computer Account&rdquo;, in reality, even if rarely, <a href="/posts/demystify_kerberos_delegation/#1001">it can also be applied to a Service Account of type &ldquo;User&rdquo; (traditional domain user account)</a>.</p>
<p>If we identify a Service Account of type &ldquo;User&rdquo; (traditional domain user account) with &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo; enabled, it is possible to perform the same steps <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-computer---linux">previously</a> seen to abuse this configuration.</p>
<p>In other words, if an attacker compromises a domain user that acts as a Service Account and has &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo; enabled, the attacker, impersonating this Service Account (domain user), could invoke the S4U2Self &amp; S4U2Proxy extensions and thus obtain a TGS Ticket belonging to ANY domain user and valid to access ANY (<a href="/posts/demystify_kerberos_delegation_attacks/#1">usually</a>) back-end service that the Service Account (domain user) is authorized to access on behalf of the Client (indicated in the &ldquo;msds-allowedtodelegateto&rdquo; flag).</p>
<p>We therefore <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-computer---linux">re-execute the same steps previously seen</a>:</p>
<ol>
<li>
<p><strong>Identify which Service Accounts have &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo; enabled (in this scenario we are looking for an object of type &ldquo;User&rdquo;, so a traditional domain user, acting as a Service Account)</strong></p>
<p>There are different methods to identify which Service Accounts have &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo;, on Linux one of the most common is using &ldquo;<a href="https://github.com/fortra/impacket/blob/master/examples/findDelegation.py">findDelegation</a>&rdquo;:</p>
<pre tabindex="0"><code>PS C:&gt; impacket-findDelegation -dc-ip &lt;DC_IP&gt; &lt;domain&gt;&lt;user&gt;:&lt;password&gt;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/97.png"  class="center"  style="border-radius: 8px;"  />
    

<p><a href="/posts/demystify_kerberos_delegation_attacks/#101">In summary</a>, in our example, analyzing the output we identify that the traditional domain user &ldquo;delegatiouser&rdquo; has Protocol Transition enabled, specifically ALL services started with it (in this case the Service Account &ldquo;User&rdquo; has the SPN LDAP/WORKSTATION01 and therefore will run the LDAP service on that machine; the fact that this machine does NOT exist in my lab is irrelevant for the purpose of the exploitation) will be able to authenticate on behalf of the Client exclusively towards the SPN &ldquo;HTTP/SPIDERMAN&rdquo; &amp; &ldquo;HTTP/SPIDERMAN.MARVEL.local&rdquo;, so to the HTTP service of the machine SPIDERMAN.</p>
</li>
<li>
<p><strong>The attacker compromises the Service Account with Constrained Delegation (Use any authentication Protocol) enabled.</strong></p>
<p>In this scenario the attacker managed to retrieve, for example via Password Spray, the credentials of the user &ldquo;delegationuser&rdquo;, so the Service Account with Constrained Delegation (Use any authentication Protocol) enabled.</p>
</li>
<li>
<p><strong>The attacker obtains a TGS Ticket (of a Domain Admin) valid to authenticate to the CIFS service hosted on the machine SPIDERMAN (so, to the machine authorized in the &ldquo;msds-allowedtodelegateto&rdquo; flag)</strong></p>
<p>The attacker now, having the credentials of the Service Account &ldquo;delegateuser&rdquo;, given that this one has &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo;, can impersonate it to invoke the S4U2Self &amp; S4U2Proxy extensions and thus obtain a TGS Ticket belonging to a Domain Admin user valid to access the HTTP service of the machine SPIDERMAN (so, what is specified in the &ldquo;msds-allowedtodelegateto&rdquo; flag); furthermore, in this scenario the attacker decides to replace the SPN &ldquo;HTTP/SPIDERMAN&rdquo; with the SPN &ldquo;CIFS/SPIDERMAN&rdquo;, thereby managing to authenticate via PsExec to the machine SPIDERMAN.</p>
<p>To perform this it is possible to use the impacket <a href="https://github.com/fortra/impacket/blob/master/examples/getST.py">getST</a> tool, specifically with the following command:</p>
<pre tabindex="0"><code># impacket-getST -spn &lt;SPN_contenuto_in_msds-allowedtodelegateto&gt; &#39;&lt;domain&gt;/&lt;Service_Account&gt;&#39; -impersonate &lt;User_To_Impersonate&gt; -dc-ip &lt;DC_IP&gt; -hashes &lt;LMHash&gt;:&lt;NTHash&gt; -altservice &lt;SPN_desiderato&gt;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/98.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Let&rsquo;s <a href="/posts/demystify_kerberos_delegation_attacks/#401">SUMMARILY</a> analyze all the operations performed by getST.</p>
<ol>
<li>
<p>Impacket getST, since it does NOT find a &ldquo;.cache&rdquo; file related to the Service Account&rsquo;s TGT Ticket, sends a &ldquo;KRB_AS_REQ&rdquo; to obtain precisely the TGT Ticket of the traditional domain user &ldquo;delegationuser&rdquo;, information necessary to invoke the &ldquo;KRB_TGS_REQ (S4USelf)&rdquo; (The Service Account&rsquo;s TGT Ticket is necessary to invoke the &ldquo;KRB_TGS_REQ (S4USelf)&rdquo;, this is independent of whether the Service Account is a Computer Account or a traditional domain user).</p>

            <img src="/demystify_kerberos_delegation_attacks/99.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
<li>
<p>Impacket getST, now that it has the TGT Ticket of the &ldquo;User&rdquo; &ldquo;delegationuser&rdquo;, sends a &ldquo;KRB_TGS_REQ (S4USelf)&rdquo; to obtain a TGS Ticket on behalf of the user &ldquo;MARVEL\Administrator&rdquo; (Domain Admin) valid for the service itself.</p>

            <img src="/demystify_kerberos_delegation_attacks/100.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
<li>
<p>Impacket getST, now that it has the TGS Ticket (belonging to the user MARVEL\Administrator&quot;) valid for the service itself, can use it as &ldquo;evidence&rdquo; to invoke the &ldquo;KRB_TGS_REQ (S4UProxy)&rdquo;, in this way the attacker will obtain a TGS Ticket (still belonging to the user MARVEL\Administrator&quot;) valid for the HTTP service exposed on the machine SPIDERMAN (HTTP/SPIDERMAN).</p>

            <img src="/demystify_kerberos_delegation_attacks/101.png"  class="center"  style="border-radius: 8px;"  />
        

<p>Finally, Impacket getST will modify the SPN field of the received TGS Ticket, replacing the HTTP service with the desired CIFS service, in this way the output TGS Ticket (belonging to the user MARVEL\Administrator&quot;) will have as SPN &ldquo;CIFS/SPIDERMAN&rdquo; and will therefore be valid for the CIFS service exposed on the machine SPIDERMAN; after that, getST will export this Kerberos Ticket in the form of a file &ldquo;&lt;user&gt;@&lt;service&gt;_&lt;hostname&gt;@&lt;domain&gt;.ccache&rdquo;; indeed, we will have a file called &ldquo;Administrator@<a href="mailto:CIFS_SPIDERMAN@MARVEL.LOCAL.ccache">CIFS_SPIDERMAN@MARVEL.LOCAL.ccache</a>&rdquo;.</p>

            <img src="/demystify_kerberos_delegation_attacks/102.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ol>
<blockquote>
<p>If the attacker does NOT wish to replace the service of the TGS Ticket obtained via S4UProxy, they will simply NOT include the &ldquo;altservice&rdquo; parameter; consequently, in this context we will obtain a TGS Ticket (belonging to the user MARVEL\Administrator&quot;) valid for the HTTP service present on the machine SPIDERMAN (<a href="/posts/demystify_kerberos_delegation_attacks/#48">usefull for a potential WinRM Service</a> running and present on the SPIDERMAN machine).</p></blockquote>
</li>
</ol>
<p>Now we could, for example, use the Impacket suite to access the machine SPIDERMAN via PsExec; in this example we will use Impacket&rsquo;s &ldquo;psexec&rdquo; (you can also use &ldquo;smbexec.py&rdquo;), therefore you need to set an environment variable named &ldquo;KRB5CCNAME&rdquo; and make it contain the file just created, so the TGS Ticket.</p>
<pre tabindex="0"><code># export KRB5CCNAME=./&lt;user&gt;@&lt;service&gt;_&lt;hostname&gt;@&lt;domain&gt;.ccache
</code></pre>
    <img src="/demystify_kerberos_delegation_attacks/103.png"  class="center"  style="border-radius: 8px;"  />


<p>Then use, for example, Impacket&rsquo;s &ldquo;psexec&rdquo; to perform the authentication; in this way the attacker will manage to authenticate with administrative privileges to the machine SPIDERMAN.</p>
<pre tabindex="0"><code># impacket-psexec -k -no-pass &lt;hostname&gt;
</code></pre>
    <img src="/demystify_kerberos_delegation_attacks/104.png"  class="center"  style="border-radius: 8px;"  />


<blockquote>
<p>In the lab, the LINUX machine is NOT domain-joined, as it simulates an attacker who managed to connect to the network with their own Linux attacking machine, and therefore, even if NOT domain-joined, it still has connectivity to the DC; to bypass this issue, the target hostname resolution must be set in the &ldquo;/etc/hosts&rdquo; file.</p></blockquote>
<h2 id="abuse-rbcd-via-dacl"><strong>Abuse RBCD via DACL</strong></h2>
<p>Several techniques exist to exploit RBCD, below we will analyze by far the most common.</p>
<p>Since the trigger of a &ldquo;Resource Based Constrained Delegation (RBCD)&rdquo; is based on &ldquo;<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-msds-allowedtoactonbehalfofotheridentity?ref=labs.lares.com">ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity</a>&rdquo;, which is nothing more than a property of a &ldquo;Secureable Objects&rdquo;, <a href="/posts/demystify_kerberos_delegation/#123">if the attacker has write permissions on this property (e.g: GenericalAll, GenericWrite and so on)</a>, they could exploit a DACL Misconfiguration to configure an RBCD on an arbitrary target and potentially compromise it.</p>
<blockquote>
<p>In summary, Active Directory contains <a href="https://www.windows-active-directory.com/active-directory-objects-list.html">entities called &ldquo;Objects&rdquo;</a> (Computers, Users, OUs, GPOs, Files, etc.) which for the vast majority are &ldquo;Secureable Objects&rdquo;.</p>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/secauthz/securable-objects">Secureable Objects</a> are resources protected through Access Control and each &ldquo;Secureable Object&rdquo; has a Security Descriptor containing a <a href="https://learn.microsoft.com/en-us/windows/win32/secauthz/access-control-lists">DACL (Discretionary Access Control List) and a SACL (System Access Control list (SACL)</a>:</p>
<ul>
<li>The DACL (it contain a series of ACE - Access Control Entries) manages who can do what.</li>
<li>The SACL (it contain a series of ACE - Access Control Entries) logs audit events.</li>
</ul>
<p>When a &ldquo;Secureable Object&rdquo; performs an action within Active Directory toward another &ldquo;Secureable Object&rdquo; , the Domain Controller (that manages the AD) inspects the DACL to determine permissions and, consequently, if the action is allowed.</p>
<p>So a &ldquo;<a href="https://labs.lares.com/securing-active-directory-via-acls/">DACL Misconfiguration</a>&rdquo; is simply a DACL containing ACLs that grant excessive permissions which could allows potential attacks, like in this case 😉​</p></blockquote>
<p>An attacker in order to abuse RBCD via DACL requires 2 mandatory elements:</p>
<ol>
<li>
<p>The attacker (impersonating a &ldquo;Computer Account&rdquo; or a &ldquo;Domain User&rdquo;) must have write permissions available (WriteProperty, Generic Write, Generic All, Write DACL, Write Owner, Own) on the attribute &ldquo;<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-msds-allowedtoactonbehalfofotheridentity">ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity</a>&rdquo; of an:</p>
<ul>
<li>
<p>Object of type &ldquo;Computer&rdquo; (so the related Computer Account)</p>
</li>
<li>
<p>Object type &ldquo;Users&rdquo; (a traditional &ldquo;Domain User&rdquo; - <a href="/posts/demystify_kerberos_delegation/#130">must have an SPN set</a>)</p>
</li>
</ul>
<p>In this way the attacker is able to configure an RBCD with an arbitrary value within the target&rsquo;s attribute.</p>
</li>
</ol>
<blockquote>
<p>In my lab and i was not able to successfully compromise a &ldquo;Users&rdquo; Object.</p></blockquote>
<ol start="2">
<li>
<p>The attacker needs to control an account that is capable of invoking the &ldquo;S4USelf&rdquo; and &ldquo;S4UProxy&rdquo; extensions in order to exploit the previously configured RBCD, this can be done with a:</p>
<ul>
<li>
<p>&ldquo;Computer Account&rdquo;: Any &ldquo;Computer Account&rdquo; is able to arbitrary invoke the &ldquo;S4USelf&rdquo; and &ldquo;S4UProxy&rdquo;.
<span id=7></p>
</li>
<li>
<p>&ldquo;Domain user&rdquo;: Any &ldquo;User&rdquo; with a SPN setted is able to arbitrary invoke the &ldquo;S4USelf&rdquo; and &ldquo;S4UProxy (unless the &ldquo;SPN-less&rdquo; technique is used <a href="https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html">1</a> - <a href="https://medium.com/@offsecdeer/a-practical-guide-to-rbcd-exploitation-a3f1a47267d5">2</a> BUT using this technique the &ldquo;Domain User&rdquo; used will become unavailable, so it&rsquo;s better to avoid this attack)</p>
</li>
</ul>
</li>
</ol>
<p>If both conditions are satisfied, <strong>an attacker could arbitrarily configure a malicious RBCD on the target, this action would allow the attacker access to ANY to service executed by the service account for which the RBCD was configured impersonating ANY domain user.</strong></p>
<span id=9>
<p><strong>The following scenario covers the most common case where an attacker is able to satisfy the condition previusly indicated:</strong></p>
<ol>
<li><strong>The attacker impersonating a &ldquo;Domain User&rdquo; has write permissions on the &ldquo;ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity&rdquo; attribute of an object of Computer type (so on the related Computer Account)</strong>; in this way the attacker is able to configure on it an RBCD with an arbitrary value within the target attribute.</li>
</ol>
<blockquote>
<p><strong>The attack can be carried out regardless of whether the target &ldquo;Computer&rdquo; object already has Unconstrained / Constrained Delegation enabled</strong>, <a href="/posts/demystify_kerberos_delegation_attacks/#20">because</a> the KDC, after the checks performed on the Computer Account created by the attacker (which simulates the AP Front End service), will switch in any case to RBCD and therefore issue a TGS Ticket valid to authenticate to the service hosted on the target &ldquo;Computer&rdquo; object.</p></blockquote>
<span id=51>
<ol start="2">
<li>
<p><strong>An attacker usually uses a &ldquo;Computer Account&rdquo; to invoke the &ldquo;S4USelf&rdquo; and &ldquo;S4UProxy&rdquo; extensions to exploit the previously configured RBCD</strong>; it happens because every existing Computer Account has by default an SPN configured and thus it can arbitray invoke the &ldquo;S4USelf&rdquo; and &ldquo;S4UProxy&rdquo; kerberos extension (<a href="/posts/demystify_kerberos_delegation_attacks/#7">it&rsquo;s more uncommon the scenario that applies to a &ldquo;Domain User&rdquo;</a>)</p>
<p>An attacker in order to compromise a &ldquo;Computer Account&rdquo; could:</p>
<ul>
<li>Compromise a Computer and retrieve its related Computer Account</li>
<li><a href="https://www.fortalicesolutions.com/posts/hunting-resource-based-constrained-delegation-in-active-directory">NTLM Relay Attacks</a>
<span id=10></li>
<li>Create an arbitrary Computer Account.</li>
</ul>
</li>
</ol>
<blockquote>
<p>The domain object itself has an attribute named &ldquo;<a href="https://www.netspi.com/blog/technical-blog/network-penetration-testing/machineaccountquota-is-useful-sometimes/">MS-DS-Machine-Account-Quota</a>&rdquo; that governs how many Computer Accounts a non-privileged user (usually a Computer Account &amp; a traditional domain user) can create within the domain; by default this value is 10.</p>
<p>If the value of this attribute is &gt;=1 an attacker could create an arbitrary Computer Account and use it to carry out the attack.</p></blockquote>
<h2 id="abuse-rbcd-via-dacl-computer---windows"><strong>Abuse RBCD via DACL (Computer) - Windows</strong></h2>
<p>In this scenario we will see how to perform an RBDC Abuse via DACL, <a href="/posts/demystify_kerberos_delegation_attacks/#9">in the most common scenario</a>, from a Windows machine.</p>
<ol>
<li>
<p><strong>The attacker verifies which user accounts have write permission on the attribute &ldquo;ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity&rdquo; of a Computer object.</strong></p>
<p>To do this the attacker can use &ldquo;BloodHound&rdquo; or perform queries using &ldquo;PowerView&rdquo;:</p>
<ul>
<li>
<p>BloodHound</p>
<p>Below we can verify with BloodHound that the domain user &ldquo;MARVEL\UserA&rdquo; HAS write permissions, in this case GenericAll, on the Computer object &ldquo;SPIDERMAN&rdquo;, consequently will be able to configure RBDC on it.</p>

            <img src="/demystify_kerberos_delegation_attacks/21.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
<li>
<p>PowerView</p>
<p>Below we can verify with PowerView that the domain user &ldquo;MARVEL\UserA&rdquo; HAS write permissions on the Computer object &ldquo;SPIDERMAN&rdquo;, consequently will be able to configure RBDC on it:</p>
<pre tabindex="0"><code>PS C:\&gt;
$computers = Get-DomainComputer
$users = Get-DomainUser
$accessRights = &#34;GenericWrite&#34;,&#34;GenericAll&#34;,&#34;WriteProperty&#34;,&#34;WriteDacl&#34;
foreach ($computer in $computers) {
    $acl = Get-ObjectAcl -SamAccountName $computer.SamAccountName -ResolveGUIDs

    foreach ($user in $users) {
                $hasAccess = $acl | ?{$_.SecurityIdentifier -eq $user.ObjectSID} | %{($_.ActiveDirectoryRights -match ($accessRights -join &#39;|&#39;))}

                if ($hasAccess) {
                    Write-Output &#34;$($user.SamAccountName) has the required access rights on $($computer.Name)&#34;
                }
    }
}
</code></pre>
            <img src="/demystify_kerberos_delegation_attacks/22.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ul>
<p>Indeed, via ADUC we can see how there is actually an ACE on the DACL of the SPIDERMAN object that grants the Trustee MARVEL\UserA the &ldquo;GenericWrite&rdquo; permission.</p>

        <img src="/demystify_kerberos_delegation_attacks/23.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>The attacker compromises the domain account MARVEL\UserA that has the required write permissions on the SPIDERMAN machine</strong></p>
<p>In this scenario the attacker managed to recover, for example via Password Spray, the credentials of the account &ldquo;MARVEL\UserA&rdquo;, so the domain account that has the required write permissions on the SPIDERMAN machine.
<span id=12></p>
</li>
<li>
<p><strong>The attacker creates a &ldquo;Computer Account&rdquo; inside the domain.</strong></p>
<p>The attacker needs to control an account with a configured SPN, in this way it can be used to invoke the S4U extensions and exploit the RBCD that we will configure later.</p>
<p>Since Computer Accounts have an SPN configured by default, the attacker will tend to compromise one and in order to do that most common way is to exploit a feature present by default in every domain.</p>
<p><a href="/posts/demystify_kerberos_delegation_attacks/#10">As already said</a>, the domain object itself has an attribute named &ldquo;MS-DS-Machine-Account-Quota&rdquo; that regulates how many Computer Accounts a non-privileged user (usually a Computer Account &amp; a traditional domain user) is able to create inside the domain; by default this value is equal to 10; consequently if this value is &gt;=1 the attacker could create an arbitrary &ldquo;Computer Account&rdquo;.</p>
<p>Below is the <a href="https://www.jorgebernhardt.com/how-to-change-attribute-ms-ds-machineaccountquota/">command</a> that checks the value present in the &ldquo;MS-DS-Machine-Account-Quota&rdquo; attribute:</p>
<pre tabindex="0"><code>PS C:\&gt; Get-ADObject `
-Identity ((Get-ADDomain).distinguishedname) `
-Properties ms-DS-MachineAccountQuota
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/24.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Since the value is &gt;=1 we can create an arbitrary &ldquo;Computer Account&rdquo;, in a Windows context we can use the &ldquo;<a href="https://github.com/Kevin-Robertson/Powermad">PowerMad</a>&rdquo; tool, specifically running the following command:</p>
<pre tabindex="0"><code>PS C:\&gt; New-MachineAccount -MachineAccount &lt;ComputerAccount_Name&gt; -Password $(ConvertTo-SecureString &#34;&lt;ComputerAccount_Password&gt;&#34; -AsPlainText -Force)
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/25.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see following the command a new arbitrary Computer Account has been created.</p>
<p>Creating a &ldquo;Computer Account&rdquo; is equivalent to creating a &ldquo;Computer&rdquo; object inside the domain, in fact inspecting the objects via ADUC we will find the &ldquo;Computer&rdquo; object named &ldquo;FakeComputerAccount&rdquo; (which will contain inside it the related Computer Account &ldquo;FakeComputerAccount$&rdquo;)
<span id=11></p>

        <img src="/demystify_kerberos_delegation_attacks/26.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
</ol>
<span id=15>
<ol start="4">
<li>
<p><strong>The attacker, using the account &ldquo;MARVEL\UserA&rdquo;, populates the attribute &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; of the machine SPIDERMAN with the value of the Computer Account &ldquo;FakeComputerAccount&rdquo; previously created, in this way the attacker has forced a malicious RBCD configuration on the machine SPIDERMAN.</strong></p>
<p>To do this the attacker can use the following commands (they require PowerView):</p>
<ul>
<li>
<p>Retrieve the SID of the previously created Computer Account</p>
<pre tabindex="0"><code>PS C:\&gt; $ComputerSid = Get-DomainComputer &lt;Created_Computer_Account&gt; -Properties objectsid | Select -Expand objectsid 
</code></pre></li>
</ul>
<blockquote>
<p>It is necessary to specify the Computer and not the Computer Account to avoid an error, in other word you must write for example &ldquo;FakeComputerAccount&rdquo; but not &ldquo;FakeComputerAccount$&rdquo;</p></blockquote>
<ul>
<li>
<p>Create the value that will be inserted into the parameter &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo;, specifically the <a href="https://learn.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-definition-language">SDDL</a> syntax in raw binary format will be used</p>
<pre tabindex="0"><code>PS C:\Tools&gt; $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList &#34;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))&#34; 
PS C:\Tools&gt; $SDBytes = New-Object byte[] ($SD.BinaryLength) 
PS C:\Tools&gt; $SD.GetBinaryForm($SDBytes, 0) 
</code></pre></li>
<li>
<p>Using PowerView the attacker modifies the attribute &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; of the machine SPIDERMAN with the value of the Computer Account &ldquo;FakeComputerAccount$&rdquo; previously created, which is represented by the value built previously; this modification action will be performed impersonating the credentials entered in that command.</p>
<pre tabindex="0"><code>PS C:\Tools&gt; $credentials = New-Object System.Management.Automation.PSCredential &#34;&lt;domain&gt;\&lt;user_with_write_permission&gt;&#34;, (ConvertTo-SecureString &#34;&lt;user_with_write_permission_password&gt;&#34; -AsPlainText -Force) 
PS C:\Tools&gt; Get-DomainComputer &lt;target_computer&gt; | Set-DomainObject -Set @{&#39;msds-allowedtoactonbehalfofotheridentity&#39;=$SDBytes} -Credential $credentials -Verbose
</code></pre></li>
</ul>
<p>Below is the execution of all the commands just described:</p>

        <img src="/demystify_kerberos_delegation_attacks/27.png"  class="center"  style="border-radius: 8px;"  />
    

<p>With these commands the attacker, impersonating the account &ldquo;MARVEL\UserA&rdquo;, populates the attribute &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; of the machine SPIDERMAN with the value of the Computer Account &ldquo;FakeComputerAccount$&rdquo; previously created (or rather in its representation with the correct syntax <a href="https://learn.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-definition-language">SDDL</a>), in this way the attacker forced a malicious RBCD configuration on the machine SPIDERMAN.</p>
<p>Indeed, if we now inspect the attribute &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; of the machine SPIDERMAN we can see that:</p>
<ul>
<li>
<p>Via ADUC it is noticeable that there is indeed a value with a dedicated syntax (which actually represents the Computer Account &ldquo;FakeComputerAccount$&rdquo;).</p>

            <img src="/demystify_kerberos_delegation_attacks/28.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ul>
 <span id=18>
<ul>
<li>
<p>Via &ldquo;Get-ADComputer&rdquo; (requires RSAT) it is noticeable that the value &ldquo;MARVEL\FakeComputerAccount$&rdquo; is indeed present.</p>
<p>
            <img src="/demystify_kerberos_delegation_attacks/29.png"  class="center"  style="border-radius: 8px;"  />
        

<span id=1002></p>
</li>
</ul>
</li>
<li>
<p><strong>The attacker obtains a TGS Ticket (of Domain Admin) valid to authenticate to the CIFS service hosted on the machine SPIDERMAN.</strong></p>
<p>The attacker, now that they have configured a malicious RBCD, so they have populated the &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; attribute of the SPIDERMAN machine with the value of the Computer Account &ldquo;FakeComputerAccount$&rdquo;, can impersonate this account to invoke the <a href="/posts/demystify_kerberos_delegation/#100">&ldquo;S4U2Self&rdquo; &amp; &ldquo;S4U2Proxy&rdquo;</a> extensions (having at least 1 SPN configured allows them to do so) and thus obtain a TGS Ticket belonging to a Domain Admin user valid to access ANY service hosted on the SPIDERMAN machine (or rather any service running under the SPIDERMAN$ Service Account, <a href="/posts/not_so_brief_overview_about_kerberos/#17">so, all services started with the Local Service account such as by default the CIFS service</a>).</p>
<p>Since performing this action requires knowing the <a href="/posts/not_so_brief_overview_about_kerberos/#178">RC4 Key (NT Hash)</a> or other types of secrets of the Computer Account &ldquo;FakeComputerAccount$&rdquo;, we can generate them by giving Rubeus the corresponding plaintext password with the following command:</p>
<pre tabindex="0"><code>PS C:\Tools&gt; .\Rubeus.exe hash /password:&lt;ComputerAccount_Created_Password&gt; /user:&lt;ComputerAccount_Created&gt; /domain:&lt;domain&gt;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/30.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Since we will inject the desired TGS Ticket into memory, first we use the so-called Sacrificial Process.</p>
<pre tabindex="0"><code>C:&gt; Rubeus.exe createnetonly /program:&#34;C:\Windows\System32\cmd.exe&#34; /show
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/31.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Then execute the following Rubeus command inside the Sacrificial Process.</p>
 <spain id=24>
<pre tabindex="0"><code>C:\&gt; .\Rubeus.exe s4u /user:&lt;Created_Computer_Account&gt; /rc4:&lt;Created_Computer_Account_RC4Key&gt; /impersonateuser:&lt;User_To_Impersonate&gt; /msdsspn:&lt;Desired_SPN&gt; /nowrap /ptt
</code></pre> <span id=14>
<blockquote>
<p>Unlike the <a href="/posts/demystify_kerberos_delegation_attacks/#5">Abuse Protocol Transition context where the &ldquo;/msdsspn&rdquo; parameter</a> was populated exclusively with the SPN present in the &ldquo;msds-allowedtodelegateto&rdquo; property, in the RBDC Abuse via DACL context it should be populated with an arbitrary SPN chosen by the attacker; in this way, the (<a href="/posts/demystify_kerberos_delegation/#118">S4UProxy</a> will specify this chosen SPN and since the KDC will use the RBCD, it will return in the corresponding S4UProxy Response the TGS Ticket valid for the requested arbitrary service.</p></blockquote>
<p><strong><a href="/posts/demystify_kerberos_delegation/#behaviour-change-about-kerberos-delegation-on-modern-windows-system">As already mentioned</a>, Microsoft POST 2021 slightly modified the traditional RBCD flow; since our lab consists of a Windows Server 2022 acting as DC, the flow that will be analyzed will cover this modern case; that said, i&rsquo;ll  highlight the logic of how the attack would have worked ALSO BEFORE 2021:</strong></p>
 <span id=1003>
<ol>
<li>
<p><strong>Rubeus sent a &ldquo;<a href="/posts/not_so_brief_overview_about_kerberos/#39">KRB_AS_REQ</a>&rdquo; to obtain the TGT Ticket of the Computer Account FakeComputerAccount$, <a href="/posts/demystify_kerberos_delegation/#231">information necessary</a> to invoke the &ldquo;KRB_TGS_REQ (S4USelf)&rdquo;</strong></p>
<p>
            <img src="/demystify_kerberos_delegation_attacks/32.png"  class="center"  style="border-radius: 8px;"  />
        

<br>

            <img src="/demystify_kerberos_delegation_attacks/33.png"  class="center"  style="border-radius: 8px;"  />
        
</p>
</li>
</ol>
 <span id=34>
<ol start="2">
<li>
<p><strong>Rubeus, now that it has the TGT Ticket of the Computer Account &ldquo;FakeComputer$&rdquo;, sends a &ldquo;KRB_TGS_REQ <a href="/posts/demystify_kerberos_delegation/#2-krb_tgs_req-s4u2self--s4uself-request">(S4U2Self)</a>&rdquo; to obtain a TGS Ticket on behalf of the user &ldquo;MARVEL\Administrator&rdquo; (Domain Admin) valid for the same service.</strong></p>

            <img src="/demystify_kerberos_delegation_attacks/34.png"  class="center"  style="border-radius: 8px;"  />
        

 <span id=31>
<p>As we can note Rubeus sends a &ldquo;KRB_TGS_REQ <a href="/posts/demystify_kerberos_delegation/#2-krb_tgs_req-s4u2self--s4uself-request">(S4U2Self)</a>&rdquo;; analyzing the content of the packet one can observed that: 1) <a href="/posts/demystify_kerberos_delegation/#245">Inside the &ldquo;PA-FOR-USER&rdquo;</a> data structure the request for the TGS Ticket on behalf of the user &ldquo;MARVEL\Administrator&rdquo; (it&rsquo;s a Domain Admin) is indeed present; 2) the <a href="/posts/demystify_kerberos_delegation_attacks/#11">Computer Account FakeComputerAccount$</a> <a href="/posts/demystify_kerberos_delegation/#31">is explicitly indicated</a>), in this way the issued TGS Ticket will be valid for all services started by this Service Account.</p>

            <img src="/demystify_kerberos_delegation_attacks/35.png"  class="center"  style="border-radius: 8px;"  />
        

 <span id=13>
<p><a href="/posts/demystify_kerberos_delegation/#71">As we already told</a>, the KDC will issue a TGS Ticket with the FORWARDABLE flag set to 0 exclusively if the Service Account &ldquo;FakeComputerAccount$&rdquo; is configured with Constrained Delegation (Kerberos Only) (so: TrustedToAuthForDelegation flag NOT set &amp; with the &ldquo;msDS-AllowedToDelegateTo&rdquo; property NOT empty - there must be entries); <a href="/posts/demystify_kerberos_delegation_attacks/#12">since the FakeComputerAccount$ user instead has NO type of Kerberos Delegation</a>, the Computer Account &ldquo;FakeComputerAccount$&rdquo; will NOT have the &ldquo;msDS-AllowedToDelegateTo&rdquo; flag and consequently the requested TGS Ticket (belonging to the user &ldquo;MARVEL\Administrator&rdquo; &amp; valid for all services started by this Service Account) will be issued with the FORWARDABLE flag set to 1.</p>

            <img src="/demystify_kerberos_delegation_attacks/36.png"  class="center"  style="border-radius: 8px;"  />
        

 <span id=17>
<blockquote>
<p><strong>BEFORE 2021:</strong></p>
<p>As we already told (<a href="/posts/demystify_kerberos_delegation/#behaviour-change-about-kerberos-delegation-on-modern-windows-system">1</a>, <a href="/posts/demystify_kerberos_delegation/#50">2</a>), in BEFORE 2021 scenario the KDC will still issues the requested TGS Ticket BUT it will NOT have the FORWARDABLE flag set to 1; instead, it is 0.</p></blockquote>
</li>
</ol>
 <span id=16>
<ol start="3">
<li>
<p><strong>Rubeus now that it has the TGS Ticket (belonging to the user MARVEL\Administrator&rdquo;) valid for the service itself, will be able to use it as &ldquo;evidence&rdquo; to invoke the &ldquo;KRB_TGS_REQ (S4UProxy)&rdquo;, in this way the attacker will obtain a TGS Ticket (still belonging to the user MARVEL\Administrator&quot;) valid for the CIFS service exposed on the SPIDERMAN machine (CIFS/SPIDERMAN)</strong></p>

            <img src="/demystify_kerberos_delegation_attacks/37.png"  class="center"  style="border-radius: 8px;"  />
        

<p>As we can note Rubeus sends a &ldquo;KRB_TGS_REQ (<a href="/posts/demystify_kerberos_delegation/#118">S4UProxy</a>), analyzing the content of the packet it can be observed that: 1) Inside the &ldquo;Additional Ticket&rdquo; field the <a href="/posts/demystify_kerberos_delegation_attacks/#13">TGS Ticket previously received in the &ldquo;S4USelf Response</a>&rdquo; is sent 2) <a href="/posts/demystify_kerberos_delegation_attacks/#23">the SPN chosen by the attacker on the Rubeus command is indicated</a>;</p>
<blockquote>
<p>In order to obtain a valid TGS Ticket the SPN provided must belong to a service that will be executed by the Computer Account &ldquo;SPIDERMAN$&rdquo; (<a href="/posts/not_so_brief_overview_about_kerberos/#17">so, all services started with the Local Service account such as by default the CIFS service</a>), in this case the SPN &ldquo;CIFS/SPIDERMAN.MARVEL.local&rdquo; is present.</p></blockquote>
 <span id=19>

            <img src="/demystify_kerberos_delegation_attacks/38.png"  class="center"  style="border-radius: 8px;"  />
        

 <span id=20>
<p>The KDC <a href="/posts/demystify_kerberos_delegation/#199">verifies</a> if the TGS Ticket received inside the &ldquo;additional-tickets&rdquo; field (besides being valid) has the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo; (<a href="/posts/demystify_kerberos_delegation_attacks/#13">positive outcome</a>) &amp; that inside the Service Account FakeComputerAccount$&rsquo;s &ldquo;<a href="/posts/demystify_kerberos_delegation/#101">msds-allowedtodelegateto</a>&rdquo; property the requested service is present, <a href="/posts/demystify_kerberos_delegation_attacks/#15">so in this case &ldquo;CIFS/SPIDERMAN&rdquo;</a> (outcome negative), <a href="/posts/demystify_kerberos_delegation/#65">since this second check fails</a> (<a href="/posts/demystify_kerberos_delegation_attacks/#12">because that property is NOT present at all</a>) and <a href="/posts/demystify_kerberos_delegation/#61">the packet has the RBDC flag</a> set to use that Kerberos Delegation in case of FallBack, the KDC resorts to Resource Based Constrained Delegation (RBCD).</p>
<blockquote>
<p><strong>BEFORE 2021</strong></p>
<p><a href="/posts/demystify_kerberos_delegation/#90">As already told</a>: In BEFORE 2021 scenario the KDC checks if the TGS Ticket received inside the &ldquo;additional-tickets&rdquo; field (besides being valid) has the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo; (<a href="/posts/demystify_kerberos_delegation_attacks/#17">outcome negative</a>) &amp; that inside the Service Account FakeComputerAccount$&rsquo;s &ldquo;msds-allowedtodelegateto&rdquo; property the requested service is present, so in this case <a href="/posts/demystify_kerberos_delegation_attacks/#15">&ldquo;CIFS/SPIDERMAN&rdquo;</a> (outcome negative); since the first check <a href="/posts/demystify_kerberos_delegation_attacks/#17">already fails</a> <a href="/posts/demystify_kerberos_delegation/#61">and the packet has the RBDC flag</a> set to use that Kerberos Delegation in case of FallBack, the KDC resorts anyway to the <a href="/posts/demystify_kerberos_delegation/#resource-based-constrained-delegation-rbcd">Resource Based Constrained Delegation (RBCD)</a>.</p></blockquote>
<p>Consequently, the KDC retrieves the Service Account (SPIDERMAN$) of the requested service (CIFS) and verifies if it has the &ldquo;ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity&rdquo; flag containing the Service Account (FakeComputerAccount$) of the service that is attempting authentication on behalf of the Client (MARVEL\Administrator); if, as in this case, <a href="/posts/demystify_kerberos_delegation_attacks/#18">the outcome is positive</a>, then the KDC issues a TGS Ticket (belonging to the user MARVEL\Administrator&rdquo;) valid for the CIFS service exposed on the SPIDERMAN machine (as with any other valid TGS Ticket this one will also have the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo;).</p>

            <img src="/demystify_kerberos_delegation_attacks/39.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ol>
<p>As you can see, following the Rubeus command we will have cached in memory a TGS Ticket belonging to the &ldquo;Administrator&rdquo; user valid for the CIFS service of the SPIDERMAN machine; in fact, by performing a Network Logon with &ldquo;PsExec&rdquo; the OS will retrieve the cached TGS Ticket and use it to perform the authentication; in this way the attacker has managed to successfully authenticated with administrative privileges to the SPIDERMAN machine.</p>

        <img src="/demystify_kerberos_delegation_attacks/40.png"  class="center"  style="border-radius: 8px;"  />
    

<blockquote>
<p>If you receive an authentication error try re-running the command including the <a href="/posts/demystify_kerberos_delegation_attacks/#23">&ldquo;msdsspn&rdquo; parameter</a> with a value that does not include the domain suffix, so from &ldquo;SPIDERMAN.marvel.local&rdquo; to &ldquo;SPIDERMAN&rdquo; (<a href="https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/resource-based-constrained-delegation-ad-computer-object-take-over-and-privilged-code-execution#trial-and-error">technically without the domain you should not encounter issues</a>); also verify to use the same domain nomenclature you inserted in &ldquo;msdsspn&rdquo; within the PsExec command (in this case), so if you request, for example, a TGS Ticket valid to access the SPIDERMAN.marvel.local machine use the same wording to connect via PsExec; finally, I do not understand why, sometimes PsExec only works if a &ldquo;dir \<hostname>\C$&rdquo; is executed beforehand (this is especially true for Computers with Unconstrained Delegation enabled, such as the DC).</p></blockquote>
 <span id=43>
<p>An attacker, after performing the attack, to partially restore the situation (since the created Computer Account cannot be deleted <a href="https://web.archive.org/web/20250324161821/https://www.fortalicesolutions.com/posts/hunting-resource-based-constrained-delegation-in-active-directory">unless</a> one has administrative permissions on the domain) could remove the &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; property <a href="/posts/demystify_kerberos_delegation_attacks/#15">previously configured</a> to enable the malicious RBCD on the target Computer object &ldquo;SPIDERMAN&rdquo;; to do this run the following Powershell commands (require PowerView):</p>
<pre tabindex="0"><code>PS C:\Tools&gt; $credentials = New-Object System.Management.Automation.PSCredential &#34;&lt;domain&gt;\&lt;user_with_write_permission&gt;&#34;, (ConvertTo-SecureString &#34;&lt;user_with_write_permission_password&gt;&#34; -AsPlainText -Force)
PS C:\Tools&gt; Get-DomainComputer &lt;target_computer&gt; | Set-DomainObject -Clear msDS-AllowedToActOnBehalfOfOtherIdentity -Credential $credentials -Verbose
</code></pre></li>
</ol>
<h2 id="abuse-rbcd-via-dacl-computer---linux"><strong>Abuse RBCD via DACL (Computer) - Linux</strong></h2>
<p>In this scenario we will see how to perform an <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl">Abuse RBDC via DACL</a>, <a href="/posts/demystify_kerberos_delegation_attacks/#9">in the most common scenario</a>, from a Linux machine.</p>
<ol>
<li>
<p><strong>The attacker checks which accounts have write permission on the attribute &ldquo;<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-msds-allowedtoactonbehalfofotheridentity?ref=labs.lares.com">ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity</a>&rdquo; of a Computer-type object.</strong></p>
<p>Below we can verify with BloodHound that the domain account &ldquo;MARVEL\UserA&rdquo; HAS write permissions, in this case GenericAll, on the Computer object &ldquo;SPIDERMAN&rdquo;, consequently it will be able to configure the RBCD on it.</p>

        <img src="/demystify_kerberos_delegation_attacks/105.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>The attacker compromises the domain account MARVEL\UserA which has the required write permissions on the SPIDERMAN machine.</strong></p>
<p>In this scenario the attacker managed to retrieve, for example through Password Spray, the credentials of the account &ldquo;MARVEL\UserA&rdquo;, that is, the domain account that has the required write permissions on the SPIDERMAN machine.</p>
</li>
<li>
<p><strong>The attacker creates a &ldquo;Computer Account&rdquo; within the domain.</strong></p>
<p>The attacker needs to control an account with a configured SPN, since it can be used to invoke the S4U extensions and exploit the RBCD that we will configure later.</p>
<p>Since Computer Accounts have an SPN configured by default, the attacker will tend to compromise one in order to use it; among the various methods, the most common one is to exploit a feature that is present by default in every domain.</p>
<p>The domain has an attribute named &ldquo;MS-DS-Machine-Account-Quota&rdquo; which regulates how many Computer Accounts a non-privileged user (usually a Computer Account or a traditional Domain User) is able to create within the domain; by default this value is equal to 10; consequently, if this value is &gt;=1, the attacker could create an arbitrary &ldquo;Computer Account&rdquo;.</p>
<p>Below is the <a href="https://www.jorgebernhardt.com/how-to-change-attribute-ms-ds-machineaccountquota/">command</a> that checks the value present in the &ldquo;MS-DS-Machine-Account-Quota&rdquo; attribute:</p>
<pre tabindex="0"><code># ldapsearch -x -H ldap://&lt;DCIP_or_DCHostname&gt; -b &#39;DC=&lt;domain&gt;,DC=&lt;domain&gt;&#39; -D &#34;&lt;user&gt;@&lt;domain&gt;&#34; -W -s sub &#34;(objectclass=domain)&#34; | grep ms-DS-MachineAccountQuota
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/106.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Since the value is &gt;=1 we can create an arbitrary &ldquo;Computer Account&rdquo;, in a Linux context we can use the &ldquo;<a href="https://github.com/fortra/impacket/blob/master/examples/addcomputer.py">addcomputer.py</a>&rdquo; tool from Impacket, specifically by executing the following command:</p>

        <img src="/demystify_kerberos_delegation_attacks/107.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see, following the command a new arbitrary Computer Account has been created; creating a &ldquo;Computer Account&rdquo; is equivalent to creating an object of type &ldquo;Computer&rdquo; within the domain.</p>
</li>
<li>
<p><strong>The attacker, using the account &ldquo;MARVEL\UserA&rdquo;, populates the attribute &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; of the SPIDERMAN machine with the value of the previously created Computer Account &ldquo;MaliciousAccount$&rdquo;, in this way the attacker has enforced a malicious RBCD configuration on the SPIDERMAN machine.</strong></p>
<pre tabindex="0"><code># impacket-rbcd -dc-ip &lt;dc_ip&gt; &lt;domain&gt;/&lt;user&gt;:&#39;&lt;password&gt;&#39; -action write -delegate-to &#39;&lt;Computer_Account_target&gt;&#39; -delegate-from &#39;&lt;Computer_Account_Malicious&gt;&#39;
</code></pre><p>To verify if the modification was successful, execute the following command:</p>
<pre tabindex="0"><code># impacket-rbcd -dc-ip &lt;dc_ip&gt; &lt;domain&gt;/&lt;user&gt;:&#39;&lt;password&gt;&#39; -action read -delegate-to &#39;&lt;Computer_Account_target&gt;&#39;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/108.png"  class="center"  style="border-radius: 8px;"  />
    

<p>With these commands, the attacker, impersonating the account &ldquo;MARVEL\UserA&rdquo;, has populated the attribute &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; of the SPIDERMAN machine with the value of the previously created Computer Account &ldquo;MaliciousAccount$&rdquo;, in this way the attacker has enforced a malicious RBCD configuration on the SPIDERMAN machine.</p>
</li>
<li>
<p><strong>The attacker obtains a valid TGS Ticket (of a Domain Admin) to authenticate to the CIFS service hosted on the SPIDERMAN machine.</strong></p>
<p><a href="/posts/demystify_kerberos_delegation_attacks/#1002">Since it has already been explained in detail previously, this section will be a summary of it</a>.</p>
<p>Now that the attacker has configured a malicious RBCD, meaning they have populated the attribute &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; of the SPIDERMAN machine with the value of the Computer Account &ldquo;MaliciousAccount$&rdquo;, they can impersonate this account to invoke the S4U2Self &amp; S4U2Proxy extensions (having at least one configured SPN allows them to do so) and therefore obtain a TGS Ticket belonging to a Domain Admin account, valid for accessing ANY service hosted on the SPIDERMAN machine (or rather, any service running with the Service Account SPIDERMAN$, so, all services started with the Local Service account such as, by default, the CIFS service).</p>
<pre tabindex="0"><code># impacket-getST -spn &lt;SPN_desiderato&gt; -impersonate &lt;User_To_Impersonate&gt; -dc-ip &lt;DC_IP&gt; &#39;&lt;domain&gt;/&lt;Computer_Account_Creato&gt;&#39;:&lt;password&gt;
</code></pre><blockquote>
<p>Unlike the Abuse Protocol Transition context where the &ldquo;/msdsspn&rdquo; parameter was populated exclusively with the SPN present in the &ldquo;msds-allowedtodelegateto&rdquo; property, in the context of Abuse RBDC via DACL it must be populated with an arbitrary SPN chosen by the attacker, in this way, in the S4UProxy Request that SPN will be specified, and since the KDC will use the RBCD, it will return in the corresponding S4UProxy Response the TGS Ticket valid for the arbitrary requested service.</p></blockquote>

        <img src="/demystify_kerberos_delegation_attacks/109.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Let&rsquo;s <a href="/posts/demystify_kerberos_delegation_attacks/#1003">SUMMARILY</a> analyze all the operations performed by getST.</p>
<ol>
<li>
<p>Impacket getST, since it does NOT find a &ldquo;.cache&rdquo; file related to the TGT Ticket of the Computer Account MaliciousAccount$, sends a &ldquo;KRB_AS_REQ&rdquo; to obtain precisely the TGT Ticket of the Computer Account MaliciousAccount$, information necessary to invoke the &ldquo;KRB_TGS_REQ (S4USelf)&rdquo;</p>

            <img src="/demystify_kerberos_delegation_attacks/110.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
<li>
<p>Impacket getST now that it has the TGT Ticket of the Computer Account &ldquo;MaliciousAccount$&rdquo; sends a &ldquo;KRB_TGS_REQ (S4USelf)&rdquo; to obtain a TGS Ticket on behalf of the account &ldquo;MARVEL\Administrator&rdquo; (Domain Admin) valid for the service itself.</p>

            <img src="/demystify_kerberos_delegation_attacks/111.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
<li>
<p>Impacket getST now that it has the TGS Ticket (belonging to the account MARVEL\Administrator&quot;) valid for the service itself, it will be able to use it as &ldquo;evidence&rdquo; to invoke the &ldquo;KRB_TGS_REQ (S4UProxy)&rdquo;, in this way the attacker will obtain a TGS Ticket (always belonging to the account MARVEL\Administrator&quot;) valid for the CIFS service exposed on the SPIDERMAN machine (CIFS/SPIDERMAN)</p>

            <img src="/demystify_kerberos_delegation_attacks/112.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ol>
</li>
</ol>
<p>Now we could, for example, use the Impacket suite to access the SPIDERMAN machine via PsExec, in this example we will use Impacket&rsquo;s &ldquo;psexec&rdquo; (smbexec.py can also be used)&quot;, consequently it is necessary to configure an environment variable named &ldquo;KRB5CCNAME&rdquo; and make sure that it contains the file just created, so the TGS Ticket.</p>
<pre tabindex="0"><code># export KRB5CCNAME=./&lt;user&gt;@&lt;service&gt;_&lt;hostname&gt;@&lt;domain&gt;.ccache
</code></pre>
    <img src="/demystify_kerberos_delegation_attacks/113.png"  class="center"  style="border-radius: 8px;"  />


<p>After that, use for example Impacket&rsquo;s &ldquo;psexec&rdquo; to perform the authentication, in this way the attacker will be able to authenticate with administrative privileges to the SPIDERMAN machine.</p>
<pre tabindex="0"><code># impacket-psexec -k -no-pass &lt;hostname&gt;
</code></pre>
    <img src="/demystify_kerberos_delegation_attacks/114.png"  class="center"  style="border-radius: 8px;"  />


<p>In a Linux context it is straightforward and convenient to also use the Impacket tool &ldquo;secretsdump&rdquo; in order to dump the OS Credentials present on the target machine, this is because it also supports Kerberos Authentication following the same logic as every other tool in the Impacket suite.</p>

    <img src="/demystify_kerberos_delegation_attacks/115.png"  class="center"  style="border-radius: 8px;"  />


<p>An attacker, after having carried out the attack, to partially restore the situation (given that the created Computer Account cannot be deleted unless one has administrative permissions on the domain) could remove the property &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; previously configured to enable the malicious RBCD on the Target Computer object &ldquo;SPIDERMAN&rdquo;:</p>
<pre tabindex="0"><code># impacket-rbcd -dc-ip &lt;DC_IP&gt; &lt;domain&gt;/&lt;user&gt;:&#39;&lt;password&gt;&#39; -action remove -delegate-to &#39;&lt;ComputerAccount_targate&gt;$&#39; -delegate-from &#39;&lt;malicious_computeraccount&gt;&#39;
</code></pre>
    <img src="/demystify_kerberos_delegation_attacks/116.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="abuse-rbcd-via-dacl---detect--mitigation"><strong>Abuse RBCD via DACL - Detect &amp; Mitigation</strong></h2>
<p><strong>Detect</strong></p>
<p>Configure a <a href="https://labs.lares.com/securing-active-directory-via-acls/">SACL</a> that will monitor the modification of the attribute <a href="https://learn.microsoft.com/it-it/windows/win32/adschema/a-msds-allowedtoactonbehalfofotheridentity">ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity</a> (<a href="https://www.alteredsecurity.com/post/resource-based-constrained-delegation-rbcd">1</a>, <a href="https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html">2</a>)</p>
<p><strong>Mitigation</strong></p>
<p>Although this type of attack cannot be completely prevented since it exploits how Kerberos Delegation works, there are mitigations that can mitigate the impact:</p>
<ul>
<li>
<p>Configure the property &ldquo;Account is sensitive and cannot be delegated&rdquo; on privileged accounts (<a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition---detect--mitigation">detailed explaination here</a>)</p>
</li>
<li>
<p>Add privileged accounts to the &ldquo;Protected Users Group&rdquo; (<a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition---detect--mitigation">detailed explaination here</a>)</p>
</li>
<li>
<p>Modify the domain attribute &ldquo;<a href="https://www.netspi.com/blog/technical-blog/network-penetration-testing/machineaccountquota-is-useful-sometimes/">MS-DS-Machine-Account-Quota</a>&rdquo; by entering the value 0.</p>
<p>Entering the value 0 will make it impossible for the attacker to create an arbitrary &ldquo;Computer Account&rdquo;, thereby making the attacker&rsquo;s Abuse RBCD via DACL scenario more complicated.</p>
<p>To perform this action access <a href="https://www.varonis.com/blog/active-directory-users-and-computers">ADUC</a> and simply set this property to 0 within the &ldquo;domain&rdquo; object.</p>

        <img src="/demystify_kerberos_delegation_attacks/120.png"  class="center"  style="border-radius: 8px;"  />
    

<blockquote>
<p>This change will <a href="https://learn.microsoft.com/en-us/archive/technet-wiki/5446.active-directory-how-to-prevent-authenticated-users-from-joining-workstations-to-a-domain">NOT</a> impact the following users: Domain Admin, Administrators, users who have the permission to create &amp; delete &ldquo;Computer Account&rdquo; within an OU; consequently, changing this value to 0 will NOT cause any kind of service disruption to domain administrators.</p></blockquote>
</li>
</ul>
<h2 id="abuse-kerberos-only"><strong>Abuse Kerberos Only</strong></h2>
<p><strong><a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Kerberos Only</a>, being similar to <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Protocol Transition</a>, one might think that an attacker could exploit it doing the exact same steps described in <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition">Abuse Protocol Transition</a></strong>, so that compromising the Service Account with Kerberos Only one would also be able to compromise (impersonating ANY domain user) the machine for which it is authorized to access on behalf of the Client (indicated in the flag &ldquo;<a href="/posts/demystify_kerberos_delegation/#101">msds-allowedtodelegateto</a>&rdquo;); <strong>this, unfortunately, is NOT possible</strong> because in that scenario the attacker could NOT &ldquo;correctly&rdquo; invoke the S4USelf extension to target an arbitrary user, this because if done the KDC would return a TGS Ticket with the FORWARDABLE Flag set to 0 (<a href="/posts/demystify_kerberos_delegation_attacks/#49">both PRE-2021 and POST-2021</a>) and therefore NOT valid to include it (additional-ticket) in  the subsequent S4UProxy (<a href="/posts/demystify_kerberos_delegation/#305">if the S4UProxy were sent anyway the KDC would force the RBCD which, not being configured, would end with an error response</a>).</p>
<span id=49>
<p>This logic is true both PRE-2021 and POST-2021, in fact:</p>
<ul>
<li>
<p>PRE-2021: In an S4USelf Response the KDC will provide a TGS Ticket with the FORWARDABLE flag set to 0, it happens because <a href="/posts/demystify_kerberos_delegation/#76">the Service Account in this case of the Kerberos Only does NOT have the &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo;</a> flag. (in a <a href="/posts/demystify_kerberos_delegation/#348">&ldquo;Kerberos Only&rdquo; context the relevant Service Account is configured only with the &ldquo;msds-allowedtodelegateto&rdquo; flag</a>)</p>
</li>
<li>
<p>POST-2021: In an S4USelf Response the KDC will provide a TGS Ticket with the FORWARDABLE flag set to 0, it happens because the Service Account is configured with a <a href="/posts/demystify_kerberos_delegation/#71">Kerberos Only (so, it does NOT have the &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo; flag &amp; has configured the &ldquo;msds-allowedtodelegateto&rdquo; flag with some values)</a></p>
</li>
</ul>
<p><strong>That said, it is still possible to <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only-computer---windows">Abuse Kerberos Only</a> but it is necessary to leverage the knowledge acquired through &ldquo;<a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition">Abuse Protocol Transition</a>&rdquo; and &ldquo;<a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl">Abuse RBCD via DACL</a>&rdquo;.</strong></p>
<p>The prerequisites of &ldquo;Abuse Kerberos Only&rdquo; are:</p>
<ul>
<li>
<p><a href="/posts/demystify_kerberos_delegation_attacks/#51">Analogous to &ldquo;Abuse RBCD&rdquo;</a>: The attacker needs to control an account that is capable of invoking the “S4USelf” extensions, usually a Computer Account is created by exploiting the default value of “MS-DS-Machine-Account-Quota”</p>
</li>
<li>
<p>Compromise the Service Account that has <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation (Kerberos Only)</a> enabled</p>
</li>
</ul>
<p>The most common steps to carry out an &ldquo;Abuse Kerberos Only&rdquo; are:
<span id=52></p>
<ol>
<li>The attacker obtains a &ldquo;Computer Account&rdquo; which will be able to perform an “S4USelf&quot;, typically it will be created by exploiting the default value of “MS-DS-Machine-Account-Quota”.</li>
</ol>
<span id=60>
<ol start="2">
<li>The attacker, after compromising the Service Account (usually a Computer Account) with Kerberos Only configured, sets on it the property &ldquo;ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity&rdquo; containing as value the Computer Account <a href="/posts/demystify_kerberos_delegation_attacks/#52">previously created by the attacker</a>; in other words, he configures a so called &ldquo;Self-RBCD&rdquo;.</li>
</ol>
<span id=70>
<blockquote>
<p><a href="https://www.thehacker.recipes/ad/movement/kerberos/delegations/constrained#without-protocol-transition">By default every Computer Account</a> (from my tests even standard domain users) has permissions to edit its own &ldquo;ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity&rdquo; property, this behavior allows to perform this kind of attack; Microsoft appears to have <a href="https://www.thehacker.recipes/ad/movement/kerberos/delegations/constrained#without-protocol-transition">patched</a> this behavior in August / September 2022, so for example on Windows Server 2025 this technique may NO longer work.</p></blockquote>
<ol start="3">
<li>
<p>Analogous to an <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl">Abuse RBCD via DACL</a>, the attacker could invoke the &ldquo;S4USelf&rdquo; and &ldquo;S4UProxy&rdquo; extensions with the <a href="/posts/demystify_kerberos_delegation_attacks/#52">previously</a> created Computer Account to exploit the specially configured RBCD and thus obtain a TGS Ticket (belonging to an administrative domain account) valid for a service on the machine with Kerberos Only enabled; instead of using it in an authentication (an action that WOULD NOT make sense since the attacker has already compromised the machine with Kerberos Only) this TGS Ticket will be used <a href="/posts/demystify_kerberos_delegation_attacks/#53">subsequently</a> in an alternative way; the sub-steps are:
<span id=59></p>
<ul>
<li>
<p>The attacker performs an S4USelf Request impersonating the Computer Account (<a href="/posts/demystify_kerberos_delegation_attacks/#52">previously</a> created) to obtain a TGS Ticket valid for the services started by that same Computer Account, so none.</p>
<blockquote>
<p>This phase rappresent these phases (<a href="/posts/demystify_kerberos_delegation_attacks/#57">1</a>, <a href="/posts/demystify_kerberos_delegation_attacks/#39">2</a>)
<span id=61></p></blockquote>
</li>
<li>
<p>The attacker, using the <a href="/posts/demystify_kerberos_delegation_attacks/#59">previously obtained TGS Ticket</a> and exploiting the <a href="/posts/demystify_kerberos_delegation_attacks/#60">Self-RBCD previously configured</a> on the Service Account with Kerberos Only, is able to obtain a TGS Ticket belonging to an administrative account to access the machine with Kerberos Only enabled (this TGS Ticket will be used <a href="/posts/demystify_kerberos_delegation_attacks/#53">subsequently</a>)</p>
<blockquote>
<p>This phase rappresent this phase (<a href="/posts/demystify_kerberos_delegation_attacks/#33">1</a>)</p></blockquote>
</li>
</ul>
</li>
</ol>
<span id=53>
<ol start="4">
<li>The attacker uses <a href="/posts/demystify_kerberos_delegation_attacks/#61">this TGS Ticket (belonging to an administrative domain account)</a> as &ldquo;<a href="/posts/demystify_kerberos_delegation/#300">evidence</a>&rdquo; that an administrative account has logged onto the machine with Kerberos Only enabled, consequently, analogous to an <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition">Abuse Protocol Transition</a>, by impersonating the machine with Kerberos Only enabled the attacker could invoke S4UProxy and insert this TGS Ticket into the &ldquo;additional-ticket&rdquo; field to receive from the KDC a TGS Ticket (again belonging to an administrative domain account) valid to authenticate to the computer that the Kerberos Only machine is authorized to access on behalf of the Client (indicated in the &ldquo;<a href="/posts/demystify_kerberos_delegation/#298">msds-allowedtodelegateto&rdquo; flag</a>); furthermore, analogous to Abuse Protocol Transition, the attacker can choose to modify the SPN field of the received TGS Ticket.</li>
</ol>
<p>Knowing this information we draw the following conclusion.</p>
<p><strong>If an attacker compromises a Service Account with &ldquo;<a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation (Kerberos Only)</a>&rdquo; enabled, so in most scenarios a Computer Account (usually by compromising the related machine), the attacker could therefore obtain a TGS Ticket belonging to ANY domain account and valid to access ANY (<a href="/posts/demystify_kerberos_delegation_attacks/#4">typically</a>) Back-End service which the compromised machine is authorized to access on behalf of the Client (indicated in the &ldquo;<a href="/posts/demystify_kerberos_delegation/#298">msds-allowedtodelegateto&rdquo; flag</a>).</strong></p>
<h2 id="abuse-kerberos-only-computer---windows"><strong>Abuse Kerberos Only (Computer) - Windows</strong></h2>
<p>In this scenario we will see how to exploit an Abuse Kerberos Only from a Windows machine.</p>
<ol>
<li>
<p><strong>Identify which Service Accounts have &ldquo;Constrained Delegation (Kerberos Only)&rdquo; enabled (in this scenario we are looking for Computer Accounts that act as Service Accounts)</strong></p>
<p>There are different methods to identify which Service Accounts have &ldquo;Constrained Delegation (Kerberos Only)&rdquo;; on Windows it is possible to perform targeted LDAP queries using Powershell:</p>
<pre tabindex="0"><code>PS C:\&gt;
    $searcher = New-Object DirectoryServices.DirectorySearcher
    $searcher.Filter = &#34;(&amp;(objectClass=computer)(msDS-AllowedToDelegateTo=*))&#34;
    $searcher.FindAll() | ForEach-Object {
        $_.Properties[&#39;name&#39;]
}
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/60.png"  class="center"  style="border-radius: 8px;"  />
    

 <span id=41>
<p>As you can notice, the Computer Account THEPUNISHER$ has <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation (Kerberos Only)</a> enabled; specifically, this account and therefore ALL services running under it will be able to authenticate on behalf of the Client exclusively to the SPN &ldquo;HTTP/SPIDERMAN&rdquo;, so the HTTP service of the SPIDERMAN machine.</p>
<p>In fact, inspecting via ADUC the &ldquo;Delegation&rdquo; tab of the THEPUNISHER Computer, we will find this configuration.</p>

        <img src="/demystify_kerberos_delegation_attacks/61.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>The attacker compromises the Service Account with Constrained Delegation (Kerberos Only) enabled.</strong></p>
<p>In this scenario, the attacker managed to authenticate with administrative permissions on the THEPUNISHER machine and, by dumping LSASS, obtained the credentials of the THEPUNISHER$ Computer Account, so, the Service Account with Constrained Delegation (Kerberos Only) enabled.</p>
<p>
        <img src="/demystify_kerberos_delegation_attacks/62.png"  class="center"  style="border-radius: 8px;"  />
    

<span id=27></p>
</li>
<li>
<p><strong>The attacker creates a &ldquo;Computer Account&rdquo; within the domain.</strong></p>
<p><a href="/posts/demystify_kerberos_delegation_attacks/#12">As already told</a>, the attacker needs to control an account with a configured SPN, as it can be used to invoke the S4U extensions and exploit the RBCD that we will configure later.</p>
<p>Since Computer Accounts have an SPN configured by default, the attacker will aim to compromise one to then use it; among the various methods, the most common is to exploit a feature present by default in every domain.</p>
<p>The domain has an attribute named &ldquo;MS-DS-Machine-Account-Quota&rdquo; that regulates how many Computer Accounts a non-privileged user (usually a Computer Account &amp; a traditional domain user) can create within the domain; by default this value is 10; consequently, if this value is &gt;=1, the attacker could create an arbitrary &ldquo;Computer Account&rdquo;.</p>
<p>Below is the command that checks the value present in the &ldquo;MS-DS-Machine-Account-Quota&rdquo; attribute:</p>
<pre tabindex="0"><code>PS C:\&gt; Get-ADObject `
    -Identity ((Get-ADDomain).distinguishedname) `
    -Properties ms-DS-MachineAccountQuo
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/63.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Since the value is &gt;=1, we can create an arbitrary &ldquo;Computer Account&rdquo;; in a Windows context, we can use the &ldquo;PowerMad&rdquo; tool, specifically executing the following command:</p>
<pre tabindex="0"><code>PS C:\&gt; New-MachineAccount -MachineAccount &lt;ComputerAccount_Name&gt; -Password $(ConvertTo-SecureString &#34;&lt;ComputerAccount_Password&gt;&#34; -AsPlainText -Force)
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/64.png"  class="center"  style="border-radius: 8px;"  />
    

<p>As you can see, following the command a new arbitrary Computer Account has been created.</p>
<p>Creating a &ldquo;Computer Account&rdquo; is equivalent to creating a &ldquo;Computer&rdquo; type object within the domain; in fact, inspecting the objects via ADUC we will find the &ldquo;Computer&rdquo; object named EvilComputer (which will contain its related Computer Account EvilComputer$).</p>

        <img src="/demystify_kerberos_delegation_attacks/65.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
</ol>
<span id=36>
<ol start="4">
<li>
<p><strong>The attacker, impersonating the user &ldquo;THEPUNISHER$&rdquo; (Service Account with Constrained Delegation  -Kerberos Only), populates their own &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; attribute with the value of the &ldquo;EvilComputer$&rdquo; Computer Account previously created; in this way, the attacker has forced a malicious Self RBCD.</strong></p>
<p>As already mentioned, by default every Computer Account has the permissions to edit its own &ldquo;<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-msds-allowedtoactonbehalfofotheridentity">ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity</a>&rdquo; property; consequently, an attacker, after compromising a Service Account of the Computer Account type with Constrained Delegation (Kerberos Only) enabled, could force an RBCD ot the account itself.</p>
<blockquote>
<p>Microsoft seems to have patched this behavior in August / September 2022.</p></blockquote>
<p>In our example, after compromising the THEPUNISHER$ Computer Account (Service Account with Constrained Delegation - Kerberos Only), the attacker impersonates it and self-populates the &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; property with the value &ldquo;EvilComputer$&rdquo;, so, with the <a href="/posts/demystify_kerberos_delegation_attacks/#27">previously</a> created Computer Account.</p>
<p>To do this in a Windows context, it is necessary to perform this action having imported the TGT Ticket of the THEPUNISHER$ Computer Account into memory (in order to impersonate it); consequently, to avoid DoS we invoke a Sacrificial Process.</p>
<pre tabindex="0"><code>C:&gt; Rubeus.exe createnetonly /program:&#34;C:\Windows\System32\cmd.exe&#34; /show
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/66.png"  class="center"  style="border-radius: 8px;"  />
    

 <span id=29>
<p>Then we execute the following Rubeus command within the Sacrificial Process which will retrieve and cache locally a Ticket TGT of the THEPUNISHER$ users.</p>
<pre tabindex="0"><code>C:\&gt; .\Rubeus.exe asktgt /user:&lt;Computer_Account_KerberosOnly&gt; /rc4:&lt;Computer_Account_KerberosOnly&gt; /domain:&lt;DOMAIN&gt; /nowrap /ptt
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/67.png"  class="center"  style="border-radius: 8px;"  />
    

<p>After this, start PowerShell (so type &ldquo;powershell&rdquo; inside the Sacrificial Process) and then execute the Self RBCD configuration with the following commands (PowerView is required):</p>
<ul>
<li>Retrieve the SID of the previously created Computer Account
<pre tabindex="0"><code>PS C:\&gt; $ComputerSid = Get-DomainComputer &lt;Computer_Account_Creato&gt; -Properties objectsid | Select -Expand objectsid 
</code></pre></li>
</ul>
<blockquote>
<p>It is necessary to specify the Computer and not the Computer Account to avoid an error in this step, so you can write, for example, EvilComputer but not EvilComputer$.</p></blockquote>
<ul>
<li>
<p>Create the value that will be inserted into the &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; parameter; specifically, the syntax (<a href="https://learn.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-definition-language">SDDL</a>) in raw binary format will be used</p>
<pre tabindex="0"><code>PS C:\Tools&gt; $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList &#34;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))&#34; 
PS C:\Tools&gt; $SDBytes = New-Object byte[] ($SD.BinaryLength) 
PS C:\Tools&gt; $SD.GetBinaryForm($SDBytes, 0) 
</code></pre></li>
<li>
<p>Using PowerView, the attacker modifies the &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; attribute of the THEPUNISHER machine with the value of the previously created &ldquo;EvilComputer$&rdquo; Computer Account, which is represented by the value previously constructed; this modification action will be performed while impersonating the THEPUNISHER$ Computer Account (<a href="/posts/demystify_kerberos_delegation_attacks/#29">as we have the related cached TGT Ticket</a>).</p>
<pre tabindex="0"><code>PS C:\Tools&gt; Get-DomainComputer &lt;target_computer&gt;.&lt;domain&gt;.&lt;domain&gt; | Set-DomainObject -Set @{&#39;msds-allowedtoactonbehalfofotheridentity&#39;=$SDBytes} -Verbose
</code></pre></li>
</ul>
<p>Below is the execution of all the commands just described:</p>

        <img src="/demystify_kerberos_delegation_attacks/68.png"  class="center"  style="border-radius: 8px;"  />
    

<p>With these commands the attacker, impersonating the account &ldquo;THEPUNISHER$&rdquo;, populated the &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; attribute of the machine itself with the value of the <a href="/posts/demystify_kerberos_delegation_attacks/#27">previously</a> created Computer Account &ldquo;EvilComputer$&rdquo;, in this way the attacker forced a Self RBCD on the Service Account THEPUNISHER$ (which is still configured ALSO with <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation Kerberos Only</a>, in fact it still has the <a href="/posts/demystify_kerberos_delegation/#298">msds-allowedtodelegateto flag</a> <a href="/posts/demystify_kerberos_delegation_attacks/#30">configured</a>).</p>
<p>Indeed, if we now inspect the &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; attribute of the THEPUNISHER machine we can see that:</p>
<ol>
<li>
<p>via ADUC it is noticeable that a value with a dedicated syntax is actually present (which in reality represents the EvilComputer$ Computer Account).
<br>
<br>
<span id=30>

        <img src="/demystify_kerberos_delegation_attacks/69.png"  class="center"  style="border-radius: 8px;"  />
    
</p>
</li>
<li>
<p>via &ldquo;Get-ADComputer&rdquo; (requires RSAT) it is noticeable that the value &ldquo;MARVEL\EvilComputer$&rdquo; is actually present.
<br>
<br>

        <img src="/demystify_kerberos_delegation_attacks/70.png"  class="center"  style="border-radius: 8px;"  />
    
</p>
</li>
</ol>
</li>
</ol>
<span id=34>
<ol start="5">
<li>
<p><strong>The attacker, now that they have configured a malicious RBCD, so, it have populated the &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; attribute of the machine THEPUNISHER$ with the value of the Computer Account &ldquo;EvilComputer$&rdquo;, can impersonate that account to invoke the <a href="/posts/demystify_kerberos_delegation/#100">&ldquo;S4U2Self&rdquo; &amp; &ldquo;S4U2Proxy&rdquo;</a> extensions (having at least 1 SPN configured it is able to do so) and thus (<a href="/posts/demystify_kerberos_delegation_attacks/#36">thanks to the previously made malicious configuration - &ldquo;Self-RBCD&rdquo;</a>) obtain a TGS Ticket belonging to a Domain Admin account valid to access ANY service hosted on the THEPUNISHER machine (so the machine with Kerberos Only already compromised by the attacker); in the <a href="/posts/demystify_kerberos_delegation_attacks/#37">next phase</a> we&rsquo;ll use this TGS Ticket as an &ldquo;Additional-Ticket&rdquo; to invoke S4U2Proxy again.</strong></p>
<p>Since performing this action requires knowing the RC4 Key (NT Hash) or other types of secrets of the &ldquo;EvilComputer$&rdquo; Computer Account, we can produce them by feeding Rubeus the related password in plaintext with the following command:</p>
<pre tabindex="0"><code>C:\&gt; PS C:\Tools&gt; .\Rubeus.exe hash /password:&lt;ComputerAccount_Created_Password&gt; /user:&lt;ComputerAccount_Created&gt; /domain:&lt;domain&gt;
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/71.png"  class="center"  style="border-radius: 8px;"  />
    

<p>Inside the Sacrifical Process previously created execute the following Rubeus command:</p>
<pre tabindex="0"><code>C:\&gt; .\Rubeus.exe s4u /user:&lt;Created_Computer_Account&gt; /rc4:&lt;Created_Computer_Account_RC4Key&gt; /impersonateuser:&lt;User_To_Impersonate&gt; /msdsspn:&lt;Desired_SPN_related_to_the_ComputerAccount_with_RBCD_configurated&gt; /nowrap
</code></pre><blockquote>
<p>Unlike in the Abuse Protocol Transition context where the &ldquo;/msdsspn&rdquo; parameter was populated exclusively with the SPN present in the &ldquo;msds-allowedtodelegateto&rdquo; property, in the Abuse Kerberos Only context it must be populated with any arbitrary SPN chosen by the attacker that has the THEPUNISHER$ Computer Account as its Service Account (for example CIFS/THEPUNISHER), everything will work because the KDC will use the RBCD previously configured.</p></blockquote>
 <span id=57>
<ol>
<li>
<p><strong>Rubeus sent a &ldquo;<a href="/posts/not_so_brief_overview_about_kerberos/#39">KRB_AS_REQ</a>&rdquo; to obtain the TGT ticket of the EvilComputer$ Computer Account, information necessary to invoke <a href="/posts/demystify_kerberos_delegation_attacks/#39">next</a> the &ldquo;KRB_TGS_REQ (S4USelf)&rdquo;</strong></p>

            <img src="/demystify_kerberos_delegation_attacks/72.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ol>
 <span id=39>
<ol start="2">
<li>
<p><strong>Rubeus, now that it has the TGT Ticket of the Computer Account &ldquo;EvilComputer$&rdquo;, sends a &ldquo;<a href="/posts/demystify_kerberos_delegation/#302">KRB_TGS_REQ (S4USelf) Request</a>&rdquo; to obtain a corresponding <a href="/posts/demystify_kerberos_delegation/#303">KRB_TGS_REP (S4U2Self) Response</a> containing a TGS Ticket belonging to the account &ldquo;MARVEL\Administrator&rdquo; (Domain Admin) valid for the <a href="/posts/demystify_kerberos_delegation/#100">services</a> executed with the account &ldquo;EvilComputer$&rdquo; (in our scenario this Computer Account &ldquo;EvilComputer&rdquo; DOES NOT run services, that said, this actions will only be used to conduct the <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only-computer---windows">Abuse Kerberos Only</a>).</strong></p>

            <img src="/demystify_kerberos_delegation_attacks/73.png"  class="center"  style="border-radius: 8px;"  />
        

<p>To analyze the process in detail, <a href="/posts/demystify_kerberos_delegation_attacks/#34">re-read this section</a>.</p>
</li>
</ol>
 <span id=35>
<blockquote>
<p>This Ticket TGS will be issued with the <a href="/posts/demystify_kerberos_delegation_attacks/#13">FORWARDABLE flag at 1</a> (briefly: because &ldquo;EvilComputer$&rdquo; does NOT have &ldquo;Kerberos Only enabled&rdquo;)</p></blockquote>
 <span id=33>
<ol start="3">
<li>
<p><strong>Rubeus now that it has the TGS Ticket (belonging to the user MARVEL\Administrator) valid for <a href="/posts/demystify_kerberos_delegation/#100">services</a> executed with the user &ldquo;EvilComputer$&rdquo; (<a href="/posts/demystify_kerberos_delegation_attacks/#39">so none</a>), uses it to invoke a &ldquo;<a href="/posts/demystify_kerberos_delegation/#118">KRB_TGS_REQ (S4UProxy) Request</a>&rdquo;, with this procedure the KDC will verify if this TGS Ticket has the FORWARDABLE flag (<a href="/posts/demystify_kerberos_delegation_attacks/#35">positive outcome</a>) and if the user &ldquo;EvilComputer$&rdquo; has the &ldquo;msds-allowedtodelegate&rdquo; flag properly configured (negative outcome), in summary, the second verification will fail since the user &ldquo;EvilComputer$&rdquo; does NOT have the &ldquo;msds-allowedtodelegate&rdquo; flag at all and consequently the KDC will switch to Kerberos Delegation RBCD; for this reason, the KDC will verify if the Service Account THEPUNISHER$ possesses the &ldquo;ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity&rdquo; flag containing the value of &ldquo;EvilComputer$&rdquo; (positive outcome), since this verification will be positive (<a href="/posts/demystify_kerberos_delegation_attacks/#36">the attacker previously performed this configuration - A.K.A Self-RBCD</a>), the KDC will issue a TGS Ticket (belonging to the user MARVEL\Administrator) valid for <a href="/posts/demystify_kerberos_delegation/#100">services</a> executed with the user &ldquo;THEPUNISHER$&rdquo; (so the machine with Kerberos Only already compromised by the attacker); finally, this TGS Ticket will be subsequently used in the <a href="/posts/demystify_kerberos_delegation_attacks/#37">continuation of the attack</a>.</strong></p>

            <img src="/demystify_kerberos_delegation_attacks/74.png"  class="center"  style="border-radius: 8px;"  />
        

<p>To analyze the process in detail, <a href="/posts/demystify_kerberos_delegation_attacks/#16">re-read this section</a>.</p>
 <span id=39>

            <img src="/demystify_kerberos_delegation_attacks/75.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ol>
<blockquote>
<p>This Ticket TGS will be issued with the FORWARDABLE flag at 1.</p></blockquote>
</li>
</ol>
<span id=63>
<span id=37>
<ol start="6">
<li>
<p><strong>The attacker could use the <a href="/posts/demystify_kerberos_delegation_attacks/#33">previously</a> obtained TGS Ticket</strong> (belonging to Domain Admin &amp; valid for <a href="/posts/demystify_kerberos_delegation/#100">services</a> executed with the user &ldquo;THEPUNISHER$&rdquo;, so the machine with Kerberos Only), <strong>as &ldquo;<a href="/posts/demystify_kerberos_delegation/#305">evidence</a>&rdquo; that the Domain Admin user &ldquo;MARVEL\Administrator&rdquo; logged onto the THEPUNISHER machine, consequently, the attacker, analogous to an <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition">Abuse Protocol Transition</a>, can invoke <a href="/posts/demystify_kerberos_delegation/#118">S4UProxy</a> and insert that TGS Ticket inside the &ldquo;additional-ticket&rdquo; field</strong> (traditionally in a Protocol Transition this field is dedicated to the TGS Ticket issued in the S4USelf Response but nothing prevents inserting any other TGS Ticket like this one received in an <a href="/posts/demystify_kerberos_delegation_attacks/#33">&ldquo;malicious&rdquo; S4UProxy</a>) <strong>in order to receive from the KDC a TGS Ticket (belonging to the Domain Admin user MARVEL\Administrator) valid to authenticate to the computer (HTTP/SPIDERMAN) that the Kerberos Only machine (THEPUNISHER) is authorized to access on behalf of the Client (indicated in the &ldquo;msds-allowedtodelegateto&rdquo; flag - <a href="/posts/demystify_kerberos_delegation/#298">1</a>, <a href="/posts/demystify_kerberos_delegation_attacks/#41">2</a>); furthermore, in this scenario the attacker decides to <a href="/posts/demystify_kerberos_delegation_attacks/#4">replace</a> the SPN &ldquo;HTTP/SPIDERMAN&rdquo; with the SPN &ldquo;CIFS/SPIDERMAN&rdquo; thereby managing to authenticate via PsExec to the SPIDERMAN machine.</strong></p>
<p>To do this run the following Rubeus command inside the previously created Sacrificial Process:</p>
 <span id=42>
<pre tabindex="0"><code>C:&gt; .\Rubeus.exe s4u /tgs:&lt;TicketTGS_received_earlier_in_the_S4UProxyResponse) /user:&lt;Service_Account_with_KerberosOnly&gt; /rc4:&lt;Service_Account_with_KerberosOnly_NTHash&gt; /msdsspn:&lt;SPN_within_in_msds-allowedtodelegateto&gt; /altservice:&lt;service&gt; /nowrap /ptt
</code></pre><blockquote>
<p>If desired, the /altservice parameter must be populated exclusively with the requested service and NOT the entire SPN, for example if we want the SPN of the TGS Ticket to be changed to CIFS it will be necessary to write only &ldquo;CIFS&rdquo; and not &ldquo;CIFS/<hostname>&rdquo;, otherwise the received TGS Ticket will NOT be valid.</p></blockquote>
<p>Let&rsquo;s analyze ALL the operations performed by Rubeus.
<span id=38></p>
<ol>
<li>
<p><strong>Rubeus sent a &ldquo;<a href="/posts/not_so_brief_overview_about_kerberos/#39">KRB_AS_REQ</a>&rdquo; to obtain the TGT Ticket of the Computer Account THEPUNISHER$, <a href="/posts/demystify_kerberos_delegation/#109">information necessary</a> to invoke the <a href="/posts/demystify_kerberos_delegation/#118">&ldquo;KRB_TGS_REQ (S4UProxy)&rdquo;</a></strong></p>

            <img src="/demystify_kerberos_delegation_attacks/76.png"  class="center"  style="border-radius: 8px;"  />
        


            <img src="/demystify_kerberos_delegation_attacks/77.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
<li>
<p><strong>Rubeus now that it has the <a href="/posts/demystify_kerberos_delegation_attacks/#38">TGT Ticket of the Computer Account THEPUNISHER$</a> and the TGS Ticket (belonging to the user MARVEL\Administrator) valid for the CIFS service on the THEPUNISHER$ machine (<a href="/posts/demystify_kerberos_delegation_attacks/#39">so, the one received in the previous S4UProxy Response</a>), will be able to use this Ticket as &ldquo;evidence&rdquo; and therefore insert it inside the &ldquo;Additional-Ticket&rdquo; field in a new &ldquo;<a href="/posts/demystify_kerberos_delegation/#118">S4UProxy Request</a>&rdquo;, in this way the attacker will obtain a TGS Ticket (still belonging to the user MARVEL\Administrator) valid for the HTTP service exposed on the SPIDERMAN machine (HTTP/SPIDERMAN), finally, Rubeus will change the HTTP service to the CIFS service, thus obtaining a TGS Ticket (still belonging to the user MARVEL\Administrator) valid for the CIFS service exposed on the SPIDERMAN machine.</strong></p>

            <img src="/demystify_kerberos_delegation_attacks/78.png"  class="center"  style="border-radius: 8px;"  />
        

<p>As we can see, Rubeus sends a <a href="/posts/demystify_kerberos_delegation/#118">&ldquo;KRB_TGS_REQ (S4UProxy)&rdquo;</a>, analyzing the content of the packet it can be noted that: 1) Inside the &ldquo;Additional Ticket&rdquo; field <a href="/posts/demystify_kerberos_delegation_attacks/#39">the TGS Ticket previously received in the &ldquo;S4UProxy Response&rdquo; is indeed sent</a> (<a href="/posts/demystify_kerberos_delegation_attacks/#42">so the Ticket inserted by the attacker in the /ticket parameter)</a> 2) The SPN that points to the service the compromised machine (Computer Account THEPUNISHER$) is authorized to access on behalf of the Client (indicated in the &ldquo;msds-allowedtodelegateto&rdquo; flag (<a href="/posts/demystify_kerberos_delegation/#298">1</a>, <a href="/posts/demystify_kerberos_delegation_attacks/#41">2</a>), in fact the SPN &ldquo;HTTP/SPIDERMAN.MARVEL.local&rdquo; is present.</p>
 <span id=40>

            <img src="/demystify_kerberos_delegation_attacks/79.png"  class="center"  style="border-radius: 8px;"  />
        

<p>The KDC <a href="/posts/demystify_kerberos_delegation/#51">verifies</a> if the TGS Ticket received inside the &ldquo;additional-tickets&rdquo; field (besides being valid) has the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo; (outcome positive - <a href="/posts/demystify_kerberos_delegation_attacks/#39">1</a>, <a href="/posts/demystify_kerberos_delegation_attacks/#40">2</a>)&amp; that inside the &ldquo;<a href="/posts/demystify_kerberos_delegation/#298">msds-allowedtodelegateto&rdquo; flag</a> parameter of the Service Account THEPUNISHER$ the requested service is present, in this case &ldquo;HTTP/SPIDERMAN.MARVEL.local&rdquo; (<a href="/posts/demystify_kerberos_delegation_attacks/#41">outcome positive</a>), since the outcome is positive for both checks, the KDC issues a TGS Ticket (belonging to the user MARVEL\Administrator) valid for the HTTP service exposed on the SPIDERMAN machine (like any other valid TGS Ticket, this will also have the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo;).</p>

            <img src="/demystify_kerberos_delegation_attacks/80.png"  class="center"  style="border-radius: 8px;"  />
        

</li>
</ol>
<p>Finally, Rubeus will <a href="/posts/demystify_kerberos_delegation_attacks/#4">modify</a> the SPN field of the received TGS Ticket, replacing the HTTP service with the desired CIFS service, in this way the output TGS Ticket (belonging to the user MARVEL\Administrator) will have the SPN &ldquo;CIFS/SPIDERMAN&rdquo; and will therefore be valid for the CIFS service exposed on the SPIDERMAN machine, after this Rubeus imports this Kerberos Ticket into memory.</p>
<blockquote>
<p>If the attacker does NOT want to replace the service of the TGS Ticket obtained via S4UProxy, they will simply NOT insert the <a href="/posts/demystify_kerberos_delegation_attacks/#42">&ldquo;altservice&rdquo; parameter</a>, consequently, in this context we will obtain a TGS Ticket (belonging to the user MARVEL\Administrator) valid for the HTTP service present on the SPIDERMAN machine (<a href="/posts/demystify_kerberos_delegation_attacks/#48">usefull for a potential WinRM Service</a> running and present on the SPIDERMAN machine).</p></blockquote>
</li>
</ol>
<p>As you can see, following the Rubeus command we will have cached in memory a TGS Ticket belonging to the &ldquo;Administrator&rdquo; user valid for the CIFS service of the SPIDERMAN machine, in fact, performing a Network Logon with &ldquo;PsExec&rdquo; the OS will retrieve the cached TGS Ticket and use it to authenticate; in this way the attacker has managed to authenticate with administrative privileges to the SPIDERMAN machine.</p>

    <img src="/demystify_kerberos_delegation_attacks/81.png"  class="center"  style="border-radius: 8px;"  />


<blockquote>
<p>The LogonID in this screenshot is different from that of the previously indicated Sacrificial Process simply because I have repeated this lab several times.</p></blockquote>
<blockquote>
<p>If you encounter an authentication error, try re-running the command by inserting the &ldquo;msdsspn&rdquo; parameter with a value that does not have the domain suffix, changing from &ldquo;SPIDERMAN.MARVEL.local&rdquo; to &ldquo;SPIDERMAN&rdquo;; in both cases it should still work since both values are present within the msds-allowedtodelegateto property; also make sure to use the same domain notation in &ldquo;msdsspn&rdquo; as in the PsExec command (in this case), so if, for example, I request a TGS Ticket to access the SPIDERMAN.MARVEL.local machine, use the same wording to connect via PsExec.</p></blockquote>
<blockquote>
<p>An attacker, after performing the attack, could partially restore the situation (since the created Computer Account cannot be deleted <a href="https://web.archive.org/web/20250324161821/https://www.fortalicesolutions.com/posts/hunting-resource-based-constrained-delegation-in-active-directory">unless</a> there are administrative permissions on the domain) to the pre-attack state; for this, see <a href="/posts/demystify_kerberos_delegation_attacks/#43">this section</a>.</p></blockquote>
<h2 id="abuse-kerberos-only-user---windows"><strong>Abuse Kerberos Only (User) - Windows</strong></h2>
<p><a href="/posts/demystify_kerberos_delegation_attacks/#70">As already said</a>, although it is stated that exclusively Computer Accounts can edit their property &ldquo;ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity&rdquo;, from my labs this also turns out to be true for traditional domain users, consequently the <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only">Abuse Kerberos Only</a> attack can also be carried out in this scenario, consequently if we identify a Service Account of type &ldquo;User&rdquo; (traditional domain user) with the &ldquo;<a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only">Constrained Delegation (Kerberos Only)</a>&rdquo; enabled (a rarer scenario compared to the Computer counterpart) it is possible to perform the <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only-computer---windows">same steps previously seen</a> to abuse this configuration.</p>
<p>If an attacker compromises a Service Account with the &ldquo;<a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only">Constrained Delegation (Kerberos Only)</a>&rdquo; enabled, so in this example a traditional domain user, the attacker could therefore obtain a TGS Ticket belonging to ANY domain user and valid to access ANY (<a href="/posts/demystify_kerberos_delegation_attacks/#1">usually</a>) Back-End service for which the compromised Service Account (domain user) is authorized to access on behalf of the Client (indicated in flag &ldquo;msds-allowedtodelegateto&rdquo;).</p>
<p>We therefore re-execute the same steps previously seen:</p>
<ol>
<li>
<p><strong>Identify which Service Accounts have the &ldquo;Constrained Delegation (Kerberos Only)&rdquo; enabled (in this scenario we are looking for traditional domain users acting as Service Accounts)</strong></p>
<pre tabindex="0"><code>PS C:\&gt;
$searcher = New-Object DirectoryServices.DirectorySearcher
$searcher.Filter = &#34;(&amp;(objectClass=user)(msDS-AllowedToDelegateTo=*))&#34;
$searcher.FindAll() | ForEach-Object {
    $_.Properties[&#39;name&#39;]
}
</code></pre>
        <img src="/demystify_kerberos_delegation_attacks/82.png"  class="center"  style="border-radius: 8px;"  />
    

 <span id=79>
<p>As you can notice, the traditional domain user MARVEL\userz has <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only">Constrained Delegation (Kerberos Only)</a> enabled, specifically, this user and therefore ALL services started with it (in this case the Service Account &ldquo;User&rdquo; has the SPN LDAP/WORKSTATION02 and therefore will run the LDAP service on that machine; the fact that this machine does NOT exist in my lab is irrelevant for the purpose of the exploitation) will be able to authenticate on behalf of the Client exclusively towards the SPN &ldquo;HTTP/SPIDERMAN&rdquo;, so to the HTTP service of the machine SPIDERMAN.</p>
<p>In fact, inspecting via ADUC the &ldquo;Delegation&rdquo; tab of the domain user &ldquo;MARVEL\userz&rdquo; we will find this configuration.</p>
 <span id=81>

        <img src="/demystify_kerberos_delegation_attacks/83.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
</ol>
<ul>
<li><strong>(2 &amp; 3) For simplicity, we do not show points 2 (Compromise of the Service Account MARVEL\userz) and 3 (the attacker creates a Computer Account within the domain, in this example we will use the EvilComputer$ user created <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only-computer---windows">previously</a>)</strong>
<span id=72></li>
</ul>
<ol start="4">
<li>
<p><strong>The attacker, impersonating the user &ldquo;MARVEL\userz&rdquo; populates their &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; attribute with the value of the Computer Account &ldquo;EvilComputer$&rdquo; previously created, in this way the attacker has forced a malicious Self RBCD.</strong></p>

        <img src="/demystify_kerberos_delegation_attacks/84.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
<li>
<p><strong>The attacker now, having configured a malicious RBCD, so having populated the &ldquo;msDS-AllowedToActOnBehalfOfOtherIdentity&rdquo; attribute of the domain user &ldquo;MARVEL\userz&rdquo; with the value of the Computer Account &ldquo;EvilComputer$&rdquo;, can impersonate the latter to invoke the S4U2Self &amp; S4U2Proxy extensions (having at least 1 SPN configured allows them to do so) and thus obtain (<a href="/posts/demystify_kerberos_delegation_attacks/#72">thanks to the previously made malicious configuration - &ldquo;Self-RBCD&rdquo;</a>) a TGS Ticket belonging to a Domain Admin user valid to access ANY service (in this case exclusively the LDAP service on the machine WORKSTATION02 - <a href="/posts/demystify_kerberos_delegation_attacks/#79">which does not exist but in my home lab it doesn&rsquo;t care</a>) hosted by the Service Account &ldquo;MARVEL\userz&rdquo; (so the Service Account already compromised with Kerberos Only enabled), this TGS Ticket will <a href="/posts/demystify_kerberos_delegation_attacks/#80">subsequently</a> be used as an &ldquo;Additional-Ticket&rdquo; to invoke S4UProxy again.</strong></p>
<blockquote>
<p>Unlike the Abuse Protocol Transition context where the &ldquo;/msdsspn&rdquo; parameter was populated exclusively with the SPN present in the &ldquo;msds-allowedtodelegateto&rdquo; property, in the Abuse Kerberos Only context it must be populated with any SPN chosen by the attacker that has the domain user &ldquo;MARVEL\userz&rdquo; as the Service Account (since in our example the Service Account MARVEL\userz has exclusively the SPN string LDAP\Workstation02, it will be necessary to insert this value), all of this will work because the KDC will use the previously configured RBCD.</p></blockquote>

        <img src="/demystify_kerberos_delegation_attacks/85.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
</ol>
<span id=80>
<ol start="6">
<li>
<p><strong><a href="/posts/demystify_kerberos_delegation_attacks/#63">In summary</a>, similarly to an <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition">Abuse Protocol Transition</a>, the attacker now it&rsquo;s able to obtain a TGS Ticket (of a Domain Admin) valid to authenticate to the HTTP service hosted on the machine SPIDERMAN (so, to the computer for which the Service Account with Kerberos Only &ldquo;MARVEL\userz&rdquo; has permissions to access on behalf of the Client through the <a href="/posts/demystify_kerberos_delegation_attacks/#81">&ldquo;msds-allowedtodelegateto&rdquo; flag</a>), subsequently, in this scenario, the attacker will decide to <a href="/posts/demystify_kerberos_delegation_attacks/#4">modify</a> the HTTP service with the CIFS service, thus making the TGS Ticket valid for authentication to the SMB service.</strong></p>

        <img src="/demystify_kerberos_delegation_attacks/86.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
</ol>
<p>As you can notice, following the Rubeus command we will have cached in memory a TGS Ticket belonging to the user &ldquo;Administrator&rdquo; valid for the CIFS service of the machine SPIDERMAN, in fact, performing a Network Logon with &ldquo;PsExec&rdquo; the OS will retrieve the cached TGS Ticket and use it to perform the authentication; in this way the attacker has managed to authenticate with administrative permissions to the machine SPIDERMAN.</p>

    <img src="/demystify_kerberos_delegation_attacks/87.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="abuse-kerberos-only---detect--mitigation"><strong>Abuse Kerberos Only - Detect &amp; Mitigation</strong></h2>
<p><strong>Detect</strong></p>
<p>Same as indicated in <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl---detect--mitigation">Abuse RBCD via DACL - Detect &amp; Mitigation</a></p>
<p><strong>Mitigation</strong></p>
<p>Same as indicated in <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl---detect--mitigation">Abuse RBCD via DACL - Detect &amp; Mitigation</a></p>
<h2 id="outro"><strong>Outro</strong></h2>
<p>If you have made it into this hell, congratulations, you really deserve it! ​😁​</p>
<p>Although this is an extremely long post, i have detailed the most &ldquo;common&rdquo; attacks that Kerberos Delegation can offer, that said, now you have an extremely solid foundation to fall into the rabbit hole on your own, so, if you are so crazy to continue, start by looking at the articles listed in the references.</p>
<h2 id="references"><strong>References</strong></h2>
<ul>
<li><a href="https://hadess.io/pwning-the-domain-kerberos-delegation/">https://hadess.io/pwning-the-domain-kerberos-delegation/</a></li>
<li><a href="https://medium.com/@offsecdeer/user-based-unconstrained-delegation-and-spn-jacking-29b916d1ff25">https://medium.com/@offsecdeer/user-based-unconstrained-delegation-and-spn-jacking-29b916d1ff25</a></li>
<li><a href="https://medium.com/@offsecdeer/a-practical-guide-to-rbcd-exploitation-a3f1a47267d5">https://medium.com/@offsecdeer/a-practical-guide-to-rbcd-exploitation-a3f1a47267d5</a></li>
<li><a href="https://labs.lares.com/fear-kerberos-pt4/">https://labs.lares.com/fear-kerberos-pt4/</a></li>
<li><a href="https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html">https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html</a></li>
</ul>
]]></content></item><item><title>Demystify Kerberos Delegation</title><link>https://marcozufferli.com/posts/demystify_kerberos_delegation/</link><pubDate>Fri, 26 Sep 2025 14:50:00 +0200</pubDate><guid>https://marcozufferli.com/posts/demystify_kerberos_delegation/</guid><description>Explains unconstrained, constrained and resource-based delegation with configuration examples, failure modes and mitigation guidance.</description><content type="html"><![CDATA[<hr>
<h4 id="table-of-contents">Table of Contents:</h4>
<ul>
<li><a href="/posts/demystify_kerberos_delegation/#whats-kerberos-delegation">What&rsquo;s Kerberos Delegation</a></li>
<li><a href="/posts/demystify_kerberos_delegation/#unconstrained-delegation">Unconstrained Delegation</a></li>
<li><a href="/posts/demystify_kerberos_delegation/#behaviour-change-about-kerberos-delegation-on-modern-windows-system">Behaviour Change about Kerberos Delegation on Modern Windows System</a></li>
<li><a href="/posts/demystify_kerberos_delegation/#constrained-delegation">Constrained Delegation</a>
<ul>
<li><a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation (Kerberos only)</a></li>
<li><a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Constrained Delegation (Use any authentication Protocol) / Protocol Transition</a></li>
</ul>
</li>
<li><a href="/posts/demystify_kerberos_delegation/#resource-based-constrained-delegation-rbcd">Resource Based Constrained Delegation (RBCD)</a></li>
<li><a href="/posts/demystify_kerberos_delegation/#outro">Outro</a></li>
<li><a href="/posts/demystify_kerberos_delegation/#references">References</a></li>
</ul>
<hr>
<h1 id="kerberos-delegation"><strong>Kerberos Delegation</strong></h1>

    <img src="/demystify_kerberos_delegation/immagine.jpg"  class="center"  style="border-radius: 8px;"  />


<h2 id="reading-guide"><strong>Reading Guide</strong></h2>
<p>This first article &ldquo;Demystify Kerberos Delegation&rdquo; was written in synergy with &ldquo;<a href="/posts/demystify_kerberos_delegation_attacks/">Demystify Kerberos Delegation Attacks</a>&rdquo;, the first details the theory of Kerberos Delegation while the second the most common attacks that can be carried out on it.</p>
<p>Being both articles particularly long, you could either read them individually in their entirety or follow a legend that i will provide shortly to directly move from theory (<strong>T</strong>) to practice (<strong>P</strong>) in the fastest possible way, which is the way i personally suggest to you:</p>
<blockquote>
<p>If it’s your first time opening the other article, the browser may need a moment to load all images, so if the link doesn’t jump to the right section, just wait a bit and try again. 😊</p></blockquote>
<p><strong>Introduction:</strong></p>
<ol>
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#1000">What&rsquo;s Kerberos Delegation</a></li>
</ol>
<p><strong>Unconstrained Delegation &amp; Abuse:</strong></p>
<ol start="2">
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#unconstrained-delegation">Unconstrained Delegation</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer">Abuse Unconstrained Delegation</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer-1-method---windows">Abuse Unconstrained Delegation (Computer) (1 method) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation-computer-2-method---windows">Abuse Unconstrained Delegation (Computer) (2 method) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-unconstrained-delegation---detect--mitigation">Abuse Unconstrained Delegation - Detect &amp; Mitigation</a></li>
</ol>
<p><strong>Constrained Delegation (Protocol Transition) &amp; Abuse:</strong></p>
<ol start="7">
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#behaviour-change-about-kerberos-delegation-on-modern-windows-system">Behaviour Change about Kerberos Delegation on Modern Windows System</a></li>
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#constrained-delegation">Constrained Delegation</a></li>
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation (Kerberos only)</a></li>
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Constrained Delegation (Use any authentication Protocol) / Protocol Transition</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition">Abuse Protocol Transition</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-computer---windows">Abuse Protocol Transition (Computer) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-user---windows">Abuse Protocol Transition (User) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-computer---linux">Abuse Protocol Transition (Computer) - Linux</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition-user---linux">Abuse Protocol Transition (User) - Linux</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-protocol-transition---detect--mitigation">Abuse Protocol Transition - Detect &amp; Mitigation</a></li>
</ol>
<p><strong>Resource Based Constrained Delegation (RBCD) &amp; Abuse:</strong></p>
<ol start="17">
<li>[T] - <a href="/posts/demystify_kerberos_delegation/#resource-based-constrained-delegation-rbcd">Resource Based Constrained Delegation (RBCD)</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl">Abuse RBCD via DACL</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl-computer---windows">Abuse RBCD via DACL (Computer) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl-computer---linux">Abuse RBCD via DACL (Computer) - Linux</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-rbcd-via-dacl---detect--mitigation">Abuse RBCD via DACL - Detect &amp; Mitigation</a></li>
</ol>
<p><strong>Constrained Delegation (Kerberos Only) &amp; Abuse:</strong></p>
<ol start="22">
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only">Abuse Kerberos Only</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only-computer---windows">Abuse Kerberos Only (Computer) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only-user---windows">Abuse Kerberos Only (User) - Windows</a></li>
<li>[P] - <a href="/posts/demystify_kerberos_delegation_attacks/#abuse-kerberos-only---detect--mitigation">Abuse Kerberos Only - Detect &amp; Mitigation</a></li>
</ol>
<span id=1000>
<h2 id="what"><strong>What&rsquo;s Kerberos Delegation?</strong></h2>
<p>Before you begin, if you are not confident with Kerberos, i highly suggest you to start reading my other article called &ldquo;<a href="/posts/not_so_brief_overview_about_kerberos/">Not So Brief Overview about Kerberos</a>&rdquo;.</p>
<p>Let&rsquo;s assume a scenario where a domain user authenticates via Kerberos to a &ldquo;Front-End&rdquo; AP (service) such as a Web Application, which, to operate correctly, must interact with a &ldquo;Back-End&rdquo; AP (service) such as a Database or a File Server.</p>
<p>In this scenario, when the domain user authenticated via Kerberos performs a particular action on the Web Application, the Web Application will need to authenticate to the Database to retrieve some personal user data, instead of creating (if possible) an application user with extremely specific permissions for the Web Application to use for the Back-End service (in this case the Database), the issue would be resolved if the Web Application itself were able to authenticate via Kerberos to the &ldquo;Back-End&rdquo; service on behalf of the user; in this way, access could be granted exclusively and automatically to a specific portion of data; the Kerberos protocol allows this behavior and this is called Kerberos Delegation.</p>
<p>We know that the domain user &ldquo;ASTRO\Cosmo&rdquo; will present a TGS Ticket (<a href="/posts/not_so_brief_overview_about_kerberos/#37">KRB_AP_REP</a>) to authenticate to the Web Server, consequently, in a traditional Kerberos scenario, the Web Server CANNOT obtain a TGS Ticket on behalf of the domain user &ldquo;ASTRO\Cosmo&rdquo; to access the SQL Server service, because by design, the Web Server, not knowing the NT Hash (or a secrets) of the &ldquo;ASTRO\Cosmo&rdquo; account, CANNOT request a TGT (<a href="/posts/not_so_brief_overview_about_kerberos/#39">KRB_AS_REQ</a>) from the KDC on behalf of the user to then exchange it for a TGS Ticket specific to the SQL Server service.</p>
<blockquote>
<p>The traditional TGS Ticket that the Web Server receives from the &ldquo;ASTRO\Cosmo&rdquo; user is valid exclusively for the Web Server service (as it will contain the SPN HTTP/Web-Server and not a potential SPN SQL\SQLServer).</p></blockquote>
<p>Below is a diagram representing this situation:</p>

    <img src="/demystify_kerberos_delegation/1.png"  class="center"  style="border-radius: 8px;"  />


<p>The &ldquo;Kerberos Delegation&rdquo; feature alters the traditional Kerberos authentication flow to allow the Web Server to authenticate to the Database service on behalf of the domain user.</p>
<p>There are 3 types of Kerberos Delegation:</p>
<ul>
<li>Unconstrained Delegation</li>
<li>Constrained Delegation (1, 2)</li>
<li>Resource-Based Constrained (RBCD) Delegation</li>
</ul>
<p>I want to highlight that the Kerberos Delegation feature allows solving the &ldquo;<a href="https://techcommunity.microsoft.com/blog/askds/understanding-kerberos-double-hop/395463">Double Hop Problem</a>&rdquo;.</p>
<blockquote>
<p>In a internet-facing web services scenario, the user will generally NOT login via the Kerberos protocol to the Web Application, consequently the Web Application will necessarily need to authenticate to a potential Database using only an dedicated application user; furthermore, depending on the permissions and how it has been configured, the Web Application may have access to the database with administrative or limited permissions; in specific scenarios this could lead to issues.</p></blockquote>
<h2 id="unconstrained-delegation"><strong>Unconstrained Delegation</strong></h2>
<p>The oldest and most dangerous version of Kerberos Delegation is the &ldquo;Unconstrained Kerberos Delegation&rdquo;.</p>
<p>The &ldquo;Unconstrained Kerberos Delegation&rdquo;, in summary, alters the Kerberos protocol by making the Client send to the AP Front End a &ldquo;KRB_AP_REQ&rdquo; packet containing both the TGS Ticket (to access the same AP Front-End that receives this packet) and the TGT Ticket, in this way the &ldquo;Front-End&rdquo; AP will be able to use the domain user’s TGT Ticket to impersonate it in a further Kerberos authentication towards potentially ANY AP in the &ldquo;Back-End&rdquo;.</p>

    <img src="/demystify_kerberos_delegation/2.png"  class="center"  style="border-radius: 8px;"  />


<p>The KDC, in order to use the &ldquo;Unconstrained Kerberos Delegation&rdquo;, requires 2 prerequisites:</p>
<p><strong>1. Configure the &ldquo;Unconstrained Kerberos Delegation&rdquo; on the &ldquo;Front-End&rdquo; AP.</strong></p>
<p><span id =1>
    <img src="/demystify_kerberos_delegation/3.png"  class="center"  style="border-radius: 8px;"  />

</p>
<p>The &ldquo;Unconstrained Kerberos Delegation&rdquo; is configured via <a href="https://serveracademy.com/blog/active-directory-users-and-computers-aduc-installation-and-tutorial/">ADUC</a> by enabling the property &ldquo;Trust this computer for delegation to any service (Kerberos only)&rdquo; on the &ldquo;Computer&rdquo; object that acts as the &ldquo;Front-End&rdquo; AP; since this configuration is potentially dangerous, such action can only be performed by a Domain Admin account or an account with the &ldquo;<a href="https://harmj4.rssing.com/chan-30881824/article60.html">SeEnableDelegationPrivilege</a>&rdquo; permission.</p>
  <span id=244>
<blockquote>
<p>In reality, even an object of type &ldquo;user&rdquo; (domain account) can be configured with the Kerberos Unconstrained Delegation, in this way such domain account will be able to impersonate another domain account to authenticate against target APs (services), however, to do this it is necessary that such account has at least 1 SPN configured, in fact only in this specific case the &ldquo;Delegation&rdquo; tab will appear inside the property of the user object.
<span id=301>
<span id=25> This configuration sets in the &ldquo;UserAccountControl&rdquo; property of the object in question the flag &ldquo;TRUSTED_FOR_DELEGATION&rdquo; to &ldquo;TRUE&rdquo; / &ldquo;1&rdquo;.</p></blockquote>
<blockquote>
<p><span id=11>Every object of type &ldquo;User&rdquo; and type &ldquo;Computer&rdquo; has an attribute called &ldquo;<a href="https://activedirectorypro.com/useraccountcontrol-check-and-manage-attribute-value/">UserAccountControl</a>&rdquo;, this attribute is a value that represents the set of <a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-useraccountcontrol?redirectedfrom=MSDN">flags</a> (configurations) set on the object (the most common are DONT_REQUIRE_PREAUTH, NOT_DELEGATE, etc.), for example 514 indicates that the domain user is disabled.</p></blockquote>
<p>In our <a href="/posts/demystify_kerberos_delegation/#1">example</a> the Kerberos Delegation is configured on the Computer &ldquo;THEPUNISHER&rdquo; which will act as the &ldquo;Front-End&rdquo; AP, this modification is actually reflected on the related Computer Account since it is contained in the &ldquo;Computer&rdquo; object (therefore the Computer Account THEPUNISHER$ will have the flag &ldquo;TRUSTED_FOR_DELEGATION&rdquo; set to &ldquo;TRUE&rdquo; / &ldquo;1&rdquo;), this means that any service started by this computer with the Service Account THEPUNISHER$ (Computer Account) will have the Kerberos Unconstrained Delegation enabled (<a href="/posts/not_so_brief_overview_about_kerberos/#17">so, all services started with the Local Service account such as by default the CIFS service</a>).</p>
<p><span id=4>
    <img src="/demystify_kerberos_delegation/4.png"  class="center"  style="border-radius: 8px;"  />

</p>
<blockquote>
<p>By default ALL Domain Controllers have the Kerberos Unconstrained Delegation enabled.</p></blockquote>
<p><strong>2. Configure the domain user that performs Kerberos authentication to the &ldquo;Front-End&rdquo; AP as &ldquo;relayable&rdquo;.</strong></p>
<p>It is necessary that the domain user that performs Kerberos authentication to the &ldquo;Front-End&rdquo; AP does NOT have the &ldquo;NOT_DELEGATED&rdquo; flag set to &ldquo;TRUE&rdquo; / &ldquo;1&rdquo; in the &ldquo;UserAccountControl&rdquo; property; if it is, then that user is NOT delegable, by default ALL domain users do NOT have this flag enabled and are therefore relayable.</p>

      <img src="/demystify_kerberos_delegation/5.png"  class="center"  style="border-radius: 8px;"  />
  

<br>
<hr>
<br>
<p><strong>Below we see the flow of a Kerberos authentication with &ldquo;Unconstrained Delegation&rdquo; enabled:</strong></p>
<blockquote>
<p>To simplify the creation of the lab, even though this would hardly happen in reality, in the following screenshots the Front-End AP will be the CIFS service hosted on the THEPUNISHER computer (this service, having &ldquo;Local System&rdquo; as Service Account, <a href="/posts/not_so_brief_overview_about_kerberos/#17">in a Kerberos context the Service Account will be the Computer Account THEPUNISHER$</a>), in reality, usually, a Front-End AP could be a Web Application.</p></blockquote>

    <img src="/demystify_kerberos_delegation/6.png"  class="center"  style="border-radius: 8px;"  />


<blockquote>
<p>The &ldquo;KRB_AP_REP&rdquo; packet (<a href="/posts/demystify_kerberos_delegation/#9">&ldquo;AP Front-End&rdquo; -&gt; &ldquo;Client&rdquo;</a> &amp; &ldquo;<a href="/posts/demystify_kerberos_delegation/#10">AP Back-End&rdquo; -&gt; &ldquo;AP Front End</a>&rdquo;) required by the Mutual Authentication could be sent in different times based on the Windows machine version used inside the infrastructure, this is the reason why i have not putted them on the image.</p></blockquote>
<blockquote>
<p><span id=2> Integrity and authenticity verification operations that occur within traditional Kerberos authentication (sending &amp; analyzing the &ldquo;Authenticator&rdquo; along with the related &ldquo;Session Key&rdquo; used to encrypt &amp; decrypt parts of the packet) are also present with Unconstrained Delegation enabled, but in this case they will NOT be mentioned, because they have already been generally described <a href="/posts/not_so_brief_overview_about_kerberos/">previously</a> (for a complete analysis in the context of Unconstrained Delegation see <a href="https://www.youtube.com/watch?v=xDFRUYv1-eU&amp;t=326s">this guide</a>) and because it was preferred to instead emphasize the unique characteristics of Kerberos Unconstrained Delegation.</p></blockquote>
<blockquote>
<p><a href="/posts/not_so_brief_overview_about_kerberos/#40">As already mentioned previously</a>, below we will describe the traditional process where Kerberos with Unconstrained Delegation enabled is used, that is, from an Interactive Logon where a user enters their credentials within a WinLOGON GUI, and then subsequently uses Kerberos again in a Network Logon (roughly using cached credentials) to authenticate to a target service with Kerberos Unconstrained Delegation enabled; that said, in reality, the authentication process can also start in other types of authentications besides the traditional WinLOGON GUI (Interactive Logon).</p></blockquote>
<hr>
<br>
<p><strong>Introduction: Initially, the Client (after the domain user has entered their credentials for an Interactive Logon) makes a request for a TGT Ticket &amp; TGS Session Key (KRB_AS_REQ) to the KDC and it responds (KRB_AS_REP) providing the requested data (if positive, in summary, the Client grants access to the domain user).</strong></p>
<h3 id="1-krb_tgs_req-the-client-provides-its-own-tgt-ticket-to-the-kdc-to-request-the-tgs-ticket"><strong>1. KRB_TGS_REQ The Client provides its own TGT Ticket to the KDC to request the TGS Ticket.</strong></h3>
<p>Now that a domain user has already authenticated to a Client (using Kerberos) and already possesses the TGT with a TGS Session Key, if they need to perform a &ldquo;Network Logon&rdquo; the Kerberos protocol comes into play again, specifically the Client will use the TGT and the TGS Session Key to request another type of ticket called the TGS Ticket.</p>
<p>The Client presents to the KDC (no longer to the AS feature) a KRB_TGS_REQ which in summary contains:</p>

    <img src="/demystify_kerberos_delegation/7.png"  class="center"  style="border-radius: 8px;"  />


<ul>
<li>
<p><strong>Ticket TGT</strong>: The previously received TGT ticket (to exchange it for a TGS Ticket)</p>
</li>
<li>
<p><strong>SPN</strong>: The SPN related to / pointing to the service the Client needs to connect to via SSO is sent in plain-text, in this case it refers to the AP Front-End, such as the SPN &ldquo;HTTP/Charlotte.medin.local&rdquo; or &ldquo;CIFS/THEPUNISHER&rdquo;, in the first one the authentication will be to the HTTP service on the Hostname &ldquo;Charlotte.medin.local&rdquo; while in the second one to the CIFS service on the Hostname THEPUNISHER.</p>
</li>
</ul>
<h3 id="2-krb_tgs_rep-the-kdc-sends-the-tgs-ticket-to-the-client-but-specifying-that-the-requested-service-has-the-kerberos-unconstrained-delegation-enabled"><strong>2. KRB_TGS_REP: The KDC sends the TGS Ticket to the Client BUT specifying that the requested service has the Kerberos Unconstrained Delegation enabled.</strong></h3>
<p>The KDC receives the <a href="/posts/demystify_kerberos_delegation/#1-krb_tgs_req-the-client-provides-its-own-tgt-ticket-to-the-kdc-to-request-the-tgs-ticket">KRB_TGS_REQ</a> packet and after performing the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a> sees that the SPN contained within, in this example &ldquo;CIFS\THEPUNISHER&rdquo;, points to the CIFS service hosted on the computer THEPUNISHER which has as Service Account the &ldquo;Computer Account&rdquo; THEPUNISHER$ (<a href="/posts/not_so_brief_overview_about_kerberos/#17">in Kerberos context</a>), since this &ldquo;Computer Account&rdquo; has the <a href="/posts/demystify_kerberos_delegation/#4">TRUSTED_FOR_DELEGATION flag enabled</a>, it means the CIFS service on the computer THEPUNISHER has Kerberos Unconstrained Delegation, consequently the KDC responds to the Client with a &ldquo;KRB_TGS_REP&rdquo; containing, in summary:</p>

    <img src="/demystify_kerberos_delegation/8.png"  class="center"  style="border-radius: 8px;"  />


<ul>
<li><strong>Ticket TGS</strong>: The TGS Ticket for the AP &ldquo;Front-End&rdquo; (CIFS Service hosted on &ldquo;THEPUNISHER&rdquo;) BUT with the flag &ldquo;OK-AS-DELEGATE&rdquo; set to TRUE</li>
</ul>
<blockquote>
<p>The &ldquo;FORWARDABLE&rdquo; flag is also set to TRUE
<span id=6></p></blockquote>
<h3 id="3-krb_tgs_req-the-client-requests-a"><strong>3. KRB_TGS_REQ: The Client requests a &ldquo;Ticket TGT Forwarded&rdquo; from the KDC.</strong></h3>
<p>The Client receives the packet and after performing the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a> sees that the TGS Ticket received has the &ldquo;OK-AS-DELEGATE&rdquo; flag set to TRUE, this flag indicates to the Client that the service the domain user needs to access, namely the AP Front End, has Kerberos Unconstrained Delegation enabled, consequently the Client sends again a &ldquo;KRB_TGS_REQ&rdquo; containing, in summary:</p>

    <img src="/demystify_kerberos_delegation/9.png"  class="center"  style="border-radius: 8px;"  />


<ul>
<li>
<p><strong>Previously received TGT Ticket</strong>: The previously received TGT Ticket (to exchange it this time for a &ldquo;Forwarded TGT Ticket&rdquo;)</p>
</li>
<li>
<p><strong>Other Data</strong>: Since the Client knows that the AP Front End has &ldquo;Kerberos Unconstrained Delegation&rdquo; configured, it choose to requests a so-called &ldquo;Forwarded TGT Ticket&rdquo;, for this purpose inside this Kerberos packet the Client specifies:</p>
<ul>
<li>
<p>The SPN related to the Kerberos service (KDC) of the Domain Controller which is &ldquo;krbtgt/&lt;domain&gt;&rdquo; (analogous to what happens in a <a href="/posts/not_so_brief_overview_about_kerberos/#39">KRB_AS_REQ</a> but this time in a KRB_TGS_REQ)</p>
</li>
<li>
<p>The &ldquo;FORWARDED&rdquo; flag set to TRUE</p>
</li>
</ul>
</li>
</ul>
<span id=8>
<h3 id="4-krb_tgs_rep-the-kdc-sends-a"><strong>4. KRB_TGS_REP: The KDC sends a &ldquo;Ticket TGT Forwarded&rdquo; to the Client</strong></h3>
<p>The KDC, after performing the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, since it previously sent a <a href="/posts/demystify_kerberos_delegation/#2-krb_tgs_rep-the-kdc-sends-the-tgs-ticket-to-the-client-but-specifying-that-the-requested-service-has-the-kerberos-unconstrained-delegation-enabled">KRB_TGS_REP</a> specifying that the service requested by the Client supports Kerberos Unconstrained Delegation, verifies if within the new <a href="/posts/demystify_kerberos_delegation/#6">KRB_TGS_REQ</a> received the &ldquo;FORWARDED&rdquo; flag is set to TRUE, if positive, the KDC responds to the Client with a &ldquo;KRB_TGS_REP&rdquo; containing, in summary:</p>

    <img src="/demystify_kerberos_delegation/10.png"  class="center"  style="border-radius: 8px;"  />


<ul>
<li><strong>The &ldquo;Forwarded TGT Ticket&rdquo;</strong>: The KDC sends to the Client a so-called &ldquo;Forwarded TGT Ticket&rdquo;, that is a TGT Ticket with the &ldquo;FORWARDED&rdquo; flag set to True (which contains like always the PAC of the Client&rsquo;s domain user).</li>
</ul>
<blockquote>
<p>I want to highlight that the KDC sent a &ldquo;Forwarded TGT Ticket&rdquo; within the encrypted part of a KRB_TGS_REP, in a traditional Kerberos authentication the KDC would issue a TGT Ticket exclusively in a <a href="/posts/not_so_brief_overview_about_kerberos/#9">KRB_AS_REP</a>.</p></blockquote>
<span id=7>
<h3 id="5-krb_ap_req-the-client-attempts-to-access-the-front-end-ap-by-providing-its-own-tgs-ticket-but-also-sharing-the-so-called"><strong>5. KRB_AP_REQ: The Client attempts to access the Front-End AP by providing its own TGS Ticket BUT also sharing the so-called &ldquo;Ticket TGT Forwarded&rdquo;.</strong></h3>
<p>The Client, after the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, in summary, sends a &ldquo;KRB_AP_REQ&rdquo; packet to the AP Front-End (in this case to the CIFS service hosted on the computer THEPUNISHER) containing:</p>

    <img src="/demystify_kerberos_delegation/11.png"  class="center"  style="border-radius: 8px;"  />


<ul>
<li>
<p><strong>Ticket TGS</strong>: A TGS Ticket that points via SPN to the AP Front End (in this example CIFS\THEPUNISHER)</p>
</li>
<li>
<p><strong>Forwarded TGT Ticket</strong>: The &ldquo;Forwarded TGT Ticket&rdquo; that the Client received in the previous &ldquo;<a href="/posts/demystify_kerberos_delegation/#8">KRB_TGS_REP&rdquo;</a>.</p>
</li>
</ul>
<blockquote>
<p>I want to highlight that the &ldquo;Forwarded TGT Ticket&rdquo; sent is contained within the &ldquo;authenticator&rdquo; field of the &ldquo;TGS Ticket&rdquo;.</p></blockquote>
<hr>
<p><strong>So, what happens now?</strong></p>
<p>The AP Front End, now having received the <a href="/posts/demystify_kerberos_delegation/#7">KRB_AP_REQ</a> packet, in summary, after the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, performs the following actions:</p>
<ol>
<li>The AP Front End will allow (<a href="/posts/not_so_brief_overview_about_kerberos/#3">if the AUTHORIZATION phase goes correctly</a>) the Client access to the requested service (in this case the CIFS service hosted on the computer THEPUNISHER), subsequently, depending on the requested service and if mutual authentication is required by the Client, the AP Front End will send a KRB_AP_REP to the Client.</li>
</ol>
<blockquote>
<p><span id=9> In my home lab the KRB_AP_REP packet was sent in this scenario, <a href="https://www.youtube.com/watch?v=xDFRUYv1-eU&amp;t=326s">in this other case</a>, however, the KRB_AP_REP packet was delivered to the Client only at the end of the entire process.</p></blockquote>
<ol start="2">
<li>The AP Front End will now extract the &ldquo;Forwarded TGT Ticket&rdquo; contained within the TGS Ticket and cache it locally to potentially impersonate the Client in future interactions.</li>
</ol>
<hr>
<p><strong>If the AP Front End needs to authenticate to an AP Back End on behalf of the Client, the following actions will occur:</strong></p>
<h3 id="6-krb_tgs_req-the-front-end-ap-provides-the-clients"><strong>6. KRB_TGS_REQ: The Front-End AP provides the Client’s &ldquo;Ticket TGT Forwarded&rdquo; to the KDC to request a TGS Ticket.</strong></h3>
<p>Occasionally, when the AP Front End will need to authenticate to the AP Back End on behalf of the Client, the AP Front End will send to the KDC a &ldquo;KRB_TGS_REQ&rdquo; packet built <a href="/posts/demystify_kerberos_delegation/#1-krb_tgs_req-the-client-provides-its-own-tgt-ticket-to-the-kdc-to-request-the-tgs-ticket">as already indicated previously</a>, with the only difference that the Client’s &ldquo;Ticket TGT Forwarded&rdquo; will be shared instead (it contains the domain user’s PAC), in this way the AP Front End will be able to obtain a valid TGS Ticket to authenticate to the AP in the Back-End on behalf of the Client.</p>
<h3 id="7-krb_tgs_rep-the-kdc-sends-the-tgs-ticket-to-the-front-end-ap"><strong>7. KRB_TGS_REP: The KDC sends the TGS Ticket to the Front-End AP.</strong></h3>
<p>The KDC, in summary, after the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, will provide the AP Front End with a TGS Ticket specific for the AP in the Back End.</p>
<blockquote>
<p><a href="/posts/not_so_brief_overview_about_kerberos/#42">As already said</a>, the PAC of the TGS Ticket is a copy of the PAC contained in the provided TGT Ticket, consequently the TGS Ticket that the KDC will provide to the AP Front End will still belong to the Client.</p></blockquote>
<h3 id="8-krb_ap_req-the-ap-front-end-presents-the-tgs-ticket-to-the-ap-back-end-to-authenticate-on-behalf-of-the-client"><strong>8. KRB_AP_REQ: The AP Front End presents the TGS Ticket to the AP Back End to authenticate on behalf of the Client.</strong></h3>
<p>The AP Front End will send a &ldquo;KRB_AP_REQ&rdquo; packet to the AP Back End, authenticating by essentially sharing the previously received TGS Ticket, since this TGS Ticket belongs to the Client (it contains the domain user’s PAC), the AP Front End will authenticate to the AP Back End on behalf of the Client.</p>
<p>Finally, if the AP Front End requests mutual authentication, the AP Back End will reply to the AP Front End with a &ldquo;KRB_AP_REP&rdquo;.</p>
<blockquote>
<p><span id=10> This is what happens in my home lab, <a href="https://www.youtube.com/watch?t=326&amp;v=xDFRUYv1-eU&amp;feature=youtu.be">in this other case</a> instead, the &ldquo;KRB_AP_REP&rdquo; packet is first sent from the AP Back End to the AP Front End and then <a href="/posts/demystify_kerberos_delegation/#9">as already told</a> another &ldquo;KRB_AP_REP&rdquo; from the AP Front End to the Client.</p></blockquote>
<h2 id="behaviour-change-about-kerberos-delegation-on-modern-windows-system"><strong>Behaviour Change about Kerberos Delegation on Modern Windows System.</strong></h2>
<p>Microsoft has several bad habits: the first is continuously changing the names of their products (it&rsquo;s a serius issue 😭​), while the second is modifying the logic of some of its widely used features, including Kerberos Delegation, without notifying it to anyone (it&rsquo;s done intentionally).</p>
<p>The first time i approached the topic of Kerberos Delegation, this was a problem because analyzing the traffic of the &ldquo;Constrained Delegation&rdquo; &amp; &ldquo;RBCD&rdquo;, the concepts i was studying online did not match; for this reason, I asked to Elad Shamir, the author of the <a href="https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html">awesome article who discovered these attacks</a>, and he confirmed that Microsoft changed the behavior of delegation in 2021.</p>
<p>Since this article is for educational purposes, i decided to detail in the following sections both the Kerberos Delegation versions BEFORE-change and POST-change, highlighting at the key moments what modification was made; in this way, you will be able to orient yourself with the logic even when reading other guides on Kerberos Delegation.</p>
<p>Below, i&rsquo;ll detail what modification Microsoft made in 2021; for narrative reasons, i preferred to detail it before explaining the the &ldquo;Constrained Delegation&rdquo; &amp; &ldquo;RBCD&rdquo; flow.</p>
<p><strong>So, if you do not understand what is written below it&rsquo;s normal, you can skip it and come back later 😉​</strong>.</p>
<blockquote>
<p>I asked the permission to take the screenshot 😃​</p></blockquote>

    <img src="/demystify_kerberos_delegation/41.png"  class="center"  style="border-radius: 8px;"  />


<p>In 2021 Microsoft changed the conditions under which the KDC issues inside an S4USelf Response a TGS Ticket with the FORWARDABLE flag set to 1.</p>
<p>Instead of exclusively verifying the presence of the &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo; flag, the KDC will instead perform two checks:</p>
<ol>
<li>The KDC verifies if the Service Account of the AP Front End has the &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo; flag set</li>
<li>The KDC verifies if  the Service Account of the AP Front End has the &ldquo;msds-allowedtodelegateto&rdquo; property NOT empty (i.e., there are entries)</li>
</ol>
<span id=71>
If BOTH checks are positive (so the AP Front End is configured in the context of Constrained Delegation (Kerberos Only) - or - the Client's domain user has the "Not Delegate" flag - or - is a member of the "Protected Users Group") then the issued TGS Ticket will have the FORWARDABLE flag set to 0 (otherwise the FORWARDABLE flag will always be 1).
<p>This means that in a traditional &ldquo;Resource Based Constrained Delegation (RBCD) scenario&rdquo;, the flow in POST 2021 will be slightly different:</p>
<p>1. <span id=75> In a traditional RBCD scenario the AP Front End is NOT configured with Kerberos Delegation, consequently the AP Front End will receive in an S4USelf Response a <a href="/posts/demystify_kerberos_delegation/#70">TGS Ticket with the FORWARDABLE flag set to 1</a> (<a href="/posts/demystify_kerberos_delegation/#71">for the reason mentioned above</a>) (instead, before 2021 the FORWARDABLE flag was set to 0)</p>
<p>2. When the KDC receives the KRB_TGS_REQ (S4U2Proxy) packet from the AP Front, <a href="/posts/demystify_kerberos_delegation/#64">it will perform 2 checks <strong>sequentially</strong></a>:</p>
<ol>
<li>
<p>The KDC verifies if the TGS Ticket has the FORWARDABLE flag set to 1, in this case the result is POSITIVE (before 2021 this check would fail and here the KDC would switch to RBCD)</p>
</li>
<li>
<p>The KDC verifies if in the Service Account of the AP Front End there is the &ldquo;msds-allowedtodelegateto&rdquo; property containing the SPN of the requested AP Back End; in this case the result is NEGATIVE because the AP Front End does NOT have Kerberos Delegation enabled and for this reason it this property is NOT present, so the results is NEGATIVE  and switch here to RBCD.</p>
</li>
</ol>
<p><strong>In summary, although Microsoft has changed their internals, the same previously discovered Kerberos Delegation attacks will keep to shine!</strong></p>
<h2 id="constrained-delegation"><strong>Constrained Delegation</strong></h2>
<p>As we have seen, the &ldquo;Unconstrained Kerberos Delegation&rdquo; can be extremely dangerous since the AP Front End caches the Client’s TGT Ticket and can also impersonate the user towards ANY AP in the Back End, for this reason Microsoft developed a more restrictive (a.k.a &ldquo;Constrained&rdquo;) version of Kerberos Delegation called &ldquo;Constrained Delegation&rdquo;, specifically it supports 2 Kerberos extensions known as <a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/3bff5864-8135-400e-bdd9-33b552051d94">Service For User (S4U)</a>:</p>
<ol>
<li>
<p>Service for User to Proxy (S4U2Proxy): Allows the AP Front End to obtain a TGS Ticket on behalf of the Client in order to use it in an authentication to the AP in the Back End.</p>
</li>
<li>
<p>Service for User to Self (S4U2Self): Allows the AP Front End to obtain a TGS Ticket valid for itself on behalf of any Client, such Ticket can be used by the AP Front End as evidence that the Client has authenticated to it.</p>
</li>
</ol>
<p>By using these Kerberos extensions it is possible to restrict (Constrained) the functionality of Kerberos Delegation by ensuring that the AP Front End can authenticate on behalf of the Client exclusively to a predefined set of APs in the Back End, furthermore, to achieve this, the Client’s TGT Ticket is NOT required and therefore there is no risk of it being cached.</p>
<p>Below there is a diagram showing how the Constrained Delegation works:</p>

    <img src="/demystify_kerberos_delegation/12.png"  class="center"  style="border-radius: 8px;"  />


<p>It is possible to configure Constrained Delegation on the AP Front End in 2 different modes:</p>
<ul>
<li>
<p><strong>Trust this computer for delegation to specified service only (Kerberos only)</strong>: The AP Front End is able to impersonate the Client only if the Client logs into it via Kerberos (it uses the S4U2Proxy extension);this scenario is also called <strong>&ldquo;Kerberos Only&rdquo;</strong>.
<span id=100></p>
</li>
<li>
<p><strong>Trust this computer for delegation to specified service only (Use any authentication protocol)</strong>: The AP Front End is able to impersonate the Client if the Client logs into it with any type of protocol, such as NTLM (it uses the S4U2Self &amp; S4U2Proxy extensions); this scenario is also called <strong>&ldquo;Protocol Transition&rdquo;</strong>.</p>
</li>
</ul>
<p>To analyze with Wireshark ALL the flows that occur during this Constrained Delegation I would have had to create from scratch a lab composed of a Front End Service that accepts a Kerberos authentication and develop within it a logic that triggers an additional Kerberos authentication towards the Back-End Server, since I did not find a quick method on how to do this, the screenshots you will see in this section come from this <a href="https://www.youtube.com/watch?v=gzqq2r6cZjc&amp;t=2779s">awesome guide</a>.</p>
<h2 id="constrained-delegation-kerberos-only"><strong>Constrained Delegation (Kerberos only)</strong></h2>
<p>The KDC, in order to use the &ldquo;Constrained Delegation (Kerberos only)&rdquo;, requires 2 prerequisites:</p>
<p><strong>1. Configure the &ldquo;Constrained Delegation (Kerberos only)&rdquo; on the &ldquo;Front-End&rdquo; AP.</strong></p>
<span id=15>

    <img src="/demystify_kerberos_delegation/13.png"  class="center"  style="border-radius: 8px;"  />


<p>The &ldquo;Constrained Delegation (Kerberos only)&rdquo; is configured via <a href="https://serveracademy.com/blog/active-directory-users-and-computers-aduc-installation-and-tutorial/">ADUC</a> by enabling the property &ldquo;Trust this computer for delegation to specified service only (Kerberos only)&rdquo; on the &ldquo;Computer&rdquo; object that acts as the &ldquo;Front-End&rdquo; AP; since this configuration is potentially dangerous, such action can only be performed by a Domain Admin account or an account with the &ldquo;<a href="https://harmj4.rssing.com/chan-30881824/article60.html">SeEnableDelegationPrivilege</a>&rdquo; permission.</p>
<blockquote>
<p>In reality, even an object of type &ldquo;user&rdquo; (domain account) can be configured with the Kerberos Constrained Delegation (Kerberos only), in this way such domain account will be able to impersonate another domain account to authenticate against target APs (services), however, to do this it is necessary that such account has at least 1 SPN configured, in fact only in this specific case the &ldquo;Delegation&rdquo; tab will appear inside the property of the user object; specifically, the &ldquo;Kerberos Only&rdquo; flow described later will remain unchanged with the only difference that when referring to the Service Account &ldquo;Computer Account,&rdquo; the Service Account &ldquo;User&rdquo; will be used instead.</p></blockquote>
<p>Furthermore, it is mandatory to fill the section indicated just below; with it, the domain administrator is able to restrict (a.k.a constrain) which Back-End APs the Front-End AP can authenticate on behalf of the Client.</p>
<span id=298>
<p>This configuration sets in the <a href="/posts/demystify_kerberos_delegation/#11">UserAccountControl</a> property of the AP &ldquo;Front End&rdquo; object the flag &ldquo;msds-allowedtodelegateto&rdquo;, which contains in the form of SPNs all the &ldquo;Back End&rdquo; APs for which the &ldquo;Front End&rdquo; AP has permission to authenticate on behalf of the Client.</p>
<p>In our <a href="/posts/demystify_kerberos_delegation/#15">example</a>, the Kerberos Delegation is configured on the Computer &ldquo;WEB01&rdquo; which will act as the Front-End AP, this modification is actually reflected on the related Computer Account since it is contained in the &ldquo;Computer&rdquo; object, so the Computer Account &ldquo;WEB01$&rdquo; will have the &ldquo;msds-allowedtodelegateto&rdquo; property filled, this means that any service started by this computer with the Service Account WEB01$ (Computer Account) will have &ldquo;Kerberos Constrained Delegation (Kerberos Only)&rdquo; enabled (<a href="/posts/not_so_brief_overview_about_kerberos/#17">so, all services started with the Local Service account such as by default the CIFS service or HTTP like in this example</a>).
<span id=348>
<span id=25></p>

    <img src="/demystify_kerberos_delegation/14.png"  class="center"  style="border-radius: 8px;"  />


<p>In conclusion, all services started with the WEB01$ user, such as in this case the HTTP service (AP Front End), will have &ldquo;Constrained Delegation (Kerberos only)&rdquo; enabled; so, in this scenario, they will be able to authenticate on behalf of the Client exclusively on the CIFS service of the SQL01 computer (AP Back-End).</p>
<p><strong>2. Configure the domain user that performs Kerberos authentication to the &ldquo;Front-End&rdquo; AP as &ldquo;relayable&rdquo;.</strong></p>
<p>It is necessary that the domain user that performs Kerberos authentication to the &ldquo;Front-End&rdquo; AP does NOT have the &ldquo;NOT_DELEGATED&rdquo; flag set to &ldquo;TRUE&rdquo; / &ldquo;1&rdquo; in the &ldquo;UserAccountControl&rdquo; property; if it is, then that user is NOT delegable, by default ALL domain users do NOT have this flag enabled and are therefore relayable.</p>

      <img src="/demystify_kerberos_delegation/5.png"  class="center"  style="border-radius: 8px;"  />
  

<br>
<hr>
<br>
<p><strong>Below we see the flow of a Kerberos authentication with &ldquo;Constrained Delegation (Kerberos only)&rdquo; enabled:</strong></p>

    <img src="/demystify_kerberos_delegation/15.png"  class="center"  style="border-radius: 8px;"  />


<blockquote>
<p>The &ldquo;KRB_AP_REP&rdquo; packet (&quot;<a href="/posts/demystify_kerberos_delegation/#12">AP Front-End&quot; -&gt; &ldquo;Client&rdquo;</a>) &amp; &ldquo;AP Back-End&rdquo; -&gt; &ldquo;AP Front End&rdquo;) required by the Mutual Authentication could be sent in different times based on the Windows computer version used inside the infrastructure, with this flow i choose to put down the most common scenario.</p></blockquote>
<blockquote>
<p><span id=2> Integrity and authenticity verification operations that occur within traditional Kerberos authentication (sending &amp; analyzing the &ldquo;Authenticator&rdquo; along with the related &ldquo;Session Key&rdquo; used to encrypt &amp; decrypt parts of the packet) are also present with Unconstrained Delegation enabled, but in this case they will NOT be mentioned, because they have already been generally described <a href="/posts/not_so_brief_overview_about_kerberos/">previously</a> (for a complete analysis in the context of Unconstrained Delegation see <a href="https://www.youtube.com/watch?v=xDFRUYv1-eU&amp;t=326s">this guide</a>) and because it was preferred to instead emphasize the unique characteristics of Kerberos Unconstrained Delegation.</p></blockquote>
<blockquote>
<p><a href="/posts/not_so_brief_overview_about_kerberos/#40">As already mentioned previously</a>, below we will describe the traditional process where Kerberos with Unconstrained Delegation enabled is used, that is, from an Interactive Logon where a user enters their credentials within a WinLOGON GUI, and then subsequently uses Kerberos again in a Network Logon (roughly using cached credentials) to authenticate to a target service with Kerberos Unconstrained Delegation enabled; that said, in reality, the authentication process can also start in other types of authentications besides the traditional WinLOGON GUI (Interactive Logon).</p></blockquote>
<hr>
<br>
<p><strong>Introduction: Initially, the Client (after the domain user has entered their credentials for an Interactive Logon) makes a request for a TGT Ticket &amp; TGS Session Key (KRB_AS_REQ) to the KDC and it responds (KRB_AS_REP) providing the requested data (if positive, in summary, the Client grants access to the domain user).</strong></p>
<h3 id="1-krb_tgs_req-the-client-provides-its-tgt-ticket-to-the-kdc-to-request-the-tgs-ticket"><strong>1. KRB_TGS_REQ: The Client provides its TGT Ticket to the KDC to request the TGS Ticket.</strong></h3>
<p>Now that a domain user has already authenticated to a Client (using Kerberos) and already holds the TGT Ticket with a TGS Session Key, if there is a need to perform a &ldquo;Network Logon&rdquo; login, the Kerberos protocol comes into play again, specifically the Client will use the TGT Ticket and the TGS Session Key to request another type of ticket called the TGS Ticket.</p>
<p>The Client presents to the KDC (no longer to the AS functionality) a KRB_TGS_REQ which in summary contains:</p>
<ul>
<li>
<p><strong>The Client shares its previously received TGT Ticket</strong> (to exchange it for a TGS Ticket)</p>
</li>
<li>
<p><strong>SPN</strong>: The SPN related to / pointing to the service that the Client needs to connect to via SSO is sent in plain text, in this case it refers to the AP Front-End, such as the SPN &ldquo;HTTP/WEB01&rdquo;, that is, a request for authentication to the HTTP service present on the hostname &ldquo;WEB01&rdquo; is made.
<span id=23></p>
</li>
</ul>
<h3 id="2-krb_tgs_rep-the-kdc-sends-the-tgs-ticket-to-the-client"><strong>2. KRB_TGS_REP: The KDC sends the TGS Ticket to the Client.</strong></h3>
<p>The KDC receives the KRB_TGS_REQ packet and, after performing the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, sends a &ldquo;KRB_TGS_REP&rdquo; packet containing in summary:</p>
<ul>
<li><strong>The TGS Ticket for the &ldquo;Front End&rdquo; AP (HTTP Service hosted on &ldquo;WEB01&rdquo;)</strong></li>
</ul>
<h3 id="3-krb_ap_req-the-client-attempts-to-access-the-front-end-ap-by-providing-its-tgs-ticket"><strong>3. KRB_AP_REQ: The Client attempts to access the Front-End AP by providing its TGS Ticket</strong></h3>
<p>After the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, the Client, in summary, sends a &ldquo;KRB_AP_REQ&rdquo; packet to the Front-End AP (HTTP service) containing in summary:</p>
<ul>
<li><strong>Ticket TGS: Its own TGS Ticket (<a href="/posts/demystify_kerberos_delegation/#2-krb_tgs_rep-the-kdc-sends-the-tgs-ticket-to-the-client">previously received</a>)</strong></li>
</ul>
<h3 id="4-krb_ap_rep-optional-the-ap-front-end-http-will-allow-the-client-access-to-the-requested-service"><strong>4. KRB_AP_REP (Optional): The AP Front End (HTTP) will allow the Client access to the requested service:</strong></h3>
<p>The AP Front End, now that it has received the KRB_AP_REQ packet, in summary, after the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, will allow (<a href="/posts/not_so_brief_overview_about_kerberos/#3">if the AUTHORIZATION phase goes correctly</a>) the Client access to the requested service (in this case the HTTP service hosted on the WEB01 computer), subsequently, depending on the requested service and if mutual authentication is required by the Client, the AP Front End will send a &ldquo;KRB_AP_REP&rdquo; to the Client.</p>
<blockquote>
<p><span id=12> In my home lab the KRB_AP_REP packet was sent in this way, <a href="https://youtu.be/gzqq2r6cZjc?t=1309">in this other case</a>, however, the KRB_AP_REP packet was delivered to the Client only at the end of the entire process.</p></blockquote>
<hr>
<p><strong>If the AP Front End needs to authenticate to a Back End AP on behalf of the Client, the following actions will take place:</strong></p>
<hr>
<h3 id="5-krb_tgs_req-s4u2proxy--s4u2proxy-request"><strong>5. KRB_TGS_REQ (S4U2Proxy) / S4U2Proxy Request</strong></h3>
<p>Occasionally, when the AP Front End (so the HTTP service) needs to authenticate to the Back End AP (so the CIFS service) on behalf of the Client, the AP Front End will send to the KDC a &ldquo;KRB_TGS_REQ (S4U2Proxy)&rdquo; packet containing, in summary:</p>
<ul>
<li>
<p><strong>The AP Front End shares its own TGT Ticket</strong>:</p>
<p>Every computer joined in a domain, during its startup, will perform a Kerberos authentication using its corresponding Computer Account; consequently the WEB01 computer will also have stored in memory the TGT Ticket of the WEB01$ account.</p>
<p>In this scenario, the AP Front End will send the TGT Ticket of its Computer Account.</p>

      <img src="/demystify_kerberos_delegation/16.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
</ul>
<span id=24>
<ul>
<li>
<p><strong>SPN of the Back-End service:</strong></p>
<p>The SPN related to / pointing to the Back-End service that the Front-End service needs to connect to on behalf of the Client is sent, in this case, it refers to the Back-End AP identified by the SPN &ldquo;CIFS/SQL01&rdquo;, so the CIFS service hosted on the &ldquo;SQL01&rdquo; computer.</p>

      <img src="/demystify_kerberos_delegation/17.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
</ul>
<span id=20>
<ul>
<li>
<p><strong>Client&rsquo;s TGS Ticket:</strong></p>
<p>The TGS Ticket that the Client used to access the AP Front End (HTTP service on the WEB01 computer) will be sent.</p>
<p>This TGS Ticket is contained within the &ldquo;Additional Ticket&rdquo; field:</p>

      <img src="/demystify_kerberos_delegation/18.png"  class="center"  style="border-radius: 8px;"  />
  

<p><span id=21> Additionally, it should be noted that the sent TGS Ticket will have the &ldquo;Forwardable&rdquo; flag set to &ldquo;1&rdquo;; by default, all TGS Tickets have this characteristic, that said, in this scenario this flag will be interpreted and therefore it is important to specify it.</p>

      <img src="/demystify_kerberos_delegation/19.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
</ul>
<span id=22>
<ul>
<li>
<p><strong>The flags &ldquo;Resource-Based Constrained-Delegation&rdquo; &amp; &ldquo;Constrained-Delegation&rdquo; both set to &ldquo;1&rdquo; / &ldquo;TRUE&rdquo;:</strong></p>
<p>The AP Front End, within the KRB_TGS_REQ packet, will set the flags &ldquo;Resource-Based Constrained-Delegation&rdquo; &amp; &ldquo;Constrained-Delegation&rdquo; both to &ldquo;1&rdquo; / &ldquo;TRUE&rdquo;; this is done because in case of a FallBack, so if the &ldquo;Constrained Delegation (Kerberos only)&rdquo; fails, the Delegation can proceed with &ldquo;Resource-Based Constrained Delegation (RBCD) flow&rdquo;.</p>
<p>
      <img src="/demystify_kerberos_delegation/20.png"  class="center"  style="border-radius: 8px;"  />
  

<br>

      <img src="/demystify_kerberos_delegation/21.png"  class="center"  style="border-radius: 8px;"  />
  
</p>
</li>
</ul>
<span id=333>
<h3 id="6-krb_"><strong>6. KRB_TGS_REP (S4U2Proxy) / S4U2Proxy Response</strong></h3>
<p>The KDC, after performing authenticity checks and analyzing the KRB_TGS_REQ (S4U2Proxy) packet received from the AP Front, will perform further verifications <strong>sequentially</strong>:
<span id=300></p>
<ol>
<li>The KDC verifies if the <a href="/posts/demystify_kerberos_delegation/#20">&ldquo;TGS Ticket&rdquo; used by the Client to access the AP Front End (HTTP/WEB01)</a> is inside in the received <a href="/posts/demystify_kerberos_delegation/#5-krb_tgs_req-s4u2proxy--s4uself-request">KRB_TGS_REQ (S4U2Proxy)</a> packet, which would provide to the KDC the evidence that the Client has indeed authenticated to the AP Front End (HTTP Service on the WEB01 machine) (and therefore that the AP Front End can potentially impersonate the Client); it also checks that this TGS Ticket has the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo;) (<a href="/posts/demystify_kerberos_delegation/#21">positive result in this case</a>)</li>
</ol>
<blockquote>
<p>As detailed by <a href="https://www.youtube.com/watch?t=2487&amp;v=gzqq2r6cZjc&amp;feature=youtu.be">Microsoft&rsquo;s wiki</a>, if the TGS Ticket does NOT have the <a href="/posts/demystify_kerberos_delegation/#21">&ldquo;FORWARDABLE&rdquo; flag</a> set &amp; <a href="/posts/demystify_kerberos_delegation/#22">if the RBDC flag was NOT configured in the KRB_TGS_REQ (S4U2Proxy)</a>, then the KDC would respond with an error (KRB_ERRBADOPTION); instead, if the RBDC flag is set (by default it is), the KDC will attempt to use RBCD Delegation.</p>
<p>In the typical scenario, like the used in our example, the TGS Ticket sent in the KRB_TGS_REQ (S4U2Proxy) will always have the FORWARDABLE flag TRUE, because it was received by a traditionally <a href="/posts/demystify_kerberos_delegation/#23">&ldquo;KRB_TGS_REP&rdquo;</a>, consequently Kerberos Constrained Delegation (Kerberos Only) practically NEVER  fails and so the fallback case where &ldquo;Resource Based Constrained Delegation (RBCD&rdquo;) would be used is extremely rare.</p></blockquote>
<ol start="2">
<li>The KDC, inspecting the <a href="/posts/demystify_kerberos_delegation/#24">SPN contained in the KRB_TGS_REQ (S4U2Proxy) packet</a>, will understand that the AP Front End (ex HTTP/WEB01) intends to authenticate to a specific AP Back-End (ex CIFS/SQL01) on behalf of the Client; consequently, the KDC retrieves the Service Account of the AP Front End (WEB01$) and checks if the SPN of the requested AP Back End (in this case CIFS/SQL01) is present in its &ldquo;msds-allowedtodelegateto&rdquo; property (<a href="/posts/demystify_kerberos_delegation/#25">positive result in this case</a>)</li>
</ol>
<p>If both verifications are positive, as in our case, then the KDC sends a KRB_TGS_REP (S4U2Proxy) packet to the AP Front End containing, in summary:</p>
<ul>
<li>
<p><strong>A TGS Ticket of the Client to access the AP Back-End</strong>:</p>
<p>The KDC then sends within a &ldquo;KRB_TGS_REP (S4U2Proxy)&rdquo; a TGS Ticket belonging to the Client (containing the PAC of the domain user who authenticated to the AP Front End - inside the image, in the field dedicated to the user name i just wrote a placeholder to avoid a screenshot madness) valid for the AP Back-End (CIFS/SQL01)</p>

      <img src="/demystify_kerberos_delegation/22.png"  class="center"  style="border-radius: 8px;"  />
  

<p>Furthermore, i want to highlight that the TGS Ticket sent will have the &ldquo;Forwardable&rdquo; flag set to &ldquo;1&rdquo;, by default this characteristic is present in ALL TGS Tickets; that said, in this scenario the flag will be interpreted and therefore it is important to clarify.</p>

      <img src="/demystify_kerberos_delegation/23.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
</ul>
<h3 id="7-krb_ap_req"><strong>7. KRB_AP_REQ:</strong></h3>
<p>The AP Front End (HTTP service), after the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, in summary, sends a &ldquo;KRB_AP_REQ&rdquo; packet to the AP Back-End (CIFS service) containing, in summary:</p>
<ul>
<li><strong>The previously received TGS Ticket</strong>: The previously received TGS Ticket, that is, the one belonging to the Client (containing the PAC of the domain user who authenticated to the AP Front End) and valid for the AP Back-End (CIFS/SQL01).</li>
</ul>
<h3 id="8-krb_ap_rep-optional"><strong>8. KRB_AP_REP (Optional)</strong></h3>
<p>The AP Back-End, now having received the KRB_AP_REQ packet from the AP Front-End, in summary, after the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a> (<a href="/posts/not_so_brief_overview_about_kerberos/#3">if the AUTHORIZATION phase goes correctly</a>, will allow access by the AP Front End to the requested service (in this case the CIFS service hosted on the SQL01 machine); subsequently, depending on the requested service and if mutual authentication is required by the AP Front End (ex HTTP service), the AP Back-End (ex CIFS service) will send a KRB_AP_REP to the AP Front End (ex HTTP service).</p>
<blockquote>
<p>This is what happens in my home lab; <a href="https://www.youtube.com/watch?t=1309&amp;v=gzqq2r6cZjc&amp;feature=youtu.be">in this case</a>, however, the &ldquo;KRB_AP_REP&rdquo; packet is sent first by the AP Back-End to the AP Front-End and then  (<a href="/posts/demystify_kerberos_delegation/#12">as already told</a>) another &ldquo;KRB_AP_REP&rdquo; is sent from the AP Front End to the Client.</p></blockquote>
<p><strong>Finaly</strong> the AP Front-End has successfully authenticated to the AP Back-End on behalf of the Client.</p>
<h2 id="constrained-delegation-use-any-authentication-protocol--protocol-transition"><strong>Constrained Delegation (Use any authentication Protocol) / Protocol Transition</strong></h2>
<p>In a &ldquo;<a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation (Kerberos Only)</a>&rdquo; the AP Front End (ex HTTP) can use the S4U2Proxy extension to obtain from the KDC the Client’s TGS Ticket (ex MARVEL\pparker) to access the AP Back End (ex CIFS); to do this, the AP Front End (ex HTTP) must share the TGS Ticket that the Client (ex MARVEL\pparker) used to authenticate to it, that said, if the AP Front End (ex HTTP) does NOT have such TGS Ticket because the Client authenticated using, for example, NTLM or Basic authentication, this method cannot be used, and for this reason the &ldquo;S4USelf&rdquo; extension was created.</p>
<p>In this scenario the AP Front End (ex HTTP) can invoke the S4U2Self extension, in other words, it requests from the KDC a TGS Ticket of a specific Client (ex MARVEL\pparker) valid exclusively for itself (ex HTTP), this can then be used by the AP Front End as &ldquo;evidence&rdquo; to subsequently invoke the S4U2Proxy extension; this scenario is called &ldquo;Constrained Delegation (Use any authentication protocol)&rdquo;.</p>
<p>The KDC, in order to use the &ldquo;Constrained Delegation (Kerberos only)&rdquo;, requires 2 prerequisites:</p>
<p><strong>1. Configure the &ldquo;Constrained Delegation (Use any authentication protocol)&rdquo; on the &ldquo;Front-End&rdquo; AP.</strong></p>
<span id=25>

    <img src="/demystify_kerberos_delegation/24.png"  class="center"  style="border-radius: 8px;"  />


<p>The &ldquo;Constrained Delegation (Use any authentication protocol)&rdquo; is configured via <a href="https://serveracademy.com/blog/active-directory-users-and-computers-aduc-installation-and-tutorial/">ADUC</a> by enabling the property &ldquo;Trust this computer for delegation to specified service only (Use any authentication protocol)&rdquo; on the &ldquo;Computer&rdquo; object that acts as the &ldquo;Front-End&rdquo; AP; since this configuration is potentially dangerous, such action can only be performed by a Domain Admin account or an account with the &ldquo;<a href="https://harmj4.rssing.com/chan-30881824/article60.html">SeEnableDelegationPrivilege</a>&rdquo; permission.</p>
  <span id=1001>
<blockquote>
<p>In reality, even an object of type &ldquo;user&rdquo; (domain account) can be configured with the &ldquo;Constrained Delegation (Use any authentication protocol)&rdquo;, in this way such domain account will be able to impersonate another domain account to authenticate against target APs (services), however, to do this it is necessary that such account has at least 1 SPN configured, in fact only in this specific case the &ldquo;Delegation&rdquo; tab will appear inside the property of the user object; specifically, the &ldquo;Kerberos Only&rdquo; flow described later will remain unchanged with the only difference that when referring to the Service Account &ldquo;Computer Account,&rdquo; the Service Account &ldquo;User&rdquo; will be used instead.</p></blockquote>
<p>Furthermore, it is mandatory to fill the section indicated just below; with it, the domain administrator is able to restrict (a.k.a constrain) which Back-End APs the Front-End AP can authenticate on behalf of the Client.</p>
<p>This configuration sets in the <a href="/posts/demystify_kerberos_delegation/#11">UserAccountControl</a> property of the AP &ldquo;Front End&rdquo; object:
<span id=102></p>
<ul>
<li>
<p>The &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo; flag (it is different from <a href="/posts/demystify_kerberos_delegation/#25">TRUSTED_FOR_DELEGATION of Unconstrained Delegation</a>)
<span id=101></p>
</li>
<li>
<p>The &ldquo;msds-allowedtodelegateto&rdquo; flag, which contains in the form of SPNs all the AP &ldquo;Back End&rdquo; services to which the AP &ldquo;Front End&rdquo; is allowed to authenticate on behalf of the Client;</p>
</li>
</ul>
<p>In our <a href="/posts/demystify_kerberos_delegation/#25">example</a>, the Kerberos Delegation is configured on the Computer &ldquo;WEB01&rdquo; which will act as the Front-End AP, this modification is actually reflected on the related Computer Account since it is contained in the &ldquo;Computer&rdquo; object, so the Computer Account &ldquo;WEB01$&rdquo; will have the &ldquo;msds-allowedtodelegateto&rdquo; &amp; &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo; property filled, this means that any service started by this computer with the Service Account WEB01$ (Computer Account) will have &ldquo;Constrained Delegation (Use any authentication protocol)&rdquo; enabled (<a href="/posts/not_so_brief_overview_about_kerberos/#17">so, all services started with the Local Service account such as by default the CIFS service or HTTP like in this example</a>).</p>
<span id=30>

      <img src="/demystify_kerberos_delegation/25.png"  class="center"  style="border-radius: 8px;"  />
  

<p>In conclusion, all services started with the WEB01$ user, such as in this case the HTTP service (AP Front End), will have &ldquo;Constrained Delegation (Use any authentication protocol)&rdquo; enabled; so, in this scenario, they will be able to authenticate on behalf of the Client exclusively on the CIFS service of the SQL01 computer (AP Back-End).</p>
<p><strong>2. Configure the domain user that performs Kerberos authentication to the &ldquo;Front-End&rdquo; AP as &ldquo;relayable&rdquo;.</strong></p>
<p>It is necessary that the domain user that performs Kerberos authentication to the &ldquo;Front-End&rdquo; AP does NOT have the &ldquo;NOT_DELEGATED&rdquo; flag set to &ldquo;TRUE&rdquo; / &ldquo;1&rdquo; in the &ldquo;UserAccountControl&rdquo; property; if it is, then that user is NOT delegable, by default ALL domain users do NOT have this flag enabled and are therefore relayable.</p>

      <img src="/demystify_kerberos_delegation/5.png"  class="center"  style="border-radius: 8px;"  />
  

<br>
<hr>
<br>
<p><strong>Below we see the flow of a Kerberos authentication with Constrained Delegation (Use any authentication protocol) enabled:</strong></p>

    <img src="/demystify_kerberos_delegation/26.png"  class="center"  style="border-radius: 8px;"  />


<blockquote>
<p>The &ldquo;KRB_AP_REP&rdquo; packet (<a href="/posts/demystify_kerberos_delegation/#9">&ldquo;AP Front-End&rdquo; -&gt; &ldquo;Client&rdquo;</a> &amp; &ldquo;<a href="/posts/demystify_kerberos_delegation/#10">AP Back-End&rdquo; -&gt; &ldquo;AP Front End</a>&rdquo;) required by the Mutual Authentication could be sent in different times based on the Windows machine version used inside the infrastructure, this is the reason why i have not putted them on the image.</p></blockquote>
<blockquote>
<p><span id=2> Integrity and authenticity verification operations that occur within traditional Kerberos authentication (sending &amp; analyzing the &ldquo;Authenticator&rdquo; along with the related &ldquo;Session Key&rdquo; used to encrypt &amp; decrypt parts of the packet) are also present with Unconstrained Delegation enabled, but in this case they will NOT be mentioned, because they have already been generally described <a href="/posts/not_so_brief_overview_about_kerberos/">previously</a> (for a complete analysis in the context of Unconstrained Delegation see <a href="https://www.youtube.com/watch?v=xDFRUYv1-eU&amp;t=326s">this guide</a>) and because it was preferred to instead emphasize the unique characteristics of Kerberos Unconstrained Delegation.</p></blockquote>
<blockquote>
<p><a href="/posts/not_so_brief_overview_about_kerberos/#40">As already mentioned previously</a>, below we will describe the traditional process where Kerberos with Unconstrained Delegation enabled is used, that is, from an Interactive Logon where a user enters their credentials within a WinLOGON GUI, and then subsequently uses Kerberos again in a Network Logon (roughly using cached credentials) to authenticate to a target service with Kerberos Unconstrained Delegation enabled; that said, in reality, the authentication process can also start in other types of authentications besides the traditional WinLOGON GUI (Interactive Logon).</p></blockquote>
<hr>
<br>
<h3 id="1-client-authenticates-to-an-ap-front-end-not-using-kerberos"><strong>1. Client authenticates to an AP Front End NOT using Kerberos.</strong></h3>
<p>A domain user authenticates to an AP Front End NOT using the Kerberos protocol (NTLM, Basic, etc).</p>
<p><strong>If the AP Front End needs to authenticate to an AP Back End on behalf of the Client, the following actions will take place:</strong></p>
<span id=302>
<h3 id="2-krb_tgs_req-s4u2self--s4u2self-request"><strong>2. KRB_TGS_REQ (S4U2Self) / S4U2Self Request.</strong></h3>
<p>Occasionally, when the AP Front End (ex HTTP service) needs to authenticate to the AP Back End (ex CIFS service) on behalf of the Client (ex CAPSULE.corp\vegeta), since the Client (ex CAPSULE.corp\vegeta) authenticated using, for example, the NTLM protocol, the AP Front End will NOT have the Client’s TGS Ticket and therefore will NOT be able to invoke S4U2Proxy as in the <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation (Kerberos Only)</a> scenario, consequently the AP Front End will use the &ldquo;S4U2Self&rdquo; extension, so it will send to the KDC a &ldquo;KRB_TGS_REQ&rdquo; packet containing, in summary:</p>
<blockquote>
<p>The S4U2Self extension, in summary, is used to obtain a TGS Ticket belonging to a specific Client (e.g., CAPSULE.corp\vegeta) valid only for the service itself, so for the AP Front End (e.g., HTTP).</p></blockquote>
<span id=109>
<ul>
<li>
<p><strong>The AP Front End shares its own TGT Ticket</strong></p>
<p>Every computer joined in a domain, during its startup, will perform a Kerberos authentication using its corresponding Computer Account; consequently the WEB01 computer will also have stored in memory the TGT Ticket of the WEB01$ account.</p>
<p>In this scenario the AP Front End will send the TGT Ticket of its Computer Account.</p>

      <img src="/demystify_kerberos_delegation/27.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
</ul>
<span id=31>
<ul>
<li>
<p><strong>SPN containing the Service Account of the AP Front End (WEB01$)</strong></p>
<p>The SPN field can accept different valid types of data <a href="https://swarm.ptsecurity.com/kerberoasting-without-spns/">including also the insertion of the Service Account instead of an SPN</a>, in this case the Service Account of the AP Front End will be specified (for example HTTP), in this way the TGS Ticket issued will be valid for the AP Front End, so for itself; in this case it is the Computer Account WEB01$.</p>

      <img src="/demystify_kerberos_delegation/28.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
<li>
<p><strong>The name of the domain user that the AP Front End wants to impersonate (e.g., CAPSULE.corp\vegeta).</strong></p>
<p>The AP Front End needs to have a TGS Ticket valid for itself that belongs to the Client (e.g., CAPSULE.corp\vegeta), consequently the AP Front End will specify the name of the domain user it wants to impersonate, so the user who has connected to the AP Front End (e.g., CAPSULE.corp\vegeta):
<span id=111></p>
<blockquote>
<p>This data is inserted in both the &ldquo;PA-S4U-X509-USER&rdquo; &amp; &ldquo;PA-FOR-USER&rdquo; structures (data structures added into Kerberos packet through the S4UProxy extension).</p></blockquote>
<p>
      <img src="/demystify_kerberos_delegation/29.png"  class="center"  style="border-radius: 8px;"  />
  

<br>

      <img src="/demystify_kerberos_delegation/30.png"  class="center"  style="border-radius: 8px;"  />
  
</p>
<p>In this way the TGS Ticket valid for the AP Front End will belong to the user specified here, so in this case to CAPSULE.corp\vegeta.</p>
<blockquote>
<p>By analyzing the packet on my home lab through S4U Request with Rubeus I do NOT find the &ldquo;PA-S4U-X509-USER&rdquo; data structure BUT I do find &ldquo;PA-FOR-USER&rdquo;.</p></blockquote>
</li>
</ul>
<span id=303>
<h3 id="3-krb_tgs_rep-s4u2self--s4u2self-response"><strong>3. KRB_TGS_REP (S4U2Self) / S4U2Self Response.</strong></h3>
<span id=112>
<p>After performing the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, the KDC retrieves from the <a href="/posts/demystify_kerberos_delegation/#2-krb_tgs_req-s4u2self--s4uself-request">KRB_TGS_REQ (S4U2Self)</a> packet the <a href="/posts/demystify_kerberos_delegation/#31">Service Account contained in the SPN field (e.g., WEB01$)</a>, then it will verify if this Service Account has the &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo; property enabled, <a href="/posts/demystify_kerberos_delegation/#30">if as in this case the result is positive</a> it will mean that the related service (e.g., HTTP) has the &ldquo;Constrained Delegation (Use any authentication protocol)&rdquo; enabled, consequently the KDC sends a KRB_TGS_REP (S4U2Self) packet to the AP Front End containing in summary:</p>
<ul>
<li>
<p><strong>A TGS Ticket of the Client (e.g., CAPSULE.corp\vegeta) to access the AP Front End (HTTP)</strong></p>
<p>The KDC therefore sends within a &ldquo;KRB_TGS_REP (S4U2Self)&rdquo; a TGS Ticket belonging to the Client (it contains the PAC of the domain user who authenticated via NTLM or Basic to the Front End service, in this case CAPSULE.corp\vegeta) valid specifically for the AP Front End (<a href="/posts/demystify_kerberos_delegation/#31">HTTP</a>).</p>
<blockquote>
<p>In this specific case, since the requested service was identified through the SPN field with the Service Account, the corresponding TGS ticket generated will contain the Service Account within the SPN field.</p></blockquote>

      <img src="/demystify_kerberos_delegation/31.png"  class="center"  style="border-radius: 8px;"  />
  

<p><span id=40> Furthermore, i want to highlight that the TGS Ticket sent will have the &ldquo;Forwardable&rdquo; flag set to &ldquo;1&rdquo;, by default all TGS Tickets have this characteristic, that said in this scenario such flag will be interpreted and therefore it is important to highlight it.</p>
<span id=77>

      <img src="/demystify_kerberos_delegation/32.png"  class="center"  style="border-radius: 8px;"  />
  

<p>This TGS Ticket belonging to the Client (e.g., CAPSULE.corp\vegeta) valid for the AP Front End (e.g., HTTP) will be used exclusively by the AP Front End as &ldquo;evidence&rdquo; to subsequently invoke the S4U2Proxy extension.</p>
<spain id=76>
<p><strong>A note related to <a href="/posts/demystify_kerberos_delegation/#resource-based-constrained-delegation-rbcd">RBCD that we&rsquo;ll analyze later</a></strong>: I want to highlight that <a href="https://www.youtube.com/watch?t=2326&amp;v=gzqq2r6cZjc&amp;feature=youtu.be">if</a> the Service Account specified in the SPN (WEB01$) does NOT have the &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo; flag enabled, then the KDC would still respond by sending a TGS Ticket belonging to the Client (vegeta) valid for the AP Front End (HTTP) BUT it would NOT have the &ldquo;forwardable&rdquo; flag set to &ldquo;1&rdquo;.</p>
</li>
</ul>
<span id=40>
<span id=50>
<blockquote>
<p><strong>POST 2021:</strong></p>
<p><strong>A note related to <a href="/posts/demystify_kerberos_delegation/#resource-based-constrained-delegation-rbcd">RBCD that we&rsquo;ll analyze later</a></strong>: <a href="/posts/demystify_kerberos_delegation/#75">As previusly said</a>, in POST 2021 scenario if the Service Account specified in the SPN (WEB01$) does NOT have the &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo; flag enabled the KDC will still issue a TGS Ticket with the FORWARDABLE flag set to 1.</p></blockquote>
<span id=118>
<h3 id="4-krb_tgs_req-s4u2proxy--s4u2proxy-request"><strong>4. KRB_TGS_REQ (S4U2Proxy) / S4U2Proxy Request</strong></h3>
<p>Now that the AP Front End has a TGS Ticket to use as &ldquo;evidence&rdquo; to prove that the Client (ex CAPSULE.corp\vegeta) has authenticated to it (HTTP) (even though in reality it authenticated NOT using Kerberos) it can invoke a traditional &ldquo;S4UProxy&rdquo;, so, <a href="/posts/demystify_kerberos_delegation/#5-krb_tgs_req-s4u2proxy--s4uself-request">as previously seen</a>, the AP Front End will send to the KDC a &ldquo;KRB_TGS_REQ (S4U2Proxy)&rdquo; packet containing, in summary:</p>
<ul>
<li>
<p><strong>The AP Front End shares its own TGT Ticket</strong></p>
<p>Every computer joined in a domain, during its startup, will perform a Kerberos authentication using its corresponding Computer Account; consequently the WEB01 computer will also have stored in memory the TGT Ticket of the WEB01$ account.</p>
<p>In this scenario the AP Front End will send the TGT Ticket of its Computer Account.</p>

      <img src="/demystify_kerberos_delegation/33.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
<li>
<p><strong>SPN of the Back-End service</strong></p>
<p><span id=42> The SPN related to / pointing to the Back-End service that the Front-End service needs to connect to on behalf of the Client is sent in plain-text, in this case it refers to the AP Back-End identified by the SPN &ldquo;CIFS/SQL01&rdquo;, that is, the CIFS service present on the &ldquo;SQL01&rdquo; machine.</p>

      <img src="/demystify_kerberos_delegation/34.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
</ul>
<span id=37>
<ul>
<li>
<p><strong>Client&rsquo;s TGS Ticket (obtained via S4U2Self)</strong></p>
<p>The TGS Ticket that the AP Front End previously received from the KDC using the &ldquo;S4USelf&rdquo; extension will be sent; it&rsquo;s the evidence that the Client (ex CAPSULE.corp\vegeta) has successfully accessed the AP Front End (HTTP service on the WEB01 machine) (and that therefore the AP Front End can potentially impersonate the Client)</p>
<p>This TGS Ticket is contained within the &ldquo;Additional Ticket&rdquo; field:</p>

      <img src="/demystify_kerberos_delegation/35.png"  class="center"  style="border-radius: 8px;"  />
  

<p>Furthermore, since this Kerberos Ticket was obtained through the <a href="/posts/demystify_kerberos_delegation/#3-krb_tgs_rep-s4u2self--s4uself-response">S4USelf extension</a>, i want to highlight that in the SPN field, instead of actually pointing to the SPN of the AP Front End, so HTTP/WEB01, it points to the related Service Account, that is WEB01$.</p>

      <img src="/demystify_kerberos_delegation/36.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
<li>
<p><strong>The flags &ldquo;Resource-Based Constrained-Delegation&rdquo; &amp; &ldquo;Constrained-Delegation&rdquo; both set to &ldquo;1&rdquo; / &ldquo;TRUE&rdquo;:</strong></p>
<p>The AP Front End within the KRB_TGS_REQ packet will set the flags &ldquo;Resource-Based Constrained-Delegation&rdquo; &amp; &ldquo;Constrained-Delegation&rdquo; both to &ldquo;1&rdquo; / &ldquo;TRUE&rdquo;, this is done because in case of a FallBack, that is, if the &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo; fails, the Delegation can proceed with Resource Based Constrained Delegation - RBCD.</p>

      <img src="/demystify_kerberos_delegation/37.png"  class="center"  style="border-radius: 8px;"  />
  

<p>Furthermore, i want to highlight that the TGS Ticket sent will have the &ldquo;Forwardable&rdquo; flag set to &ldquo;1&rdquo;, by default this characteristic is present in ALL TGS Tickets; that said, in this scenario the flag will be interpreted and therefore it is important to clarify.</p>

      <img src="/demystify_kerberos_delegation/38.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
</ul>
<h3 id="5-krb_tgs_rep-s4u2proxy--s4u2proxy-response"><strong>5. KRB_TGS_REP (S4U2Proxy) / S4U2Proxy Response</strong></h3>
<p>The KDC, after performing the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, analyzing the <a href="/posts/demystify_kerberos_delegation/#4-krb_tgs_req-s4u2proxy--s4uproxy-request">KRB_TGS_REQ (S4U2Proxy)</a> packet received from the AP Front End, will perform further verifications <strong>sequentially</strong>:
<span id=51></p>
<ol>
<li>
<p>The KDC checks whether the <a href="/posts/demystify_kerberos_delegation/#37">&ldquo;TGS Ticket&rdquo;</a> used by the Client to access the AP Front End (HTTP/WEB01) is present in the received <a href="/posts/demystify_kerberos_delegation/#4-krb_tgs_req-s4u2proxy--s4uproxy-request">KRB_TGS_REQ (S4U2Proxy)</a> packet (in this example it was obtained via the S4USelf extension); this would provide evidence to the KDC that the Client has indeed authenticated to the AP Front End (HTTP service on the WEB01 machine) (and that therefore the AP Front End can potentially impersonate the Client); additionally, <a href="/posts/demystify_kerberos_delegation/#40">it is necessary that this TGS Ticket has the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo;</a> (<a href="/posts/demystify_kerberos_delegation/#40">positive outcome in this case</a>).</p>
</li>
<li>
<p>The KDC, <a href="/posts/demystify_kerberos_delegation/#42">inspecting the SPN contained in the KRB_TGS_REQ (S4U2Proxy) packet</a>, will understand that the AP Front End (ex HTTP/WEB01) wants to authenticate to a specific AP Back-End (ex CIFS/SQL01) on behalf of the Client; consequently, the KDC retrieves the Service Account of the AP Front End (WEB01$) and will verify whether the &ldquo;msds-allowedtodelegateto&rdquo; property contains the SPN of the requested AP Back End (in this case CIFS/SQL01) (<a href="/posts/demystify_kerberos_delegation/#30">positive outcome in this case</a>).</p>
</li>
</ol>
<p>Since the 1 verification and the 2 verification are positive (The KDC performs the verification sequentially, so, for example, if 1nd step fails the KDC makes the decision on how to proceed immediately) as in our case, then the KDC sends a KRB_TGS_REP (S4U2Proxy) packet to the AP Front End containing, in summary:</p>
<span id=41>
<ul>
<li>
<p><strong>A Client TGS Ticket to access the AP Back-End</strong>:</p>
<p>The KDC then sends within a &ldquo;KRB_TGS_REP (S4U2Proxy)&rdquo; a TGS Ticket belonging to the Client (it contains the PAC of the domain user who authenticated to the AP Front End) valid for the AP Back-End (CIFS/SQL01)</p>

      <img src="/demystify_kerberos_delegation/39.png"  class="center"  style="border-radius: 8px;"  />
  

<p>Furthermore, i want to highlight that the TGS Ticket sent will have the &ldquo;Forwardable&rdquo; flag set to &ldquo;1&rdquo;; by default, this feature is present in ALL TGS Tickets, that said in this scenario this flag will be interpreted and therefore it is important to specify it.</p>

        <img src="/demystify_kerberos_delegation/40.png"  class="center"  style="border-radius: 8px;"  />
    

</li>
</ul>
<h3 id="6-krb_ap_req"><strong>6. KRB_AP_REQ:</strong></h3>
<p>The AP Front End (HTTP service) after the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, in summary, sends a &ldquo;KRB_AP_REQ&rdquo; packet to the AP Back-End (CIFS service) containing, in summary:</p>
<ul>
<li>The <a href="/posts/demystify_kerberos_delegation/#41">previously received TGS Ticket</a>, that is, the one belonging to the Client (it contains the PAC of the domain user who authenticated to the AP Front End) and is valid for the AP Back-End (CIFS/SQL01).</li>
</ul>
<h3 id="7-krb_ap_rep-optional"><strong>7. KRB_AP_REP (Optional)</strong></h3>
<p>The AP Back-End, now that it has received the <a href="/posts/demystify_kerberos_delegation/#6-krb_ap_req">KRB_AP_REQ packet</a> from the AP Front-End, in summary, after the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, will allow the AP Front End access to the requested service (in this case the CIFS service hosted on the SQL01 machine); subsequently, depending on the requested service and if mutual authentication is required by the AP Front End (ex HTTP service), the AP Back-End (ex CIFS service) will send a KRB_AP_REP to the AP Front End (ex HTTP service).</p>
<blockquote>
<p>I This is what happens in my home lab,; <a href="https://www.youtube.com/watch?t=2735&amp;v=gzqq2r6cZjc&amp;feature=youtu.be">in another case</a>, instead, the &ldquo;KRB_AP_REP&rdquo; packet is first sent from the AP Back End to the AP Front End and then another &ldquo;KRB_AP_REP&rdquo; from the AP Front End to the Client.</p></blockquote>
<p><strong>Finaly</strong> the AP Front-End successfully authenticated to the AP Back-End on behalf of the Client.</p>
<h2 id="resource-based-constrained-delegation-rbcd"><strong>Resource Based Constrained Delegation (RBCD)</strong></h2>
<p>Resource Based Constrained Delegation&quot; (RBCD) operates in a similar way to the classic &ldquo;Constrained Delegation&rdquo; (&ldquo;Kerberos Only&rdquo; &amp; &ldquo;Use Any Authentication Protocol&rdquo;) with the difference that the configuration is done directly on the AP Back-End (ex CIFS) rather than on the AP Front End (ex HTTP); in this way the responsibility is shifted to the Back-End service.</p>
<p>Below is a diagram that explains how &ldquo;Constrained Delegation&rdquo; can be defined as a so-called &ldquo;Outgoing&rdquo; Constrained Delegation, because the configuration is done on the AP Front End, while &ldquo;RBCD&rdquo; can instead be defined as a so-called &ldquo;Incoming&rdquo; Constrained Delegation, since the configuration is instead done on the AP Back-End.</p>

    <img src="/demystify_kerberos_delegation/42.png"  class="center"  style="border-radius: 8px;"  />


<p><strong>The KDC, in order to use RBCD, requires 2 prerequisites:</strong></p>
<ol>
<li><strong>Configure RBCD on the AP Back-End</strong>
<span id=60></li>
</ol>
<p>Since RBCD is executed by the KDC exclusively in case of a FallBack from a Constrained Delegation (&quot;<a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Kerberos Only</a>&quot; or &ldquo;<a href="/posts/demystify_kerberos_delegation/#constrained-delegation-use-any-authentication-protocol--protocol-transition">Use Any Authentication Protocol</a>&rdquo;), the configuration consists ALSO of NOT configuring &ldquo;Constrained Delegation&rdquo; on the &ldquo;Computer&rdquo; object acting as AP Front End:</p>
<span id=49>

    <img src="/demystify_kerberos_delegation/43.png"  class="center"  style="border-radius: 8px;"  />


<p>So, now configure the RBDC by setting the attribute &ldquo;<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-msds-allowedtoactonbehalfofotheridentity?ref=labs.lares.com">ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity</a>&rdquo; on the &ldquo;Computer&rdquo; object that acts as the AP Back End and entering as value the AP Front End (or rather its respective &ldquo;Computer Account&rdquo;) which is authorized to authenticate on behalf of a Client; this configuration can be executed exclusively using <a href="https://www.microsoft.com/en-us/download/details.aspx?id=45520">RSAT</a>, specifically with the command &ldquo;Set-ADComputer&rdquo;:
<span id=63></p>
<p>PS C:&gt; Set-ADComputer -Identity &lt;ComputerAccount_APBackEnd&gt; -PrincipalsAllowedToDelegateToAccount &lt;ComputerAccount_APFrontEnd&gt;</p>
<span id=45>

    <img src="/demystify_kerberos_delegation/44.png"  class="center"  style="border-radius: 8px;"  />


<span id=123>
<p>To set the attribute &ldquo;ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity&rdquo; it is NOT necessary to have Domain Admin privileges as is required for the other Kerberos Delegations, instead, it is sufficient to have write rights (for ex GenericalAll, GenericWrite and so on) on that property.</p>
<span id=130>
<blockquote>
<p>In reality, also an object of type &ldquo;User&rdquo; (domain account) can be configured with the Kerberos Resource Based Constrained Delegation (RBCD), however, to do so it is necessary that such account has at least 1 SPN configured.</p></blockquote>
<p>In our <a href="/posts/demystify_kerberos_delegation/#45">example</a> the RBCD is configured on the Computer &ldquo;SQL01&rdquo; which will act as AP Back End, i want to highlight that this modification is actually reflected on the respective Computer Account since it is contained in the &ldquo;Computer&rdquo; object, so the Computer Account &ldquo;SQL01$&rdquo; will have the property &ldquo;<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-msds-allowedtoactonbehalfofotheridentity?ref=labs.lares.com">ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity</a>&rdquo;, this means that any service started from that machine with the Service Account SQL01$ (Computer Account) will have the RBCD enabled (<a href="/posts/not_so_brief_overview_about_kerberos/#17">so, all services started with the Local Service account such as by default the CIFS service</a>); in this example, the AP Back End (SQL01$) will authorize exclusively the AP Front End (WEB01$) to authenticate on behalf of the Client.</p>
<p>The value of the attribute ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity will be graphically represented via ADUC in numerical form:</p>

    <img src="/demystify_kerberos_delegation/45.png"  class="center"  style="border-radius: 8px;"  />


<p>Finally, it is possible to inspect this attribute also via CLI using the commands shown in the screenshot, it can therefore be observed that the attribute &ldquo;<a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-msds-allowedtoactonbehalfofotheridentity?ref=labs.lares.com">ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity</a>&rdquo; of the Computer object SQL01 (similarly also the respective Computer Account SQL01$) contains the Computer object WEB01 (or rather its respective computer account WEB01$)</p>

    <img src="/demystify_kerberos_delegation/46.png"  class="center"  style="border-radius: 8px;"  />


<p><strong>2. Configure the domain user that performs Kerberos authentication to the &ldquo;Front-End&rdquo; AP as &ldquo;relayable&rdquo;.</strong></p>
<p>It is necessary that the domain user that performs Kerberos authentication to the &ldquo;Front-End&rdquo; AP does NOT have the &ldquo;NOT_DELEGATED&rdquo; flag set to &ldquo;TRUE&rdquo; / &ldquo;1&rdquo; in the &ldquo;UserAccountControl&rdquo; property; if it is, then that user is NOT delegable, by default ALL domain users do NOT have this flag enabled and are therefore relayable.</p>

      <img src="/demystify_kerberos_delegation/5.png"  class="center"  style="border-radius: 8px;"  />
  

<p><strong>RBCD Flow</strong></p>
<p>The RBCD works similar to the classic &ldquo;Constrained Delegation&rdquo; (&ldquo;Kerberos Only&rdquo; &amp; &ldquo;Use Any Authentication Protocol&rdquo;) and it should be highlighted that <strong>it intervenes exclusively in case of FallBack</strong>, so when the &ldquo;Constrained Delegation&rdquo; fails, since this scenario is more common when a &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo; is initialized, we will analyze a Resource Based Constrained Delegation (RBCD) flow starting from a &ldquo;Constrained Delegation (Use any authentication Protocol)&rdquo; scenario.</p>
<blockquote>
<p>To analyze with Wireshark ALL the flows that occur during this RBCD, I would have had to create from scratch a laboratory composed of a Front End Service that accepts a Kerberos authentication and develop within it a logic that triggers a further Kerberos authentication towards the Back-End Server, since I did not find a quick method to do this, the screenshots you will see in this section come from this <a href="https://www.youtube.com/watch?v=vlKwCTvp5_w&amp;t=1246s">guide</a>.</p></blockquote>
<blockquote>
<p>Generally, all the integrity and authenticity verification operations that occur within traditional Kerberos authentication (sending &amp; analyzing the &ldquo;Authenticator&rdquo; along with the relevant &ldquo;Session Key&rdquo; used to encrypt &amp; decrypt parts of the packet) are also present with Kerberos Delegation enabled but in this case will NOT be mentioned, this is both because they have already been described  <a href="/posts/not_so_brief_overview_about_kerberos/">previously</a> and because it was preferred to instead emphasize the unique characteristics of RBCD.</p></blockquote>
<blockquote>
<p><a href="/posts/not_so_brief_overview_about_kerberos/#40">As already mentioned previously</a>, below we will describe the traditional process where Kerberos with RBCD is used, that is, from an Interactive Logon where a user enters their credentials within a WinLOGON GUI, and then subsequently uses Kerberos again in a Network Logon (roughly using cached credentials) to authenticate to a target service with Kerberos Unconstrained Delegation enabled; that said, in reality, the authentication process can also start in other types of authentications besides the traditional WinLOGON GUI (Interactive Logon).</p></blockquote>
<h3 id="1-client-authenticates-to-an-ap-front-end-not-using-kerberos-1"><strong>1. Client authenticates to an AP Front End NOT using Kerberos.</strong></h3>
<p>A domain account authenticates NOT using the Kerberos protocol (NTLM, Basic, etc.) to an AP Front End.</p>
<p>If the AP Front End needs to authenticate to an AP Back End on behalf of the Client, the following actions will occur:
<span id=47></p>
<h3 id="2-krb_tgs_req-s4u2self--s4u2self-request-1"><strong>2. KRB_TGS_REQ (S4U2Self) / S4U2Self Request</strong></h3>
<p>Occasionally, when the AP Front End (ex HTTP service) needs to authenticate to the AP Back End (ex CIFS service) on behalf of the Client (ex CAPSULE.corp\vegeta), since the Client (ex CAPSULE.corp\vegeta) authenticated using, for example, the NTLM protocol, the AP Front End will NOT have the Client&rsquo;s TGS Ticket and therefore CANNOT invoke S4U2Proxy as in the <a href="/posts/demystify_kerberos_delegation/#constrained-delegation-kerberos-only">Constrained Delegation (Kerberos Only) scenario</a>, consequently the AP Front End will resort to the &ldquo;S4U2Self&rdquo; extension, that is, it will send to the KDC a &ldquo;KRB_TGS_REQ&rdquo; packet containing, in summary,:</p>
<blockquote>
<p>The S4U2Self extension in summary serves to obtain a TGS Ticket belonging to a specific Client (ex CAPSULE.corp\vegeta) valid for the service itself, that is, to the AP Front End (ex HTTP)
<span id=231></p></blockquote>
<ul>
<li>
<p><strong>The AP Front End shares its own TGT Ticket</strong></p>
<p>Every domain machine during its startup will perform a Kerberos authentication using its respective Computer Account, consequently the WEB01 machine will also have stored in memory the TGT Ticket of the WEB01$ account.</p>
<p>In this scenario the AP Front End will send the TGT Ticket of its Computer Account.</p>
<p>
      <img src="/demystify_kerberos_delegation/47.png"  class="center"  style="border-radius: 8px;"  />
  

<span id=48></p>
</li>
<li>
<p><strong>SPN containing the Service Account of the AP Front End (WEB01$)</strong></p>
<p>As previously mentioned, the SPN field can validly accept different types of data, including the insertion of the Service Account instead of an SPN; in this case, the Service Account of the AP Front End (for ex HTTP) will be indicated, in this way the TGS Ticket issued will be valid for the AP Front End, that is, for itself; in this case it is the Computer Account WEB01$</p>

      <img src="/demystify_kerberos_delegation/48.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
<li>
<p><strong>The name of the domain account that the AP Front End wants to impersonate (ex CAPSULE.corp\vegeta).</strong></p>
<p>The AP Front End needs to have a TGS Ticket valid for itself that belongs to the Client (ex CAPSULE.corp\vegeta), consequently the AP Front End will specify the name of the domain account it wants to impersonate, that is, the account that connected to the AP Front End (ex CAPSULE.corp\vegeta):</p>
<span id=245>
<blockquote>
<p>This data is inserted in both structures &ldquo;PA-S4U-X509-USER&rdquo; &amp; &ldquo;PA-FOR-USER&rdquo; (added through the S4UProxy extension)</p></blockquote>

      <img src="/demystify_kerberos_delegation/49.png"  class="center"  style="border-radius: 8px;"  />
  

<br>

      <img src="/demystify_kerberos_delegation/50.png"  class="center"  style="border-radius: 8px;"  />
  

<p>In this way, the TGS Ticket valid for the AP Front End will belong to the account specified here, that is, CAPSULE.corp\vegeta.</p>
</li>
</ul>
<blockquote>
<p>By analyzing the packet on my home lab through S4U Request with Rubeus I do NOT find the &ldquo;PA-S4U-X509-USER&rdquo; data structure BUT I do find &ldquo;PA-FOR-USER&rdquo;.</p></blockquote>
<h3 id="3-krb_tgs_rep-s4u2self--s4u2self-response-1"><strong>3. KRB_TGS_REP (S4U2Self) / S4U2Self Response</strong></h3>
<span id=80>
<p>The KDC, after performing the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, retrieves within the <a href="/posts/demystify_kerberos_delegation/#47">KRB_TGS_REQ (S4U2Self)</a> packet the Service Account contained in the <a href="/posts/demystify_kerberos_delegation/#48">SPN field</a> (ex WEB01$), then it will verify if this Service Account has the property &ldquo;TRUSTED_TO_AUTH_FOR_DELEGATION&rdquo; enabled; since in this case the <a href="/posts/demystify_kerberos_delegation/#49">result will be negative</a> as only RBCD was configured, <a href="/posts/demystify_kerberos_delegation/#76">as previously mentioned</a>, the KDC will still issue a TGS Ticket belonging to the Client (vegeta) valid for the AP Front End (HTTP) BUT it will NOT have the &ldquo;forwardable&rdquo; flag set to 1.</p>
<span id=70>
<blockquote>
<p><strong>POST 2021</strong></p>
<p>As explained before (<a href="/posts/demystify_kerberos_delegation/#50">1</a> &amp; <a href="/posts/demystify_kerberos_delegation/#behaviour-change-about-kerberos-delegation-on-modern-windows-system">2</a>), in POST 2021 scenario, the KDC will still issue a TGS Ticket with the FORWARDABLE flag set to 1.</p></blockquote>
<p>Knowing this, therefore, the KDC sends a KRB_TGS_REP (S4U2Self) packet to the AP Front End containing, in summary:</p>
<ul>
<li>
<p><strong>A TGS Ticket of the Client (ex CAPSULE.corp\vegeta) to access the AP Front End (HTTP)</strong></p>
<p>The KDC therefore sends within a &ldquo;KRB_TGS_REP (S4U2Self)&rdquo; a TGS Ticket belonging to the Client (contains the PAC of the domain account that authenticated via NTLM or Basic to the Front End service, in this case CAPSULE.corp\vegeta) valid specifically for the AP Front End (HTTP).</p>

      <img src="/demystify_kerberos_delegation/49.png"  class="center"  style="border-radius: 8px;"  />
  

<span id=53>
<p><a href="/posts/demystify_kerberos_delegation/#80">As already said</a> the TGS Ticket issued will NOT have the &ldquo;forwardable&rdquo; flag set to 1.</p>

      <img src="/demystify_kerberos_delegation/52.png"  class="center"  style="border-radius: 8px;"  />
  

<p>This TGS Ticket belonging to the Client (ex CAPSULE.corp\vegeta) valid for the AP Front End (ex HTTP) will be used exclusively by the AP Front End as &ldquo;evidence&rdquo; to subsequently invoke the S4U2Proxy extension.</p>
</li>
</ul>
<spain id=56>
<h3 id="4-krb_tgs_req-s4u2proxy--s4u2proxy-request-1"><strong>4. KRB_TGS_REQ (S4U2Proxy) / S4U2Proxy Request</strong></h3>
<p>Now that the AP Front End has a TGS Ticket to use as &ldquo;evidence&rdquo; to prove that the Client (ex CAPSULE.corp\vegeta) has authenticated to it (HTTP) (even though in reality it authenticated NOT using Kerberos) it can invoke a traditional &ldquo;S4UProxy&rdquo;, so, as previously seen, the AP Front End will send to the KDC a &ldquo;KRB_TGS_REQ (S4U2Proxy)&rdquo; packet containing, in summary,:</p>
<ul>
<li>
<p><strong>The AP Front End shares its own TGT Ticket</strong></p>
<p>Every domain machine during its startup will perform a Kerberos authentication using its respective Computer Account, consequently the WEB01 machine will also have stored in memory the TGT Ticket of the WEB01$ account.</p>
<p>In this scenario the AP Front End will send the TGT Ticket of its Computer Account.</p>
<p>
      <img src="/demystify_kerberos_delegation/53.png"  class="center"  style="border-radius: 8px;"  />
  

<span id=59></p>
</li>
<li>
<p><strong>SPN of the Back-End service</strong></p>
<p>The SPN related to / pointing to the Back-End service that the Front-End service needs to connect to on behalf of the Client is sent in plain-text; in this case it refers to the AP Back-End identified by the SPN &ldquo;CIFS/SQL01&rdquo;, that is, the CIFS service present on the &ldquo;SQL01&rdquo; machine.</p>
<p>
        <img src="/demystify_kerberos_delegation/54.png"  class="center"  style="border-radius: 8px;"  />
    

<span id=57></p>
</li>
<li>
<p><strong>Client TGS Ticket (obtained via S4USelf)</strong></p>
<p>The TGS Ticket that the AP Front End previously received from the KDC using the &ldquo;S4USelf&rdquo; extension will be sent; it serves as evidence that the Client (ex CAPSULE.corp\vegeta) has successfully accessed the AP Front End (HTTP service on the WEB01 machine) (and therefore the AP Front End can potentially impersonate the Client).</p>
<p>This TGS Ticket is contained within the &ldquo;Additional Ticket&rdquo; field:</p>

      <img src="/demystify_kerberos_delegation/55.png"  class="center"  style="border-radius: 8px;"  />
  

<p>Furthermore, since this Kerberos Ticket was obtained via the S4USelf extension, it can be observed that in the SPN field, instead of actually pointing to the SPN of the AP Front End, that is HTTP/WEB01, it points to the respective Service Account, that is WEB01$.</p>
<p>
      <img src="/demystify_kerberos_delegation/56.png"  class="center"  style="border-radius: 8px;"  />
  

<span id=58></p>
<p>I want to highlight that <a href="/posts/demystify_kerberos_delegation/#53">this TGS Ticket does NOT have the &ldquo;FORWARDABLE&rdquo; flag set</a>.</p>
</li>
</ul>
<span id=61>
<ul>
<li>
<p><strong>The flags &ldquo;Resource-Based Constrained-Delegation&rdquo; &amp; &ldquo;Constrained-Delegation&rdquo; both set to &ldquo;1&rdquo; / &ldquo;TRUE&rdquo;:</strong></p>
<p>The AP Front End within the KRB_TGS_REQ packet will set the flags &ldquo;Resource-Based Constrained-Delegation&rdquo; &amp; &ldquo;Constrained-Delegation&rdquo; both to &ldquo;1&rdquo; / &ldquo;TRUE&rdquo;; this is done so that in case of FallBack, that is, if the &ldquo;Constrained Delegation (Kerberos only)&rdquo; fails, the Delegation can proceed with Resource Based Constrained Delegation - RBCD.</p>
<p>
      <img src="/demystify_kerberos_delegation/57.png"  class="center"  style="border-radius: 8px;"  />
  

<br>

      <img src="/demystify_kerberos_delegation/58.png"  class="center"  style="border-radius: 8px;"  />
  
</p>
</li>
</ul>
<span id=199>
<h3 id="5-krb_tgs_rep-s4u2proxy--s4u2proxy-response-1"><strong>5. KRB_TGS_REP (S4U2Proxy) / S4U2Proxy Response</strong></h3>
<span id=64>
<p>The KDC, after performing the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, analyzing the <a href="/posts/demystify_kerberos_delegation/#56">KRB_TGS_REQ (S4U2Proxy)</a> packet received from the AP Front End, will carry out further verifications <strong>sequentially</strong>:</p>
<span id=90>
<ol>
<li>
<p>The KDC verifies if the <a href="/posts/demystify_kerberos_delegation/#57">&ldquo;TGS Ticket&rdquo;</a> that the Client used to access the AP Front End (HTTP/WEB01) is present in the received <a href="/posts/demystify_kerberos_delegation/#56">KRB_TGS_REQ (S4U2Proxy) packet</a> (in this example it was obtained via the S4USelf extension), this would provide evidence to the KDC that the Client has actually authenticated to the AP Front End (HTTP Service on the WEB01 machine) (and that therefore the AP Front End can potentially impersonate the Client); furthermore, it is necessary that this TGS Ticket has the &ldquo;FORWARDABLE&rdquo; flag set to &ldquo;1&rdquo; (NEGATIVE outcome in this case - <a href="/posts/demystify_kerberos_delegation/#53">1</a>, <a href="/posts/demystify_kerberos_delegation/#58">2</a>).</p>
</li>
<li>
<p>The KDC, inspecting the <a href="/posts/demystify_kerberos_delegation/#59">SPN contained in the KRB_TGS_REQ (S4U2Proxy) packet</a>, will understand that the AP Front End (ex HTTP/WEB01) wants to authenticate to a specific AP Back-End (ex CIFS/SQL01) on behalf of the Client, consequently the KDC retrieves the Service Account of the AP Front End (WEB01$) and verifies if within its property &ldquo;msds-allowedtodelegateto&rdquo; the SPN of the requested AP Back End (in this case CIFS/SQL01) is present (<a href="/posts/demystify_kerberos_delegation/#60">NEGATIVE outcome in this case</a>).</p>
</li>
</ol>
<span id=305>
<p>Since in this scenario the <a href="/posts/demystify_kerberos_delegation/#90">1</a> verification FAILS (The KDC performs the verification sequentially, consequently, although the 2nd step also fails, the KDC makes the decision on how to proceed immediately because step 1 fails) and in the &ldquo;KRB_TGS_REQ (S4UProxy)&rdquo; <a href="/posts/demystify_kerberos_delegation/#61">the RBDC flag was configured to use this Kerberos Delegation in case of FallBack</a>, the KDC proceeds to use the &ldquo;Resource Based Constrained Delegation (RBCD)&rdquo;, consequently, the KDC retrieves the Service Account (SQL01$) of the requested Back-End Service (CIFS) and verifies if it has the flag &ldquo;ms-DS-Allowed-To-Act-On-Behalf-Of-Other-Identity&rdquo; containing the Service Account (WEB01$) of the Front End Service (HTTP) that is attempting authentication on behalf of the Client (vegeta); if, as in this case, the outcome <a href="/posts/demystify_kerberos_delegation/#63">is positive</a>, then the KDC sends a &ldquo;KRB_TGS_REP (S4U2Proxy)&rdquo; packet to the AP Front End containing, in summary:</p>
<span id=65>
<blockquote>
<p><strong>POST 2021</strong>:</p>
<p><a href="/posts/demystify_kerberos_delegation/#behaviour-change-about-kerberos-delegation-on-modern-windows-system">As explained before</a>, in POST 2021 scenario, the KDC will receive a TGS Ticket issued by the S4USelf Response with the FORWARDABLE flag set to 1, so when the KDC start to do <a href="/posts/demystify_kerberos_delegation/#64">its check</a>, the first verification will succeed BUT the second verification will FAIL because the AP Front End does NOT have Kerberos Delegation enabled, for this reason although the internals has been changed the KDC will switch to RBCD anyway.</p></blockquote>
<span id=91>
<ul>
<li><strong>A Client TGS Ticket to access the AP in Back-End</strong></li>
</ul>
<p>The KDC then sends within a &ldquo;KRB_TGS_REP (S4U2Proxy)&rdquo; a TGS Ticket belonging to the Client (it contains the PAC of the domain user who authenticated to the AP Front End) valid for the AP Back-End (CIFS/SQL01)</p>

      <img src="/demystify_kerberos_delegation/58.png"  class="center"  style="border-radius: 8px;"  />
  

<p>Furthermore, i want to highlight that this TGS Ticket issued through the RBCD will have the &ldquo;Forwardable&rdquo; flag set to &ldquo;1&rdquo;, meaning it will be valid and equivalent to any other TGS Ticket normally issued by the KDC.</p>

      <img src="/demystify_kerberos_delegation/58.png"  class="center"  style="border-radius: 8px;"  />
  

<h3 id="6-krb_ap_req-1"><strong>6. KRB_AP_REQ</strong>:</h3>
<p>The AP Front End (HTTP service), after the <a href="/posts/demystify_kerberos_delegation/#2">usual checks</a>, in summary, sends a &ldquo;KRB_AP_REQ&rdquo; packet to the AP Back-End (CIFS service) containing in summary:</p>
<ul>
<li>The <a href="/posts/demystify_kerberos_delegation/#91">previously received</a> TGS Ticket, namely the one belonging to the Client (it contains the PAC of the domain user who authenticated to the AP Front End) and valid for the AP Back-End (CIFS/SQL01).</li>
</ul>
<h3 id="7-krb_ap_rep-optional-1"><strong>7. KRB_AP_REP (Optional)</strong></h3>
<p>The AP Back-End, now that it has received the KRB_AP_REQ packet from the AP Front End, in summary, after the necessary checks, will allow (<a href="/posts/not_so_brief_overview_about_kerberos/#3">if the AUTHORIZATION phase goes correctly</a>) the AP Front End to access the requested service (in this case the CIFS service hosted on the SQL01 machine), subsequently, depending on the requested service and if mutual authentication is required by the AP Front End (e.g. HTTP service), the AP Back-End (e.g. CIFS service) will send a KRB_AP_REP to the AP Front End (e.g. HTTP service).</p>
<blockquote>
<p>I This is what happens in my home lab; <a href="https://www.youtube.com/watch?t=2735&amp;v=gzqq2r6cZjc&amp;feature=youtu.be">in another case</a>, instead, the &ldquo;KRB_AP_REP&rdquo; packet is first sent from the AP Back End to the AP Front End and then another &ldquo;KRB_AP_REP&rdquo; from the AP Front End to the Client.</p></blockquote>
<p><strong>Finaly</strong> the AP Front End has succeeded in authenticating itself to the AP Back-End on behalf of the Client.</p>
<h2 id="outro"><strong>Outro</strong></h2>
<p>Kerberos Delegation is a beast to understand, and for this reason, if it&rsquo;s the first time you are studying this topic, take your time and re-read the article several times.</p>
<p>Furthermore, i hope Microsoft will NOT change the Kerberos Delegation Internals anymore, but who knows 🤞​</p>
<p>This article was written in synergy with &ldquo;<a href="/posts/demystify_kerberos_delegation_attacks/">Demystify Kerberos Delegation Attacks</a>&rdquo;, so if you have understood everything and you are interested about how to abuse it go and check it! If you have made it this far, congratulations!</p>
<h2 id="references"><strong>References</strong></h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=p9QFdITuvgU">1 - [English] You Do (Not) Understand Kerberos Delegation - Introduction</a></li>
<li><a href="https://www.youtube.com/watch?v=xDFRUYv1-eU">2 - [English] You Do (Not) Understand Kerberos Delegation - Unconstrained Delegation</a></li>
<li><a href="https://www.youtube.com/watch?v=gzqq2r6cZjc">3 - [English] You Do (Not) Understand Kerberos Delegation </a></li>
<li><a href="https://www.youtube.com/watch?v=vlKwCTvp5_w&amp;t=799s">4 - [English] You Do (Not) Understand Kerberos Delegation - RBCD</a></li>
<li><a href="https://labs.lares.com/fear-kerberos-pt4/">https://labs.lares.com/fear-kerberos-pt4/</a></li>
<li><a href="https://zer1t0.gitlab.io/posts/attacking_ad/#kerberos-delegation">https://zer1t0.gitlab.io/posts/attacking_ad/#kerberos-delegation</a></li>
<li><a href="https://adsecurity.org/?p=1667">https://adsecurity.org/?p=1667</a></li>
<li><a href="https://en.hackndo.com/constrained-unconstrained-delegation/">https://en.hackndo.com/constrained-unconstrained-delegation/</a></li>
</ul>
]]></content></item><item><title>Not So Brief Overview about Kerberos</title><link>https://marcozufferli.com/posts/not_so_brief_overview_about_kerberos/</link><pubDate>Thu, 11 Sep 2025 17:20:24 +0200</pubDate><guid>https://marcozufferli.com/posts/not_so_brief_overview_about_kerberos/</guid><description>An in-depth walkthrough of Kerberos authentication: TGT/TGS lifecycle, SPNs, PAC and how to inspect Kerberos traffic.</description><content type="html"><![CDATA[
    <img src="/not_so_brief_overview_about_kerberos/immagine.jpg"  class="center"  style="border-radius: 8px;"  />


<h1 id="kerberos-authentication-protocol"><strong>Kerberos Authentication Protocol</strong></h1>
<p>Kerberos is the Windows network authentication protocol present by default in versions after Windows 2000; it replaces the NTLM protocol (specifically, <a href="https://it.wikipedia.org/wiki/NTLM#NTLMv2">NTLMv2</a>) but it should be noted that it can only operate in Active Directory contexts and NOT in <a href="https://en.wikipedia.org/wiki/Workgroup_%28computer_networking%29">Workgroup</a>.</p>
<p>In a traditional Active Directory authentication scenario, when a user performs a domain authentication on a WorkStation / Server (Interactive Logon) the Client uses the Kerberos protocol for authentication and if, subsequently, the domain user already logged into the Client needs to authenticate with their domain credentials towards a target network service such as SMB (Network Logon), the Kerberos protocol, having SSO capabilities, is used again by the Client.</p>
<p>In a Microsoft Active Directory domain, Kerberos is the primary authentication mechanism, for both Interactive Logon and Network Logon (actually also for other LogonTypes), that said, if for any reason the Kerberos protocol CANNOT operate (as when performing a network authentication specifying an IP as the <a href="https://zer1t0.gitlab.io/posts/attacking_ad/#ntlm-in-active-directory">target and not a hostname in Windows utilities</a>, and in fact this is a method to force NTLMv2 authentication over Kerberos) Windows will use the previously available network authentication protocol, that is (usually) NTLMv2; that said, in this section we will detail the Kerberos protocol in all its phases, starting from a scenario that unfolds with an Interactive Logon up to a possible Network Logon.</p>
<p>Kerberos works over the TCP and UDP protocol in clear-text, in fact there is no possibility to implement encryption of the entire communication channel using OpenSSL, this is because it is the Kerberos protocol itself that is responsible for encryption, consequently the encryption mechanism of the Kerberos protocol consists of sending a series of partially already encrypted packets within an unencrypted connection (communication channel).</p>
<p>Kerberos is an authentication protocol, not an authorization protocol, this means that the Kerberos protocol, through the use of TGT, TGS tickets and other related data, is able both to prove to the remote service that the domain user trying to access is indeed a valid domain user, already authenticated and present in the AD (Network Logon) (<a href="/posts/not_so_brief_overview_about_kerberos/#1">link</a>), and to the Client when the user performs a standard login to the machine (Interactive Logon) (<a href="/posts/not_so_brief_overview_about_kerberos/#2">link</a>); instead, authorization, so the verification of the permissions in order to access to the target service is the responsibility of the AP, that is the server hosting the service (Network Logon) (<a href="/posts/not_so_brief_overview_about_kerberos/#3">link</a>), while to the Client it&rsquo;s the responsibility of the Client itself (Interactive Logon) (<a href="/posts/not_so_brief_overview_about_kerberos/#4">link</a>).</p>
<p>Kerberos implements the concept of &ldquo;Ticket&rdquo;, they are &ldquo;objects&rdquo; that will be used to perform domain authentications.
This protocol is called Kerberos, like the three-headed dog of Greek mythology, because in its complete operation (for example from Interactive Logon to Network Logon) it involves 3 distinct actors:</p>
<ul>
<li>
<p><strong>Client / User</strong>: The Client (it&rsquo;s also possible to say the user who has logged into the Client) wants to access a service that requires domain authentication.</p>
</li>
<li>
<p><strong>Application Server (AP)</strong>: The service that the client (or user) wants to access.</p>
</li>
<li>
<p><strong>Key Distribution Center (KDC)</strong>: The Kerberos protocol, to operate, requires the involvement of a Third Party called the Key Distribution Center, which is a functionality of the DC and will be the true core of the protocol and the responsible entity (through its features) for issuing the different Tickets.</p>
<p><span id="7">Specifically, the KDC supports a functionality called Authentication Server (AS), this feature is the one that will actually issue the Tickets called TGT, in some guides it is also said that the KDC has another functionality called Ticket-Granting Server which will be responsible for issuing the other type of Ticket, that is the TGS, that said, for simplicity in this section, instead of specifying the Ticket-Granting Server we will say that it is the KDC itself that issues the TGS.</p>
</li>
</ul>
<p>The Active Directory of a Domain Controller will act as the KDC and the listening ports that expose the service (and therefore the functionalities) of Kerberos will be 88 TCP and 88 UDP.</p>
<p><strong>Kerberos Flow:</strong></p>

    <img src="/not_so_brief_overview_about_kerberos/kerberos_flow.png"  class="center"  style="border-radius: 8px;"  />


<blockquote>
<p><span id=40> In the following sections we&rsquo;ll describe the traditional process where Kerberos is used, so from an Interactive Logon where a user enters their credentials within a WinLOGON GUI, to a subsequent Network Logon (using the credentials cached) to authenticate to a target service; in reality, the Kerberos authentication process can actually also begin using other <a href="https://www.alteredsecurity.com/post/fantastic-windows-logon-types-and-where-to-find-credentials-in-them">Logon Type</a> besides the traditional WinLOGON GUI (Interactive Logon), for example: performing a Kerberos authentication to a service (for instance the SMB service using the PsExec utility from Sysinternals) specifying domain credentials that are different from the ones currently in use; since the Client does NOT have the TGT Ticket of the requested credentials cached (because it logged into the Client with another account) a full Kerberos authentication will be performed.</p></blockquote>
<h2 id="kerberos-flow---interactive-login"><strong>Kerberos Flow - Interactive Login</strong></h2>
<span id=39>
<ol>
<li>
<h3 id="krb_"><strong>KRB_AS_REQ: Request of the TGT Token from the Authentication Server (AS)</strong></h3>
</li>
</ol>
<p>The Kerberos protocol is (typically) initialized when a user needs to perform an <a href="https://learn.microsoft.com/en-us/windows-server/security/windows-authentication/windows-logon-scenarios#BKMK_InteractiveLogon">Interactive Logon</a> (<a href="https://zer1t0.gitlab.io/posts/attacking_ad/#interactive-logon">1</a>) within a Client using domain credentials, that is by filling in the traditional Windows credential form, also called WinLogon GUI.</p>

      <img src="/not_so_brief_overview_about_kerberos/interactive_logon.png"  class="center"  style="border-radius: 8px;"  />
  

<p>To authenticate, the user enters the credentials on the Client (DOMAIN\User &amp; Password) and everywhing will be shared in cleartext with the &ldquo;LSASS&rdquo; process.</p>
<p><span id="6">After that, LSASS delegates the authentication to its SSPs, so some DLLs (APIs) that can be loaded within the &ldquo;lsass.exe&rdquo; process, consequently the LSASS process loads and shares in cleartext the credentials with all the SSPs dedicated to authentication (kerberos.dll - manage Kerberos, msv1_0.dll - manage NTLM Authentication, wdigest.dll - manage Digest); that said, since the LSASS process does NOT know which SSP to use, <a href="https://syfuhs.net/what-happens-when-you-type-your-password-into-windows">it will use them one by one in sequential order until a correct authentication takes place</a>, consequently, since Windows will recognize that it is a domain user entered, it will start with the &ldquo;kerberos.dll&rdquo; DLL, it then calculates the NT hash of the corresponding previously entered password (which it received in plaintext) and after that contacts the AS (Authentication Service which is a feature of the KDC, that is the DC) to request the issuance of a Ticket called &ldquo;TGT&rdquo; and a &ldquo;TGS Session Key&rdquo;, specifically the LSASS process sends a KRB_AS_REQ which contains:</p>

      <img src="/not_so_brief_overview_about_kerberos/krb_as_req.png"  class="center"  style="border-radius: 8px;"  />
  

<ul>
<li>
<p><strong>Authenticator</strong>: the timestamp contained within it will be encrypted with the user’s hash, while other values such as the ‘username’ field, which contains the name of the domain user we are logging in with, will all be in plain-text.</p>
</li>
<li>
<p><span id="5"><strong>SPN - krbtgt</strong>: It will be indicated in the dedicated field, the SPN related to the Kerberos service (KDC) of the Domain Controller which is equal to krbtgt/[&lt;domain&gt;].</p>
<p>A Service Principal Name (SPN), <a href="/posts/not_so_brief_overview_about_kerberos/#service-principal-name-spn">as we explain later</a> is a unique identifier for the instance of a service, SPNs are used by Kerberos authentication to associate the instance of a service (simplifying: the start &amp; running of the service such as for example Microsoft SQL) with a so-called &ldquo;Logon Account&rdquo;, so a domain user (which in this way it will becomes a Service Account); in other terms, (generically speaking) an SPN can be considered as a generic object that represents the association between a service and a domain user, that said, technically, <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc772815%28v=ws.10%29#service-principal-names">it is an attribute of the &ldquo;Users&rdquo; object</a> and in fact from it one can list the related SPNs; this essentially means that through an SPN it is possible to map the start &amp; the running of a service present on a server with a domain user rather than associating it with a &ldquo;Standard Service Account&rdquo; such as <a href="https://learn.microsoft.com/it-it/windows/win32/services/networkservice-account?redirectedfrom=MSDN">NetworkService Account</a>; finally, it should be noted that also Computer Accounts have SPNs.</p>
<blockquote>
<p><strong>Note 1</strong>: If the DC is not accessible when a Client performs a domain authentication, the Client checks whether such credentials are present within the <a href="https://learn.microsoft.com/en-us/troubleshoot/windows-server/user-profiles-and-logon/cached-domain-logon-information">Domain Credential Cached (DCC)</a> which stores the last domain users logged into the machine (only if a user authenticates correctly and has the permissions to access the Client), if they are also NOT present there then the login is rejected.</p></blockquote>
<blockquote>
<p><strong>Note 2</strong>: As we will see later, if a domain user has the <a href="https://learn.microsoft.com/en-us/troubleshoot/windows-server/active-directory/useraccountcontrol-manipulate-account-properties">DONT_REQ_PREAUTH</a> flag enabled, the AS will respond with a valid KRB_AS_REP (response) even if the KRB_AS_REQ (request) packet does not have the &ldquo;Timestamp&rdquo; encrypted with the NTHash of the user’s password.</p></blockquote>
<blockquote>
<p><span id=32> <strong>Note 3</strong>: For simplicity of explanation everything has been described in this way, what will happen in reality is that the Client will first send a &ldquo;KRB_AS_REQ&rdquo; packet to the AS NOT encrypting the Timestamp with the NT Hash of the current user and only when the AS responds with an error &ldquo;KDC_ERR_PREAUTH_REQUIRED&rdquo; then the Client will send a new &ldquo;KRB_AS_REQ&rdquo; with the Timestamp encrypted, this is the <a href="https://youtu.be/4LDpb1R3Ghg?t=3167">reason</a> why by analyzing everything with Wireshark in a traditional Kerberos authentication one can notice such error message.</p></blockquote>
</li>
</ul>
<ol start="2">
<li>
<h3 id="krb_-1"><strong>KRB_AS_REP: AS sends the TGT token to the Client</strong></h3>
</li>
</ol>
<span id="9">
The AS (a feature of the KDC) after having received such request, using the username (which is not encrypted) as a keyword searches inside its Database for the password of that user in order to decrypt the message; if the AS correctly decrypts the message and the now decrypted timestamp falls within the time difference configured in the KDC, then the authentication has occurred successfully.
<blockquote>
<p>If the domain user contained in the first KRB_AS_REQ interaction has the <a href="https://learn.microsoft.com/en-us/troubleshoot/windows-server/active-directory/useraccountcontrol-manipulate-account-properties">DONT_REQ_PREAUTH</a> property flag enabled, the AS will accept such authentication request as valid EVEN if the request does NOT have the &ldquo;timestamp&rdquo; value encrypted with the NT Hash of the domain user, in such case the AS will simply verify directly whether the timestamp falls within the time difference configured in the KDC; it is important to underline that if the domain user has such flag enabled, the AS will nevertheless respond with a valid KRB_AS_REP both if the KRB_AS_REQ packet has the &ldquo;timestamp&rdquo; encrypted (usually sent by the LSASS process in an Interactive Logon) and if it does NOT have the timestamp encrypted (usually sent by an attacker if performing an AS-REP Roasting Attack).</p></blockquote>
<p>If everything goes well, the AS responds to the client with a packet called KRB_AS_REP containing the TGT Ticket and the TGS Session Key (called &ldquo;Session Key&rdquo; within the screenshot), such TGS Session Key will be used subsequently as an encryption key for the possible following requests.</p>
<p>The KRB_AS_REP packet sent by the AS to the Client contains:</p>
<p><span id="12">
    <img src="/not_so_brief_overview_about_kerberos/krb_as_rep.png"  class="center"  style="border-radius: 8px;"  />

</p>
<ul>
<li>
<p><strong>Ticket TGT</strong>: The TGT Ticket which has been encrypted with the &ldquo;krbtgt hash&rdquo;, that is the hash (NT Hash) of the domain user called &ldquo;krbtgt&rdquo; (<a href="/posts/not_so_brief_overview_about_kerberos/#5">as previously specified</a>)
<span id="8">Since the Client for obvious reasons does not know the password hash of the KDC it cannot decrypt the TGT Ticket, this is not a problem because to obtain the TGS Ticket in the next step it is sufficient to send the TGT ticket as we received it, that is, encrypted.</p>
</li>
<li>
<p><strong>Other Data</strong>: Other various data, including the TGS Session Key, are encrypted with the hash (NT Hash) of the Client user who requested the domain authentication via Interactive Logon; in this way the KRB_AS_REP packet when sent by the AS to the Client even if intercepted via Man-In-The-Middle Attack, the attacker could not (hopefully 😉) decrypt the packet since they do not know the hash of the Client user.</p>
</li>
</ul>
<blockquote>
<p>The AS will respond to the Client by sending a KRB_AS_REP with the TGS Session Key (plus other data) encrypted with the NTHash of the domain user regardless of whether it has the <a href="https://learn.microsoft.com/en-us/troubleshoot/windows-server/active-directory/useraccountcontrol-manipulate-account-properties">DONT_REQ_PREAUTH</a> flag enabled or not, such behavior will lead to an AS-REP Roasting type attack.</p></blockquote>
<hr>
<p><strong>So, what happens now?</strong></p>
<p>Below are the sequential steps that occur until the user’s home screen is loaded:</p>
<ul>
<li><span id="2"><strong>Authentication</strong>: The Client has now obtained the KRB_AS_REP packet, consequently the LSASS process (or rather its SSP that established the connection, namely &ldquo;Kerberos.dll&rdquo;) performs the decryption of the portion of the KRB_AS_REP packet encrypted with the NT Hash of the domain account performing the authentication (this is because the Client intrinsically knows this value); if this activity is done correctly it means that the authentication has succeeded and for this reason the Kerberos AUTHENTICATION process ends.</li>
</ul>
<blockquote>
<p>It should be noted that the Client stores in memory the TGT Ticket received, this is the reason why if an attacker compromises this machine, they are able to perform a Pass-The-Ticket (PtT).</p></blockquote>
<ul>
<li>
<p><span id="4"><strong>Authorization</strong>: The Client now needs to understand if the domain account authenticated via Kerberos has the authorizations to access, <a href="https://syfuhs.net/what-happens-when-you-type-your-password-into-windows">in order to do this</a>, it should retrieve the information of the authenticated account by inspecting the &ldquo;PAC&rdquo; contained in the received TGT Ticket, but, unfortunately, the PAC contained within the received TGT Ticket is inaccessible since the TGT Ticket is encrypted with the &ldquo;krbtgt&rdquo; hash, consequently, similarly to what happens in a Network Logon scenario (<a href="/posts/not_so_brief_overview_about_kerberos/#kerberos-flow---network-logon">as we will see later</a>), also in this Interactive Logon case, the Client will request a TGS Ticket BUT indicating in the dedicated field an <a href="https://en.hackndo.com/service-principal-name-spn/#edge-case---host">SPN of type &ldquo;HOST&rdquo;</a> related to the Client machine (ex: HOST\Workstation01&quot;) involved, since (1) the service account associated with the Client (ex: Workstation01) is its corresponding <a href="/posts/not_so_brief_overview_about_kerberos/#relationship-between-a-spn--computer-account">&ldquo;Computer Account&rdquo;</a> (ex: DOMAIN\Workstation01$), it will be possible to decrypt the TGS Ticket, extract the PAC and perform the authorization verification:</p>
<ol>
<li><strong>First Authorization Phase</strong>: The SSP &ldquo;kerberos.dll&rdquo; (so the Client) will send a KRB_TGS_REQ packet to the DC in order to request a TGS Ticket; instead of indicating an SPN of a target service (<a href="/posts/not_so_brief_overview_about_kerberos/#kerberos-flow---network-logon">as we will show later in the context of Network Logon</a>) it will indicate the &ldquo;HOST&rdquo; SPN related to the Client machine itself, so where the authentication has just taken place (ex: &ldquo;HOST\Workstation01&rdquo;); in this way the DC will respond with a KRB_TGS_REP containing a TGS Ticket encrypted with the Client’s domain account &ldquo;Computer Account&rdquo; (ex: DOMAIN\Workstation01$), since the LSASS process of the Client has in memory (specifically in the <a href="https://learn.microsoft.com/en-us/windows/win32/secauthn/lsa-logon-session">LOGON SESSION</a>) the NT Hash of every Security Principal (every authenticated account) of the machine, including also its own <a href="/posts/not_so_brief_overview_about_kerberos/#relationship-between-a-spn--computer-account">&ldquo;Computer Account&rdquo;</a> (ex: DOMAIN\Workstation01$), it will use the NT Hash of such domain account to decrypt the TGS Ticket and then extract in plaintext the PAC contained within it (the PAC is simply &ldquo;signed&rdquo; by the DC with the &ldquo;krbtgt hash&rdquo;, not encrypted) with which it will perform the analysis related to authorizations.</li>
</ol>
<blockquote>
<p>The reason why this step is NOT usually described in a Kerberos authentication articles, is that the Kerberos authentication flow is often captured (from a Windows machine) by <a href="/posts/not_so_brief_overview_about_kerberos/#35">sniffing the network traffic with Wireshark after performing a &ldquo;klist purge&rdquo;</a> (by removing the TGT Ticket, the Client during a Kerberos authentication will necessarily have to re-perform a complete Kerberos authentication); with this procedure, this specific step will NOT be executed because the domain account since is already authenticated on the Client, the Client will NOT need to perform again the AUTHORIZATION check and for this reason it will NOT send this packet during the sniffing.</p></blockquote>
<ol start="2">
<li><strong>Second Authorization Phase</strong>: Another component of the LSASS process will compare the content of the PAC (SID, Group &amp; etc. related to the domain account logged on to the Client) just extracted against the Client’s ACLs and, if positive, the AUTHORIZATION phase performed by the Client will end.</li>
</ol>
</li>
</ul>
<p><strong>If positive</strong>:</p>
<ol>
<li>
<p>The SSP &ldquo;Kerberos.dll&rdquo; (so the LSASS process) creates a LogonSession (<a href="https://learn.microsoft.com/en-us/windows/win32/secauthn/lsa-logon-sessions">it is a data structure present in LSASS</a>) which will represent the domain account just authenticated (ex: ASTRO\Cosmo)</p>
</li>
<li>
<p>Windows (this action is not performed by Kerberos.dll) will attach to the the LogonSession of the user just created ALL the previously loaded SSPs (even if only &ldquo;kerberos.dll&rdquo; was actively used for the authentication phase in this context), these SSPs <a href="/posts/not_so_brief_overview_about_kerberos/#6">as already mentioned</a>, will contain the authenticated user’s credentials in plaintext; this happens to ensure Network Logon SSO functionality (Kerberos or NTLM) since these network protocol requires the use of the current account’s NT Hash (which is derivable from the plaintext password).</p>
<p>It means that if an attacker is able to dump a Logon Session, he will able to see ALL the associated SSPs along with their stored credentials in plaintext (generally speaking because exist some features that mitigate this logic) (dumpable with <a href="https://adsecurity.org/?page_id=1821">sekurlsa::logonpasswords</a>).</p>
</li>
</ol>
<blockquote>
<p>In reality the MSV SSP (<a href="https://zer1t0.gitlab.io/posts/attacking_ad/#ntlm-ssp">1</a>, <a href="https://www.praetorian.com/blog/inside-mimikatz-part1/">2</a>) will instead provide the NT Hash of the password.</p></blockquote>
<ol start="3">
<li><span id="10">The SSP &ldquo;Kerberos.dll&rdquo; (so the LSASS process) caches the TGT Ticket + TGS Session key inside the Logon Session of the authenticated account (ex: ASTRO\Cosmo) (dumpable with <a href="https://adsecurity.org/?page_id=1821">sekurlsa::tickets</a>)</li>
</ol>
<blockquote>
<p>Since Logon Sessions are created and destroyed dynamically based on user logins and logoffs, an attacker could obtain the NT Hash of a user account (local or domain) only if it is currently logged on (or recently logged on) by dumping the corresponding Logon Session (sekurlsa::logonpasswords) (because the Logon Session still exists inside the memory); the same principle applies also to all the others secrets stored in the Logon Session like for example dumping the Kerberos tickets (sekurlsa::tickets).</p></blockquote>
<ol start="4">
<li>
<p>The SSP &ldquo;Kerberos.dll&rdquo; (so the LSASS process) caches a hashed version (MSCACHEV2/MSCASH hashes) of the password of the authenticated account (ex: ASTRO\Cosmo) inside the Domain Credential Cached (DCC) (dumpable <a href="https://adsecurity.org/?page_id=1821">lsadump::cache</a>)</p>
</li>
<li>
<p>The domain user (e.g ASTRO\Cosmo) <strong>finally</strong> loads the home screen
Since the TGT Ticket and the TGS Session Key have been cached, if a Network Logon attempt occurs Kerberos will be used again.</p>
</li>
</ol>
<p>If a domain user already logged on to the Client (using Kerberos) needs to authenticate to a target network service and thus perform a &ldquo;Network Logon&rdquo; type login, since the Kerberos protocol is SSO (Single Sign On), the following steps are followed.</p>
<hr>
<h2 id="kerberos-flow---network-logon"><strong>Kerberos Flow - Network Logon</strong></h2>
<ol start="3">
<li>
<h3 id="krb_-2"><strong>KRB_TGS_REQ: The Client provides the KDC with its TGT Ticket to request the TGS Ticket</strong></h3>
</li>
</ol>
<p>Now that a domain user has already authenticated to a Client (using Kerberos) and already possesses the TGT Ticket with a TGS Session Key, if they need to perform a &ldquo;Network Logon&rdquo; type login, the Kerberos protocol comes into play again, specifically the Client will use the TGT ticket and the TGS Session Key to request another type of ticket called the TGS Ticket.</p>
<blockquote>
<p>The TGS Ticket has been called in this way in many publications because it is issued by the Ticket-Granting Services feature (of the KDC) which has the acronym TGS, which, for simplicity of explanation (<a href="/posts/not_so_brief_overview_about_kerberos/#7">as already mentioned</a>) in these diagrams instead of specifying that the TGS is issued by the Ticket-Granting Services it was simply said it&rsquo;s issued by the KDC; that said, looking inside the <a href="https://datatracker.ietf.org/doc/html/rfc4120/">RFC4120</a> we can understand that in reality the real name of the TGS Ticket is Service Ticket (ST), this is the reason why in other publications (<a href="https://zer1t0.gitlab.io/posts/attacking_ad/#st">1</a>, <a href="https://redsiege.com/wp-content/uploads/2020/09/SIEGECAST-KERBEROS-AND-ATTACKS-101.pdf">2</a>) this type of Ticket is referred to by this other name.</p></blockquote>
<p>The Client presents to the KDC (no longer to the AS functionality) a KRB_TGS_REQ which essentially contains:</p>
<p><span id=13>
    <img src="/not_so_brief_overview_about_kerberos/krb_tgs_req.png"  class="center"  style="border-radius: 8px;"  />

</p>
<ul>
<li>
<p><strong>Ticket TGT</strong>: The <a href="/posts/not_so_brief_overview_about_kerberos/#8">previously received</a> TGT ticket.</p>
<blockquote>
<p>It has never been decrypted, is sent to the client encrypted as obtained previously, that is, encrypted with the &ldquo;krbtgt hash&rdquo;.</p></blockquote>
</li>
<li>
<p><strong>Authenticator</strong>: Username (domain user who made the request) &amp; Timestamp, both encrypted with the TGS Session Key (obtained with KRB_AS_REP <a href="/posts/not_so_brief_overview_about_kerberos/#10">which was decrypted and cached previously during the Interactive Logon operation</a>.</p>
</li>
<li>
<p><span id=16> <strong>SPN</strong>: The SPN related to / pointing to the service the Client needs to connect to via SSO is sent in plain-text, such as the SPN &ldquo;HTTP/Charlotte.medin.local&rdquo; or &ldquo;CIFS/SERV01&rdquo; (<a href="https://en.hackndo.com/kerberos/">1</a>); in the first, one wants to authenticate to the HTTP service present on the Hostname &ldquo;Charlotte.medin.local&rdquo; while in the second to the CIFS service present on the Hostname SERV01.</p>
</li>
</ul>
<p><span id=18>I want to highlight that both TGT Ticket &amp; TGS Ticket (also called Service Ticket / ST ) contain the <a href="/posts/not_so_brief_overview_about_kerberos/#privilege-attribute-certificate-pac">Privilege Attribute Certificate (PAC)</a>, that is, a data structure used by the Kerberos protocol to share with the other actors involved in the authentication the security information related to the domain user attempting the login, including: Username, ID, Group Membership and in general all security information; furthermore <a href="/posts/not_so_brief_overview_about_kerberos/#11">the PAC is NOT encrypted but ONLY signed</a>.</p>
<ol start="4">
<li>
<h3 id="krb_-3"><strong>KRB_TGS_REP: KDC sends the TGS Ticket to the client</strong></h3>
</li>
</ol>
<p>The KDC, after having received the packet from the Client, being in possession of the &ldquo;krbtgt hash&rdquo; decrypts the received TGT Ticket and extracts the TGT Owner (<a href="/posts/not_so_brief_overview_about_kerberos/#12">&ldquo;username&rdquo; field of the TGT</a>) &amp; the related <a href="/posts/not_so_brief_overview_about_kerberos/#12">TGS Session Key</a>, then it uses such extracted TGS Session Key to decrypt the Authenticator received in that packet (<a href="/posts/not_so_brief_overview_about_kerberos/#13">KRB_TGS_REQ</a>), if everything goes well and the &ldquo;Username&rdquo; field (contained in <a href="/posts/not_so_brief_overview_about_kerberos/#13">KRB_TGS_REQ</a>) matches the TGT Owner (<a href="/posts/not_so_brief_overview_about_kerberos/#12">&ldquo;username&rdquo; field of the TGT Ticket</a>) and the timestamp is valid, then the KDC verifies whether the PAC contained in the received TGT Ticket is valid (the KDC, having the krbtgt hash, computes a signature on the content of the PAC to verify if such output <a href="/posts/not_so_brief_overview_about_kerberos/#15">matches the signature present in the PAC of the TGT Ticket</a>) and if positive generates the TGS Ticket (Service Ticket / ST); in this way the KDC (DC) has ensured that whoever has made the request for a TGS Ticket has a TGT Ticket with a valid related TGS Session Key and that the PAC is correct.</p>
<p>Once the verification is completed, the KDC sends to the Client the KRB_TGS_REP packet containing:</p>
<p><span id=19>
    <img src="/not_so_brief_overview_about_kerberos/krb_tgs_rep.png"  class="center"  style="border-radius: 8px;"  />

</p>
<ul>
<li><span id=29><strong>Ticket TGS</strong>: TGS Ticket encrypted with the hash of the service account related to the service that the client wishes to access (called in the image &ldquo;Service Owner Hash&rdquo;), it has been retrieved <a href="/posts/not_so_brief_overview_about_kerberos/#16">using the SPN field configured in the KRB_TGS_REQ packet</a>; for example, if via Kerberos SSO (<a href="https://redsiege.com/wp-content/uploads/2020/09/SIEGECAST-KERBEROS-AND-ATTACKS-101.pdf">Page 15</a>) we requested the SPN &ldquo;HTTP/Charlotte.medin.local&rdquo;, the password of the service account associated with that HTTP service (e.g., DOMAIN\websvc) will be used to encrypt the TGS Ticket, if instead the request was made to the SPN &ldquo;MSSQL/db01.medin.local&rdquo;, the password of the service account associated with that MSSQL service (e.g., DOMAIN\sqlengine) will be used to encrypt the TGS Ticket; another scenario is if the request is made, for example, to the SPN &ldquo;CIFS/serv01&rdquo; (one of the several services usually run with the &ldquo;<a href="https://learn.microsoft.com/it-it/windows/win32/services/localservice-account?redirectedfrom=MSDN">Local Service Account</a>&rdquo; - so a <a href="https://learn.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts#default-local-system-accounts">Default Local System Account</a>), in this case as well the password of the related Service Account (<a href="/posts/not_so_brief_overview_about_kerberos/#17">so the Computer Account &ldquo;serv01$&rdquo;</a>) will be used to encrypt the TGS Ticket.</li>
</ul>
<blockquote>
<p>The KDC, being the DC, knows the hashes of all domain users, so also the service accounts (which are domain users) and also the hash of the service account that runs the service requested by the Client.</p></blockquote>
<blockquote>
<p><span id=42>The PAC of the TGS Ticket is a copy of the PAC contained in the <a href="/posts/not_so_brief_overview_about_kerberos/#12">received TGT Ticket</a>; this is one of the behavior that makes it possible to perform a Golden Ticket.</p></blockquote>
<ul>
<li><strong>Other Data</strong>: A &ldquo;Service Session Key&rdquo;, together with other data, encrypted with the TGS Session Key; it will be used as the encryption key for the final packet exchanges.</li>
</ul>
<p>As <a href="/posts/not_so_brief_overview_about_kerberos/#18">already mentioned</a>, the TGS Ticket (also called Service Ticket), like the TGT Ticket, contains the PAC (Privilege Attribute Certificate), that is, a structure contained in every ticket which holds the characteristics of the user (SID, group, etc.); furthermore, it must be specified that the PAC is NOT encrypted but signed.</p>
<ol start="5">
<li>
<h3 id="krb_-4"><strong>KRB_AP_REQ: The Client attempts to access the AP resource by providing its TGS Ticket</strong></h3>
</li>
</ol>
<p><span id=23>The Client decrypts the portion of the <a href="/posts/not_so_brief_overview_about_kerberos/#19">KRB_TGS_REP</a> packet received using the TGS Session Key that the Client had previously received with the <a href="/posts/not_so_brief_overview_about_kerberos/#9">KRB_AS_REP packet</a> and <a href="/posts/not_so_brief_overview_about_kerberos/#10">cached during the Interactive Login phase</a>, by decrypting it obtains the plaintext value of the &ldquo;Service Session Key&rdquo;, which will be used as the key for this exchange between the Client and the AP.</p>
<p>If everything has gone well, the user now has a valid TGS Ticket to use in order to access the target service, once the verification is completed, the actions are:</p>
<p><span id=26>
    <img src="/not_so_brief_overview_about_kerberos/krb_ap_req.png"  class="center"  style="border-radius: 8px;"  />

</p>
<ul>
<li>
<p><strong>Ticket TGS</strong>: The Client sends a packet containing the TGS Ticket (Service Ticket / TS) (which had already previously been encrypted with the hash of the service account of the target service) to the AP.</p>
</li>
<li>
<p><strong>Authenticator</strong>: The packet contains an &ldquo;Authenticator&rdquo; (Username + Timestamp) encrypted with the <a href="/posts/not_so_brief_overview_about_kerberos/#23">Service Session Key, so with the key just extracted</a>.
For synthesis reasons it was <strong>NOT</strong> reported in the image but in reality in the KRB_AP_REQ packet the &ldquo;SPN&rdquo; field is sent again, in this way <a href="/posts/not_so_brief_overview_about_kerberos/#1">subsequently</a> the AP will know which service account hash to retrieve in order to decrypt the TGS Ticket to perform the verification.</p>
</li>
</ul>
<hr>
<p><strong>So, again, what happens now?</strong></p>
<p>The AP, after having received the KRB_AP_REQ packet from the Client, performs the following actions:</p>
<ul>
<li>
<p><span id="1"><strong>Authentication</strong>: The AP, having at its disposal the NT Hash of the service account the Client wishes to authenticate to, uses it to decrypt the received TGS Ticket and extracts the PAC &amp; the TGS Owner (&quot;<a href="/posts/not_so_brief_overview_about_kerberos/#19">username field&quot; of the TGS</a>) &amp; the &ldquo;<a href="/posts/not_so_brief_overview_about_kerberos/#19">Service Session Key</a>&rdquo;. The AP uses this &ldquo;Service Session Key&rdquo; just extracted to decrypt the Authenticator received in the <a href="/posts/not_so_brief_overview_about_kerberos/#26">KRB_AP_REQ</a> packet, if everything goes well and the &ldquo;Username&rdquo; field of the Authenticator (<a href="/posts/not_so_brief_overview_about_kerberos/#26">contained in KRB_AP_REQ</a>) matches the TGS Owner (&quot;<a href="/posts/not_so_brief_overview_about_kerberos/#19">username field&quot; of the TGS</a>) and the timestamp is valid, the &ldquo;AUTHENTICATION&rdquo; phase of the Kerberos protocol is completed.</p>
<blockquote>
<p>It should be noted that the AP stores the received TGS Ticket in memory, this is the reason why if an attacker compromises that machine, they are able to perform a Pass-The-Ticket (PtT).</p></blockquote>
</li>
<li>
<p><span id="3"><strong>Authorization</strong>: The AP uses the PAC <a href="/posts/not_so_brief_overview_about_kerberos/#1">just extracted</a> from the TGS Ticket (Service Ticket / ST) and uses it to determine whether the domain user in question actually has the permissions to access the service, specifically, since the PAC contains in plain-text (<a href="https://redsiege.com/wp-content/uploads/2020/09/SIEGECAST-KERBEROS-AND-ATTACKS-101.pdf">page 13</a>) (the PAC is simply &ldquo;<a href="/posts/not_so_brief_overview_about_kerberos/#11">signed</a>&rdquo; by the DC with the &ldquo;krbtgt hash&rdquo;, not encrypted) the security information of the domain user who needs to connect to the service, such as SID, Username, RID and other data, the AP compares this information with the ACLs related to the service, if the outcome is positive the AP will grant the Client access to the service and this <strong>finaly</strong> concludes the &ldquo;AUTHORIZATION&rdquo; phase which I highlight is carried by the AP, so by the service.</p>
</li>
</ul>
<p>As can be seen, the Kerberos protocol validates to the target service (e.g. CIFS/SMBSERVER01) that the domain user who requested access is authenticated and valid (<a href="/posts/not_so_brief_overview_about_kerberos/#1">AUTHENTICATION</a>), while it&rsquo;s the target service itself (e.g. CIFS/SMBSERVER01), or rather the server hosting that service, namely the AP, that is responsible for verifying whether that user has the necessary permissions to access that service (<a href="/posts/not_so_brief_overview_about_kerberos/#3">AUTHORIZATION</a>).</p>
<p>Due to how the Kerberos protocol works, the AP (the server hosting the service such as CIFS to which the domain user needs to authenticate) will NEVER receive the NT Hash of the domain user who authenticated, because the AP will only receive the KRB_AP_REQ packet which does not contain such data, this means that if an attacker exploits the AP, from it they will not be able to recover the domain credentials of the users who have connected via SSO to that service.</p>
<hr>
<p><span id=33><strong>Optional</strong></p>
<p>Although it is not the Kerberos protocol itself but the <a href="https://www.tarlogic.com/blog/how-kerberos-works/">NRPC (NetLogon) protocol</a> (<a href="https://adsecurity.org/?p=1515">1</a>), if the AP needs to verify whether the PAC received (<a href="/posts/not_so_brief_overview_about_kerberos/#26">contained in the TGS Ticket</a>) is valid, <a href="/posts/not_so_brief_overview_about_kerberos/#28">a check that it does not happen often</a>, it can verify it by sending a packet named <a href="https://learn.microsoft.com/en-us/archive/blogs/openspecification/understanding-microsoft-kerberos-pac-validation#kerberos-pac-validation">KERB_VERIFY_PAC_REQUEST</a> as indicated later; furthermore, if the Client explicitly requests it (<a href="https://datatracker.ietf.org/doc/html/rfc1510#section-5.5.1">flag &ldquo;ap-options=1&rdquo;</a> inside the <a href="/posts/not_so_brief_overview_about_kerberos/#26">KRB_AP_REQ packet</a>), the AP must also authenticate itself to the Client, this concent is called &ldquo;Mutual Authentication&rdquo;; if both activities are required, the following steps 6, 7, and 8 will take place, and only after their completion the AP (or rather its service) will grant access to the Client.</p>
<blockquote>
<p><span id=28>I want to highlight that the PAC contained in the TGT Ticket is ALWAYS validated (when the DC receives the KRB_TGS_REQ) while the PAC contained in the TGS Ticket is validated ONLY if properly configured (by configuring a registry which is disabled by default).
In the case where both the PAC verification and the Client request for Mutual Authentication are present, the following steps occur:</p></blockquote>
<ol start="6">
<li>
<h3 id="optional-kerb_"><strong>(Optional) KERB_VERIFY_PAC_REQUEST</strong></h3>
</li>
</ol>
<p>In the case where the service (AP) wants to validate whether the PAC received (contained in the TGS Ticket) is valid, it uses the Netlogon protocol <a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-apds/b27be921-39b3-4dff-af4a-b7b74deb33b5">to ask the DC</a> to verify the PAC signature.</p>
<ol start="7">
<li>
<h3 id="optional-pac_"><strong>(Optional) PAC_RESPONSE</strong></h3>
</li>
</ol>
<p>The DC will verify if the PAC is valid (for simplicity of explanation, we can say that the DC will calculate a &ldquo;signature&rdquo; on the PAC content and if this output matches the existing signature, then the PAC will be considered valid) and will respond with a code indicating if it is correct; this packet representing the response has no specific name, it is simply called &ldquo;<a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-apds/b27be921-39b3-4dff-af4a-b7b74deb33b5">PAC RESPONSE</a>&rdquo;.</p>
  <span id=37>
<ol start="8">
<li>
<h3 id="optional-krb_"><strong>(Optional) KRB_AP_REP</strong></h3>
</li>
</ol>
<p>Finally, optionally, if the Client explicitly requests it, even the service itself (and NOT the related service account), so the AP, must authenticate itself performing a so-called &ldquo;mutual authentication&rdquo;; to do this, instead of contacting the AD, the AP responds directly to the Client by sending a <a href="https://datatracker.ietf.org/doc/html/rfc4120#section-5.5.2">KRB_AP_REP</a> (as a response to the previous KRB_AP_REQ) <a href="https://datatracker.ietf.org/doc/html/rfc4120#section-5.5.2">containing a TIMESTAMP encrypted</a> with the &ldquo;<a href="/posts/not_so_brief_overview_about_kerberos/#19">Service Session Key</a>&rdquo;; if the Client correctly decrypts the TIMESTAMP with the &ldquo;Service Session Key&rdquo; it possesses (the Client has the legitimate &ldquo;Service Session Key&rdquo; because it received it from the DC in the <a href="/posts/not_so_brief_overview_about_kerberos/#19">KRB_TGS_REP</a>), then it is demonstrated that the AP, having the correct &ldquo;Service Session Key&rdquo;, is legitimate (this is because the AP, to have this legitimate &ldquo;Service Session Key&rdquo;, would have had to extract the data from the TGS received from the Client - KRB_AP_REQ - which was encrypted with the &ldquo;<a href="/posts/not_so_brief_overview_about_kerberos/#29">Service Owner Hash</a>&rdquo;, information that only the legitimate AP should know); in other words, <a href="https://www.educative.io/blog/kerberos-in-5-minutes">in this way the Client is sure it is connecting to the original service</a> and not to another service of a potential attacker pretending to be the original service.</p>
<h2 id="privilege-attribute-certificate-pac"><strong>Privilege Attribute Certificate (PAC)</strong></h2>
<h3 id="what"><strong>What&rsquo;s a Privilege Attribute Certificate (PAC)?</strong></h3>
<p><a href="/posts/not_so_brief_overview_about_kerberos/#18">As already mentioned</a>, the <a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/166d8064-c863-41e1-9c23-edaaa5f36962">Privilege Attribute Certificate (PAC)</a> is a data structure that uses the Kerberos protocol to share with the other actors involved in the authentication, the security information related to the domain account attempting the login, including: Username, ID, Group Membership, and in general all security information.</p>
<p>The PAC is particularly important as it is used during the AUTHORIZATION phase (I want to remind that it is not managed by the Kerberos protocol) respectively either by the Client in an <a href="/posts/not_so_brief_overview_about_kerberos/#kerberos-flow---interactive-login">Interactive Logon</a> or by the AP / Remote Service in a <a href="/posts/not_so_brief_overview_about_kerberos/#kerberos-flow---network-logon">Network Logon to</a> understand if the domain account can access the service or not.</p>
<p>The PAC is contained inside the both types of Kerberos Tickets TGT &amp; TGS (in the &ldquo;authorization-data&rdquo; field), consequently the PAC is indirectly encrypted with the &ldquo;krbtgt&rdquo; account hash in the first case (TGT Ticket) or indirectly encrypted with the service account hash against which the authentication is performed in the second case (TGS Ticket).</p>
<p>Below there is an image that shows the content of a PAC within a TGS Ticket:</p>

    <img src="/not_so_brief_overview_about_kerberos/PAC.png"  class="center"  style="border-radius: 8px;"  />


<p>A traditional account performing Kerberos authentication, NOT knowing the hash to decrypt the TGT Ticket or the hash to decrypt the TGS Ticket, it means that the PAC could not be readable by a traditional user.</p>
<p><span id=11>Furthemore, i want to highlight that the PAC entity itself is issued by the DC in a &ldquo;signed&rdquo; way (not encrypted), meaning that inside it there will be several fields containing the signatures (checksums) calculated on the PAC content with a specific &ldquo;key&rdquo;; these signatures contained inside the PAC can potentially be used to verify the integrity of the PAC it self, below we see <a href="https://trustedsec.com/blog/red-vs-blue-kerberos-ticket-times-checksums-and-you">briefly</a>(<a href="https://www.youtube.com/watch?t=871&amp;v=Jaa2LmZaNeU&amp;feature=youtu.be&amp;themeRefresh=1">1</a>) what types of signatures it possesses:</p>
<p><strong>Ticket TGS</strong>:</p>
<ul>
<li>
<p><strong><a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/a194aa34-81bd-46a0-a931-2e05b87d1098">Server Signature</a></strong>: &ldquo;Server Signature&rdquo; is a field contained in the PAC that holds a string representing the signature (also called checksum) calculated by signing the PAC content with the secrets of the service account against which authentication is attempted.</p>
</li>
<li>
<p><strong><a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/3122bf00-ea87-4c3f-92a0-91c0a99f5eec">KDC Signature</a></strong>: &ldquo;KDC Signature&rdquo; is a field contained in the PAC that holds a string representing the signature (also called checksum) created by signing the PAC content with the secret of the &ldquo;<a href="https://www.tarlogic.com/cybersecurity-glossary/krbtgt/">krbtgt</a>&rdquo; account (default service account of the KDC).</p>
</li>
</ul>
<blockquote>
<p>This signature is the one that could be checked inside a TGS Ticket to prevent a Silver Ticket BUT this is <a href="https://zer1t0.gitlab.io/posts/attacking_ad/#pac">NOT</a> done.</p></blockquote>
<p><span id=15> <strong>Ticket TGT</strong>:</p>
<ul>
<li><strong><a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-pac/3122bf00-ea87-4c3f-92a0-91c0a99f5eec">KDC Signature</a></strong>: &ldquo;KDC Signature&rdquo; is a field contained in the PAC that holds a string representing the signature (also called checksum) created by signing the PAC content with the secret of the &ldquo;<a href="https://www.tarlogic.com/cybersecurity-glossary/krbtgt/">krbtgt</a>&rdquo; account (default service account of the KDC).</li>
</ul>
<p>In reality the TGT Ticket also has a field dedicated to the &ldquo;Server Signature&rdquo; but having no meaning, since it is the TGS Ticket that is used to authenticate to services and not the TGT Ticket, a &ldquo;symbolic&rdquo; value will be present there which will have no relevance.</p>
<span id=178>
<h2 id="kerberos-keys"><strong>Kerberos Keys</strong></h2>
<h3 id="what-1"><strong>What&rsquo;s a Kerberos Key?</strong></h3>
<p>As already seen, the Kerberos protocol allows the user to request a TGT Ticket from the Domain Controller by sending a KRB_AS_REQ encrypting the &ldquo;Timestamp&rdquo; field with the NT Hash of the account performing the authentication, if it is correct everything proceeds properly, that said, in reality, the Kerberos protocol also more generically accepts the entity called &ldquo;Kerberos Keys&rdquo;.</p>
<p>When a domain account is created, the Domain Controller takes the corresponding plaintext password as input and applies different hashing algorithms to it, the outputs of these algorithms are hash values called Kerberos Keys:</p>
<ul>
<li>
<p><strong>AES 256 Key</strong>: &ldquo;AES 256 Key&rdquo; is the output of the plain-text password using the &ldquo;<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/security-policy-settings/network-security-configure-encryption-types-allowed-for-kerberos">AES256_HMAC_SHA1</a>&rdquo; algorithm.</p>
<p>This &ldquo;AES 256 Key&rdquo; is the Kerberos Key most commonly used by the Kerberos protocol, consequently an attacker using this Key instead of others will be able to bypass detection tools more easily.</p>
</li>
<li>
<p><strong>AES 128 Key</strong>: &ldquo;AES 128 Key&rdquo; is the output of the plain-text password using the &ldquo;<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/security-policy-settings/network-security-configure-encryption-types-allowed-for-kerberos">AES128_HMAC_SHA1</a>&rdquo; algorithm.</p>
</li>
<li>
<p><strong>DES Key (DES_CBC_MD5)</strong>: &ldquo;DES Key&rdquo; is the output of the plain-text password using the &ldquo;<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/security-policy-settings/network-security-configure-encryption-types-allowed-for-kerberos">DES_CBC_MD5</a>&rdquo; algorithm.</p>
</li>
<li>
<p><strong>RC4 Key</strong>: &ldquo;RC4 Key&rdquo; is the output of the plain-text password using the now deprecated &ldquo;<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/security-policy-settings/network-security-configure-encryption-types-allowed-for-kerberos">RC4_HMAC_MD5</a>&rdquo; algorithm.</p>
<p>This &ldquo;RC4 Key&rdquo; is nothing more than the NT Hash (<a href="https://zer1t0.gitlab.io/posts/attacking_ad/#lm-nt-hashes">in jargon, sometimes, it&rsquo;s called also NTLM Hash although it&rsquo;s less accurate</a>) of the domain account password, consequently, being synonyms, it means that the term &ldquo;NT Hash&rdquo; used during the explanation of the Kerberos protocol is nothing more than the &ldquo;RC4 Key&rdquo;.</p>
</li>
</ul>
<p>An attacker is able to retrieve the Kerberos Keys for example by dumping the &ldquo;<a href="https://www.semperis.com/blog/ntds-dit-extraction-explained/">NTDS.dit</a>&rdquo; file from the Domain Controller, below there is an example using the <a href="https://github.com/fortra/impacket/blob/master/examples/secretsdump.py">Secretsdump</a> utility:</p>

    <img src="/not_so_brief_overview_about_kerberos/kerberos_key_1.png"  class="center"  style="border-radius: 8px;"  />


<p>In the section indicated above, the &ldquo;RC4 Keys&rdquo; are NOT present because as the tool for semplicity places them in the section dedicated to the NT Hash of the domain accounts.</p>

    <img src="/not_so_brief_overview_about_kerberos/kerberos_key_2.png"  class="center"  style="border-radius: 8px;"  />


<p>If an attacker manages to obtain a Kerberos Key of a victim account, they would be able to impersonate it in a Kerberos authentication using an attack called &ldquo;Pass-The-Key&rdquo;.</p>
<h2 id="service-principal-name-spn"><strong>Service Principal Name (SPN)</strong></h2>
<h3 id="what-2"><strong>What&rsquo;s a Service Principal Name (SPN)?</strong></h3>
<p>A &ldquo;<a href="https://en.wikipedia.org/wiki/Service_account">Service Account</a>&rdquo; is nothing more than an account created and used for the start &amp; running of a specific service, furthermore, if this service needs to interact with other services it can do it using its own &ldquo;Service Account&rdquo;.</p>
<p>In a classic scenario when the local or domain user &ldquo;BOB&rdquo; starts the software &ldquo;Notepad&rdquo; application, the operating system runs &ldquo;Notepad&rdquo; using the account &ldquo;BOB&rdquo;, when a Service Account is used, instead, the OS will start the service (for example MSSQL) using that specific Service Account, this will mean that viewing the running processes though Task Manager it will be possible to see that the service &ldquo;Microsoft SQL&rdquo; is running with the related &ldquo;Service Account&rdquo;.</p>
<p>One type of &ldquo;Service Account&rdquo; are the &ldquo;<a href="https://learn.microsoft.com/en-us/windows/win32/services/service-user-accounts">Standard Service Account</a>&rdquo;, so &ldquo;Service Accounts&rdquo; that do NOT have passwords and they are used by Windows OS to start specific services usually system-related, the most common example is the &ldquo;<a href="https://learn.microsoft.com/it-it/windows/win32/services/networkservice-account?redirectedfrom=MSDN">NetworkService Account</a>&rdquo; which is usually used to start the IIS or MSSQL Server service.</p>
<p><span id=30>A <a href="https://learn.microsoft.com/en-us/windows/win32/ad/service-principal-names">Service Principal Name (SPN)</a> is a unique identifier of a service instance, SPNs are used by Kerberos authentication to associate the service instance (the start &amp; running of the service, for example Microsoft SQL) with a &ldquo;Logon Account&rdquo; (which it will become Service Account); in other words, (generically speaking) an SPN can be considered as a generic object that represents the association between a service and a domain account, that said, technically, <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc772815%28v=ws.10%29#service-principal-names">it is an attribute of the &ldquo;Users&rdquo; object</a>.</p>
<p><span id=31>&ldquo;Standard Service Accounts&rdquo; by definition are NOT &ldquo;Logon Accounts&rdquo; since they are used exclusively by the operating system and do NOT have passwords.</p>
<p>This essentially means that through an SPN it is possible to map the start &amp; running of a service on a server to a domain account rather than associating it with a &ldquo;Standard Service Account&rdquo; such as the NetworkService Account.</p>
<p>Each service (hosted on a server joined into a domain) that wants a domain user to authenticate to it using the Kerberos protocol (Kerberos SSO) must necessarily have an SPN configured <a href="/posts/not_so_brief_overview_about_kerberos/#16">so that the potential &ldquo;Client&rdquo; (so the actor involved in Kerberos Authentication) can uniquely identify the service within the network</a>; if no SPN is set for a service, then the Client has NO way to locate the service and consequently the Kerberos authentication is NOT possible.</p>
<p>An SPN (so an attribute of the &ldquo;user&rdquo; object) is (usually, it&rsquo;s not mandatory) built using the name of the &ldquo;service class&rdquo; followed by the hostname that starts the service; finally, optionally, it can also include the port and an arbitrary name to associate:</p>
<p><span id="target-text2">
    <img src="/not_so_brief_overview_about_kerberos/spn1.png"  class="center"  style="border-radius: 8px;"  />

</p>
<p>For example: A SPN named &ldquo;DNS/dc01.capsule.corp&rdquo; rappresent a DNS Service hosted on the DC01.capsule.corp associated with a domain user like &ldquo;capsule.corp\arbitrary_dnsuser&rdquo;.</p>
<p>Microsoft has documented a (non-exhaustive) list of the so-called &ldquo;service_class,&rdquo; that is, standard names used to indicate certain types of services; as you can see, the most common are <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc772815%28v=ws.10%29#service-principal-names">CIFS, DNS, SPOOLER and WWW</a>.</p>
<h3 id="relationship-between-a-spn--computer-account"><strong>Relationship Between a SPN &amp; Computer Account</strong></h3>
<p>In a domain scenario, each &ldquo;person&rdquo; within the organization will have its own domain user account (so a &ldquo;Users&rdquo; object); that said, every computer joined to the domain will also have its own associated domain account, called a &ldquo;Computer Account&rdquo; or &ldquo;Machine Account&rdquo; (<a href="https://itfreetraining.com/lesson/computer-accounts/">1</a>, <a href="https://zer1t0.gitlab.io/posts/attacking_ad/#computer-accounts">2</a>) which will be used by the Client itself (or more precisely by the SYSTEM account of the Client) for activities where it needs to interact with other entity joined within the domain, for example checking if it is necessary to update the &ldquo;Group Policies&rdquo; (Client -&gt; Domain Controller), <a href="/posts/not_so_brief_overview_about_kerberos/#4">verifying the permissions of a domain account authenticated to the computer with Kerberos and so on</a>.</p>
<p>The difference between a &ldquo;User&rdquo; and a &ldquo;Computer Account&rdquo; is that even though both are domain user that exists and are registered on the DC, the first is an object of type &ldquo;<a href="https://www.windows-active-directory.com/active-directory-user-objects-management.html">User</a>,&rdquo; while the second, that is, the &ldquo;Computer Account,&rdquo; is instead <a href="https://zer1t0.gitlab.io/posts/attacking_ad/#computer-accounts">a subclass of the &ldquo;User&rdquo; class</a> (so we can say it&rsquo;s a user) BUT it is stored within a &ldquo;Computer&rdquo; object.</p>
<p>The following command queries the DC and requests to print on screen all the domain accounts that exists in the AD; as you can see, in addition to the Administrator account, there are: the nominal account (tstark, fcastle, pparker), the service account (SQLService) and 3 other accounts indicated with a $ at the end of the syntax, those are the &ldquo;Computer Accounts&rdquo;; all &ldquo;Computer Accounts&rdquo; (or &ldquo;Machine Accounts&rdquo;) have as their name the associated hostname and end with the $ sign.</p>

    <img src="/not_so_brief_overview_about_kerberos/spn2.png"  class="center"  style="border-radius: 8px;"  />


<p>Consequently, &ldquo;HYDRA-DC$&rdquo; is the &ldquo;Computer Account&rdquo; of the Domain Controller HYDRA-DC, &ldquo;THEPUNISHER$&rdquo; is the &ldquo;Computer Account&rdquo; of the Client THEPUNISHER, and finally &ldquo;SPIDERMAN$&rdquo; is the &ldquo;Computer Account&rdquo; of the Client SPIDERMAN.</p>
<p><span id=34>A &ldquo;Computer Account&rdquo; (Machine Account), unlike a traditional domain user, is automatically generated by the DC when the computer is joined to the domain; specifically, the computer itself randomly (<a href="https://zer1t0.gitlab.io/posts/attacking_ad/#kerberoast">120 characters</a>) creates the password (and then shares it with the DC) and by default it will use the machine’s hostname followed by a $ for the creation of the name; that said, the password of the domain account &ldquo;Computer Account&rdquo; is instead changed <a href="https://adsecurity.org/?p=280">by default</a> (this timing is configurable - <a href="https://techcommunity.microsoft.com/blog/askds/machine-account-password-process/396026">1</a>, <a href="https://zer1t0.gitlab.io/posts/attacking_ad/#lsa-secrets">2</a>) every 30 days.</p>
<p>In addition to the existence of SPNs that allow associating a domain user (becoming a Service Account in this scenario) with a specific service, so by setting a specific &ldquo;Service Class&rdquo; such as CIFS or others, there is also a SPNs of type &ldquo;HOST&rdquo;.</p>
<p>Technically, <a href="/posts/not_so_brief_overview_about_kerberos/#30">as previously told</a>, an SPN was created with the purpose of associating a service with a Service Account (domain user), a SPN of type HOST is the exception to this rule since the keyword &ldquo;HOST&rdquo; is NOT a service but directly represents the whole &ldquo;computer&rdquo; object itself, in order to associate a whole &ldquo;Computer&rdquo; object with a Service Account via SPN, in reality a trick is used, essentially the keyword HOST in order to represent the whole machine but having to necessarily specify a service, the &ldquo;HOST&rdquo; Service Class is an ALIAS (<a href="https://en.hackndo.com/service-principal-name-spn/#edge-case---host">1</a>, <a href="https://learn.microsoft.com/en-us/windows/win32/adschema/a-spnmappings">2</a>, <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc772815%28v=ws.10%29#service-principal-names">3</a>) that groups together all the possible <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc772815%28v=ws.10%29#service-principal-names">Service Class</a> of an SPN such as CIFS, WWW, DNS etc, subsequently it was defined that the Service Account that can be associated with the &ldquo;Computer&rdquo; object (which indirectly holds the Host SPN) via SPN is its corresponding &ldquo;Computer Account&rdquo;, in other words, for example: The SPN &ldquo;HOST\Workstation1&rdquo; links the Computer object &ldquo;Workstation1&rdquo; to the Service Account &ldquo;Workstation1$&rdquo; (which is a Computer Account).</p>
<blockquote>
<p>When a machine is joined to the domain, the corresponding AD Object of type &ldquo;computers&rdquo; is created within the domain, when this happens the Domain Controller automatically creates 2 SPNs to attach to it that follow the following syntax: &ldquo;HOST/&lt;HOSTNAME&gt;&rdquo; &amp; &ldquo;HOST/&lt;HOSTNAME&gt;.&lt;DOMAIN&gt;&rdquo;</p></blockquote>
<p><span id=17>Finally, it should be specified that if a service is run on a computer with a &ldquo;Standard Service Account&rdquo; (for example Local System / NetworkService Account), such as by default the CIFS / LDAP services, if these services need to use the Kerberos protocol (for example they accept a Kerberos domain authentication) the computer will use the &ldquo;Computer Account&rdquo; of the machine that host these services as their Service Account (in this scenario the &ldquo;secrets&rdquo; of the Computer Account will be used to encrypt the TGS Ticket); this happens because the &ldquo;Standard Service Account&rdquo; (ex Local System / NetworkService Account) <a href="/posts/not_so_brief_overview_about_kerberos/#31">exists only in a local context</a>.</p>
<blockquote>
<p>The Service Class &ldquo;HOST&rdquo; also has another utility, since it is assigned by default to a newly created &ldquo;Computer&rdquo; object &amp; it&rsquo;s an alias of ALL &ldquo;Service Classes&rdquo;, it natively configure the domain environment to allow a Client to perform a Kerberos Authentication against commonly used services (e.g: CIFS for SMB authentication, HTTP for WinRM authentication) sparing the Sysadmin the tedious task of manually assigning these SPNs to each machine when it&rsquo;s needed.</p></blockquote>
<h2 id="inspect-the-kerberos-yourself"><strong>Inspect the Kerberos yourself!</strong></h2>
<p>Now that the theory has been explained i recommend moving on to practice!</p>
<p><span id=35>For educational purposes i recommend creating your own personal lab, there are several resources online that detail <a href="https://www.youtube.com/watch?v=xftEuVQ7kY0">how to do this</a>, once this has been done, it will be possible to use WireShark to analyze the traffic started from a Kerberos authentication, to see the whole process we can for example run the command &ldquo;klist purge&rdquo; (which removes all the Cached Kerberos Tickets) on a domain joined Windows machine and perform a Network Logon authentication to another machine within the network, for example via SMB, if you have do this you will see all the Kerberso traffic generated.</p>

    <img src="/not_so_brief_overview_about_kerberos/kerberos_wholeflow.png"  class="center"  style="border-radius: 8px;"  />


<p>As you can see with the following traffic has been generated:</p>
<ol>
<li>KRB_AS_REQ</li>
</ol>
<p>The reason why the 2 &ldquo;KRB_AS_REQ&rdquo; packets were sent <a href="/posts/not_so_brief_overview_about_kerberos/#32">has been previously analyzed.</a></p>
<ol start="2">
<li>KRB_AS_REP</li>
<li>KRB_TGS_REQ</li>
<li>KRB_TGS_REP</li>
</ol>
<p>In this scenario, only &ldquo;<a href="/posts/not_so_brief_overview_about_kerberos/#33">Mutual Authentication</a>&rdquo; is enabled:</p>
<ol start="5">
<li>KRB_AP_REQ: The Kerberos packet &ldquo;KRB_AP_REQ&rdquo; is encapsulated within the packet related to the protocol used by the service hosted by the AP, in this case it&rsquo;s SMB.</li>
</ol>
<ul>
<li>KRB_AP_REP: Since &ldquo;Mutual Authentication&rdquo; is enabled, the AP will respond to the Client with a KRB_AP_REP, always embedding it in this example inside the SMB protocol.</li>
</ul>
<h3 id="how-to-decrypt-kerberos-traffic"><strong>How to decrypt Kerberos traffic</strong></h3>
<p>As previously analyzed, some portions of the Kerberos packets will be encrypted with the krbtgt account secrets (TGT Ticket) or with the Service Account secrets related to the service hosted by the AP (TGS Ticket), to be able to analyze everything in plain-text it&rsquo;s necessary to properly configure Wireshark, specifically it is possible to provide Wireshark with a &ldquo;<a href="https://web.mit.edu/kerberos/krb5-devel/doc/basic/keytab_def.html">keytab</a>&rdquo; file containing ALL the secrets (NT Hash &amp; <a href="/posts/not_so_brief_overview_about_kerberos/#kerberos-keys">Kerberos Key</a>) related to the entities involved in Kerberos authentication, in this way Wireshark will be able to decrypt the part.</p>
<blockquote>
<p><a href="/posts/not_so_brief_overview_about_kerberos/#34">As already explained</a>, since by default the DC changes the password of ALL Computer Accounts every 30 days, if this behavior is not disabled / modified, the operation will need to be repeated periodically.</p></blockquote>
<p>To do this, one can perform a DCSync on the Domain Controller and retrieve the NT Hashes, AES-256 Kerberos Key, and AES-128 Kerberos Key of each involved &ldquo;Principal&rdquo; (Domain Users &amp; Computer Accounts &amp; krbtgt user), then insert these values into the dedicated section in the &ldquo;<a href="https://github.com/dirkjanm/forest-trust-tools/blob/master/keytab.py">keytab.py</a>&rdquo; script and finally execute the script to generate the &ldquo;keytab.kt&rdquo; file:</p>
<ul>
<li>
<p>Dump the &ldquo;secrets&rdquo; (perform a DCSync).</p>

      <img src="/not_so_brief_overview_about_kerberos/dcsync.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
<li>
<p>Populate the &ldquo;<a href="https://github.com/dirkjanm/forest-trust-tools/blob/master/keytab.py">keytab.py</a>&rdquo; script.</p>

      <img src="/not_so_brief_overview_about_kerberos/keytab1.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
<li>
<p>Execute the &ldquo;keytab.py&rdquo; script to generate the &ldquo;keytab.kt&rdquo; file.</p>

      <img src="/not_so_brief_overview_about_kerberos/keytab2.png"  class="center"  style="border-radius: 8px;"  />
  

</li>
</ul>
<p>Once this is done, go to Wireshark and navigate to &ldquo;Edit -&gt; Preferences -&gt; Protocols -&gt; KRB5&rdquo;, select the file and check the box &ldquo;Try to decrypt Kerberos blob&rdquo;.</p>

    <img src="/not_so_brief_overview_about_kerberos/keytab3.png"  class="center"  style="border-radius: 8px;"  />


<p>Once everything is done, all the encrypted Wireshark traffic that has been correctly decrypted will be highlighted in blue, while if the decryption has failed it will be highlighted in yellow:</p>

    <img src="/not_so_brief_overview_about_kerberos/keytab4.png"  class="center"  style="border-radius: 8px;"  />


<h2 id="outro"><strong>Outro</strong></h2>
<p>The Kerberos protocol is a beast to understand and we have only scratched its surface, with this article i hope to have clarified its basic behavior, if you notice any inaccuracies or want to ask me something, do not hesitate to write to me!</p>
<h2 id="references"><strong>References</strong></h2>
<ul>
<li><a href="https://stealthbits.com/blog/what-is-kerberos/">https://stealthbits.com/blog/what-is-kerberos/</a></li>
<li><a href="https://www.tarlogic.com/en/blog/how-kerberos-works/">https://www.tarlogic.com/en/blog/how-kerberos-works/</a></li>
<li><a href="https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-accounts#krbtgt-account">https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-accounts#krbtgt-account</a></li>
<li><a href="https://www.devadmin.it/2020/07/27/account-krbtgt-e-best-practices-di-sicurezza/">https://www.devadmin.it/2020/07/27/account-krbtgt-e-best-practices-di-sicurezza/</a></li>
<li><a href="https://www.educative.io/blog/kerberos-in-5-minutes">https://www.educative.io/blog/kerberos-in-5-minutes</a></li>
<li><a href="https://redsiege.com/wp-content/uploads/2020/09/SIEGECAST-KERBEROS-AND-ATTACKS-101.pdf">https://redsiege.com/wp-content/uploads/2020/09/SIEGECAST-KERBEROS-AND-ATTACKS-101.pdf</a></li>
<li><a href="https://www.crowdstrike.com/cybersecurity-101/ntlm-windows-new-technology-lan-manager/">https://www.crowdstrike.com/cybersecurity-101/ntlm-windows-new-technology-lan-manager/</a></li>
<li><a href="https://en.hackndo.com/kerberos/">https://en.hackndo.com/kerberos/</a></li>
<li><a href="https://learn.microsoft.com/en-us/archive/blogs/openspecification/">https://learn.microsoft.com/en-us/archive/blogs/openspecification/</a></li>
<li><a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/b4af186e-b2ff-43f9-b18e-eedb366abf13">https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-kile/b4af186e-b2ff-43f9-b18e-eedb366abf13</a></li>
<li><a href="https://syfuhs.net/what-happens-when-you-type-your-password-into-windows">https://syfuhs.net/what-happens-when-you-type-your-password-into-windows</a></li>
<li><a href="https://swarm.ptsecurity.com/kerberoasting-without-spns/">https://swarm.ptsecurity.com/kerberoasting-without-spns/</a></li>
<li><a href="https://labs.lares.com/fear-kerberos-pt1/#preauth">https://labs.lares.com/fear-kerberos-pt1/#preauth</a></li>
<li>https//www.chudamax.com/posts/kerberos-102-overview/</li>
<li><a href="https://en.hackndo.com/kerberos-silver-golden-tickets/#pac">https://en.hackndo.com/kerberos-silver-golden-tickets/#pac</a> <a href="https://zer1t0.gitlab.io/posts/attacking_ad/#pac">https://zer1t0.gitlab.io/posts/attacking_ad/#pac</a></li>
<li><a href="https://trustedsec.com/blog/red-vs-blue-kerberos-ticket-times-checksums-and-you">https://trustedsec.com/blog/red-vs-blue-kerberos-ticket-times-checksums-and-you</a></li>
<li><a href="https://labs.lares.com/author/raul/">https://labs.lares.com/author/raul/</a></li>
<li><a href="https://zer1t0.gitlab.io/posts/attacking_ad/#user-kerberos-keys">https://zer1t0.gitlab.io/posts/attacking_ad/#user-kerberos-keys</a></li>
<li><a href="https://www.thehacker.recipes/ad/movement/kerberos/ptk">https://www.thehacker.recipes/ad/movement/kerberos/ptk</a></li>
<li><a href="https://en.wikipedia.org/wiki/Service_account">https://en.wikipedia.org/wiki/Service_account</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/ad/service-principal-names">https://learn.microsoft.com/en-us/windows/win32/ad/service-principal-names</a></li>
<li><a href="https://malicious.link/posts/2016/kerberoast-pt1/">https://malicious.link/posts/2016/kerberoast-pt1/</a></li>
<li><a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc772815%28v=ws.10%29#service-principal-names">https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc772815(v=ws.10)#service-principal-names</a></li>
<li><a href="https://en.hackndo.com/service-principal-name-spn/#edge-case---host">https://en.hackndo.com/service-principal-name-spn/#edge-case---host</a></li>
<li><a href="https://zer1t0.gitlab.io/posts/attacking_ad/#computer-accounts">https://zer1t0.gitlab.io/posts/attacking_ad/#computer-accounts</a></li>
</ul>
]]></content></item></channel></rss>